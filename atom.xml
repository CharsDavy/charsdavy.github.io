<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-06-24T19:41:01+08:00</updated><id>http://localhost:4000/</id><title type="html">Chars’s Blog</title><subtitle>&lt;p&gt;哈喽，我是 &lt;a href=&quot;https://twitter.com/charsdavy&quot;&gt;@Chars&lt;/a&gt;，是一名来自中国的 iOS 开发者。&lt;/p&gt; &lt;p&gt;业余时间参加 &lt;a href=&quot;https://github.com/xitu/gold-miner&quot;&gt;掘金翻译计划&lt;/a&gt;，撰写知乎专栏&lt;a href=&quot;https://zhuanlan.zhihu.com/easy-to-understand-algorithm&quot;&gt;《通俗易懂的算法》&lt;/a&gt;、&lt;a href=&quot;https://zhuanlan.zhihu.com/health-go&quot;&gt;《如何独立开发一个完整应用》&lt;/a&gt;</subtitle><author><name>Chars</name></author><entry><title type="html">iOS 单元测试</title><link href="http://localhost:4000/blog/ios-unit-test/" rel="alternate" type="text/html" title="iOS 单元测试" /><published>2019-06-24T00:00:00+08:00</published><updated>2019-06-24T00:00:00+08:00</updated><id>http://localhost:4000/blog/ios-unit-test</id><content type="html" xml:base="http://localhost:4000/blog/ios-unit-test/">&lt;p&gt;单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。对于单元测试中单元的含义，一般来说，要根据实际情况去判定其具体含义，如 C 语言中单元指一个函数，Java 里单元指一个类，图形化的软件中可以指一个窗口或一个菜单等。总的来说，单元就是人为规定的最小的被测功能模块。&lt;/p&gt;

&lt;p&gt;单元测试是在软件开发过程中要进行的最低级别的测试活动，软件的独立单元将在与程序的其他部分相隔离的情况下进行测试。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;为什么要做单元测试&quot;&gt;为什么要做单元测试&lt;/h2&gt;

&lt;p&gt;1）在一个复杂的项目中添加某功能模块时，可以快捷的进行针对性测试，而不用将整个项目 Run 起来。&lt;/p&gt;

&lt;p&gt;2）可以便捷的对某个具体方法进行测试。&lt;/p&gt;

&lt;h2 id=&quot;单元测试有哪些&quot;&gt;单元测试有哪些&lt;/h2&gt;

&lt;p&gt;iOS 开发（或者 MacOS、tvOS、watchOS 等）中，单元测试有多种方式，主要分为 Xcode 提供的以及第三方测试框架这两类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Xcode自带
XCTest：XCTest 是 Xcode自带的单元测试工具，其前身是 OCUnit，随着 Xcode 的发展，XCTest 已经越来越完善，功能也越强大。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第三方框架
GHUnit：GHUnit  是 GitHub 上著名的开源测试框架，可视化、开源、扩展等功能，让其相比 XCTest 更加强大（现在的 XCTest 也很完善了，不过 GHUnit 比较老，现在已经停止维护，不建议使用）
OCMock：OCMock 也是 Github 上的著名开源测试框架，用于 Mock、Stub，为测试提供数据作假功能。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上三种就是比较主流的测试 Xcode 单元测试途径，还有一些 BDD 行为测试框架：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;什么是 BDD
BDD（Behavior Driven Development），即行为驱动开发，是敏捷开发技术之一，通过自然语言定义系统行为，以功能使用者的角度，编写需求场景，且这些行为描述可以直接形成需求文档，同时也是测试标准。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Specta：GitHub 上轻量级的 BDD 测试框架。&lt;/li&gt;
  &lt;li&gt;Expecta：与 Specta 同个作者，是一个功能强大的匹配框架。&lt;/li&gt;
  &lt;li&gt;Kiwi：Kiwi 是重量级的，集 OCMock、Specta、Expecta 所拥有的功能与一身的 BDD DSL 测试框架。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他的，还有一些其他测试工具、测试方式，如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nocilla：强大的 HTTP 模拟测试工具。&lt;/li&gt;
  &lt;li&gt;OHHTTPStubs：也是 HTTP 模拟测试工具。&lt;/li&gt;
  &lt;li&gt;TUDelorean：基于 Objective-C 的时间模拟测试工具。&lt;/li&gt;
  &lt;li&gt;KIF：集成／界面测试工具，其它的还有 Frank、Calabash 等。&lt;/li&gt;
  &lt;li&gt;GitHub + Jenkins + TestFlight：自动化测试。&lt;/li&gt;
  &lt;li&gt;Monkey Test：随机测试。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;xctest-测试&quot;&gt;XCTest 测试&lt;/h2&gt;

&lt;p&gt;1、创建测试类&lt;/p&gt;

&lt;p&gt;注意，所有测试类都继承自 XCTestCase。&lt;/p&gt;

&lt;p&gt;2、测试类的结构&lt;/p&gt;

&lt;p&gt;默认创建的单元测试类为一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.m&lt;/code&gt; 文件，里面包含了以下四个方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;- (void)setUp&lt;/code&gt;：在每个测试用例开始前调用，可以做一些测试准备工作，为可选方法。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;- (void)tearDown&lt;/code&gt;：在每个测试用例结束后调用，可以做一些测试收尾工作，为可选方法。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;- (void)testExample&lt;/code&gt;：默认创建的测试用例。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;- (void)testPerformanceExample&lt;/code&gt;：性能测试方法。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3、测试流程&lt;/p&gt;

&lt;p&gt;当我们默认执行测试时，系统找到所有的测试类，并执行每个测试方法；我们也可以选择性地执行某些测试而已，比如，在 scheme 中 disable 某个用例，或者直接在测试导航栏中每个测试用例后面的运行按钮，单独执行某个测试。&lt;/p&gt;

&lt;p&gt;默认流程如下：&lt;/p&gt;

&lt;p&gt;上一个测试类 -&amp;gt; 当前类&lt;code class=&quot;highlighter-rouge&quot;&gt;+ (void)setUp&lt;/code&gt; -&amp;gt; [ &lt;code class=&quot;highlighter-rouge&quot;&gt;- (void)setUp&lt;/code&gt; -&amp;gt; 测试方法 -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;- (void)tearDown&lt;/code&gt; ] (循环直至当前类测试方法全部执行完) -&amp;gt; 当前类 &lt;code class=&quot;highlighter-rouge&quot;&gt;+ (void)tearDown&lt;/code&gt; -&amp;gt; 下一个测试类&lt;/p&gt;

&lt;p&gt;4、测试方法&lt;/p&gt;

&lt;p&gt;测试方法以 test 为前缀，没有参数，返回值为 void，方法中用断言来判断测试的正确性：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)testColorIsRed {
   // Set up, call test subject API. (Code could be shared in setUp method.)
   // Test logic and values, assertions report pass/fail to testing framework.
   // Tear down. (Code could be shared in tearDown method.
}

- (void)testThatItDoesURLEncoding {
    // given
    NSString *searchQuery = @&quot;$content$amp;?@&quot;;
    HTTPRequest *request = [HTTPRequest requestWithURL:@&quot;/search?q=%@&quot;, searchQuery];

    // when
    NSString *encodedURL = request.URL;

    // then
    XCTAssertEqualObjects(encodedURL, @&quot;/search?q=%24%26%3F%40&quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;5、测试断言&lt;/p&gt;

&lt;p&gt;断言一般由判断条件、字符串 format、字符串参数组成，参数可选，在 XCTest 中，断言有以下分类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unconditional Fail：XCTFail，失败时候抛出。&lt;/li&gt;
  &lt;li&gt;Equality Tests：用于断言两个表达式相等或不相等，如：XCTAssertEqual、XCTAssertEqualWithAccuracy、XCTAssertNotEqual、 XCTAssertGreaterThan。&lt;/li&gt;
  &lt;li&gt;Boolean Tests：断言布尔表达式真假，如：XCTAssertTrue、XCTAssertFalse。&lt;/li&gt;
  &lt;li&gt;Nil Tests：空断言，如：XCTAssertNil、XCTAssertNotNil。&lt;/li&gt;
  &lt;li&gt;Exception Tests：断言表达式抛出或不抛出异常，如：XCTAssertThrows、XCTAssertThrowsSpecific、XCTAssertNoThrow。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;spectaexpecta-测试&quot;&gt;Specta、Expecta 测试&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/specta/specta&quot;&gt;Specta&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/specta/expecta&quot;&gt;Expecta&lt;/a&gt; 都是出自 Github 作者 &lt;a href=&quot;https://github.com/orta&quot;&gt;Orta&lt;/a&gt; 之手，他最出名的开源框架莫过于 &lt;a href=&quot;https://github.com/CocoaPods/CocoaPods&quot;&gt;Cocoapods&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;specta&quot;&gt;Specta&lt;/h3&gt;

&lt;p&gt;Specta 是一个轻量级 BBD 测试框架，其为 &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;DSL (Domain-Specific Language)&lt;/a&gt; 模式，让测试更加接近于自然语言描述，更加易懂。&lt;/p&gt;

&lt;p&gt;1、主要有以下特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;容易集成到项目中。&lt;/li&gt;
  &lt;li&gt;基于XCTest编写，可以很好地与XCTest配合使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2、语法介绍&lt;/p&gt;

&lt;p&gt;1) SpecBegin 声明了一个测试类，SpecEnd 结束类声明&lt;/p&gt;

&lt;p&gt;2) describe (context) 块声明了一组实例&lt;/p&gt;

&lt;p&gt;3) it (example/specify) 是一个单一的样例&lt;/p&gt;

&lt;p&gt;4) beforeAll 是一个执行于全部同级块之前的块，仅仅执行一次。afterAll 与beforeAll相反，是在全部同级块之后执行的块。仅仅执行一次。&lt;/p&gt;

&lt;p&gt;5) beforeEach/afterEach，在每一个同级块执行的时候，都会执行一次，而beforeAll/afterAll仅仅会执行一次&lt;/p&gt;

&lt;p&gt;6) it/waitUntil/done()。异步调用，注意完毕异步操作之后。必须调用done()函数。例如以下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;it(@&quot;should do some stuff asynchronously&quot;, ^{
	waitUntil(^(DoneCallback done) {
	  // Async example blocks need to invoke done() callback.
	  done();
	});
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;7) sharedExamplesFor 和 itShouldBehaveLike结合在一起。能够实如今不同的spec之间共享同一套test case
sharedExamplesFor 设置多个spec之间共享的test case，第一个參数作为标识符。通过itShouldBehaveLike来执行spec中test case。第一个參数传入sharedExamplesFor设置时使用的标识符。&lt;/p&gt;

&lt;p&gt;注意：在describe局部使用sharedExamplesFor定义shared examples。能够在它作用域内覆盖全局的shared examples。&lt;/p&gt;

&lt;p&gt;8) pending，仅仅打印一条log信息。不做测试。这个语句会给出一条警告，能够作为一开始集中书写行为描写叙述时还未实现的测试的提示。&lt;/p&gt;

&lt;p&gt;3、一般使用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SpecBegin(Car)
    describe(@&quot;Car&quot;, ^{
        __block Car *car;

        // Will be run before each enclosed it
        beforeEach(^{
            car = [Car new];
        });

        // Will be run after each enclosed it
        afterEach(^{
            car = nil;
        });

        // An actual test
        it(@&quot;should be red&quot;, ^{
            expect(car.color).to.equal([UIColor redColor]);
        });

        describe(@&quot;when it is started&quot;, ^{
            beforeEach(^{
                [car start];
            });

            it(@&quot;should have engine running&quot;, ^{
                expect(car.engine.running).to.beTruthy();
            });
        });

        describe(@&quot;move to&quot;, ^{
            context(@&quot;when the engine is running&quot;, ^{
                beforeEach(^{
                    car.engine.running = YES;
                    [car moveTo:CGPointMake(42,0)];
                });

                it(@&quot;should move to given position&quot;, ^{
                    expect(car.position).to.equal(CGPointMake(42, 0));
                });
            });

            context(@&quot;when the engine is not running&quot;, ^{
                beforeEach(^{
                    car.engine.running = NO;
                    [car moveTo:CGPointMake(42,0)];
                });

                it(@&quot;should not move to given position&quot;, ^{
                    expect(car.engine.running).to.beTruthy();
                });
            });
        });
    });
SpecEnd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面例子对 Car 这个类做测试，通过多个上下文嵌套（describe/context），结合不同的条件（beforeEach)，来作出不同的断言（it)；当我们某个测试失败时，我们会收到一段很明确的错误信息，比如：汽车启动后应该移动到指定位置这个用例测试失败，那么我们会收到 Car move to when the engine is running should move to given position 这么一段话。这样非常接近自然语言的描述会让我们很快知道错误出在哪里。&lt;/p&gt;

&lt;p&gt;4、注意：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;如果想用 SPEC_BEGIN 和 SPEC_END 替代 SpecBegin and SpecEnd，应该在引入头文件之前写上 #define SPT_CEDAR_SYNTAX&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果要使用 XCTest Resporter，那么在 Test Scheme 中，把 SPTXCTestReporter 字段值改为 SPECTA_REPORTER_CLASS&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把环境变量 SPECTA_SHUFFLE 设置为 1 启用测试拖拽（test shuffling)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;expecta&quot;&gt;Expecta&lt;/h3&gt;

&lt;p&gt;Expecta 是基于 Objective-C／Cocoa 的断言框架，XCTest 自带的断言 XCAssert 有好几个基础操作，不过基础的断言不太丰富，和 Specta 也没有很适配。 Expecta 不一样，将匹配过程从断言中剥离开，可以很好地适配 Specta 的 DSL 断言块。&lt;/p&gt;

&lt;p&gt;1、Expecta 有以下几个特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;没有类型限制，比如数值 1，并不用关心它是整形还是浮点数&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;链式编程，可读性高，如：expect(foo).notTo.equal(1)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;反向匹配，断言不匹配只需加上 .notTo 或者 .toNot，如：expect(x).notTo.equal(y)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;延时匹配，可以在链式表达式中加入 .will、.willNot、.after(interval) 等操作来延时匹配&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可扩展，支持增加自定义匹配&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2、基础匹配 API：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;expect(x).to.equal(y); // x 与 y 相等
expect(x).to.beIdenticalTo(y); // x 与 y 相等且内存地址相同
expect(x).to.beNil(); // x 为 nil
expect(x).to.beTruthy(); // x 为 true（非 0）
expect(x).to.beFalsy(); // x 为 false（0 值）
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3、异步匹配&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;describe(@&quot;WebImage&quot;, ^{
	beforeAll(^{
	    // 设置默认延时匹配时间
	    [Expecta setAsynchronousTestTimeout:2];
	});

	it(@&quot;will not be nil&quot;, ^{
	    //	使用默认延时匹配
	    expect(webImage).willNot.beNil();
	});

	it(@&quot;should equal 42 after 3 seconds&quot;, ^{
	    // 不使用默认延时匹配，手动设置为3秒
	    expect(webImage).after(3).to.equal(42);
	});
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4、自定义使用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;Specta/Specta.h&amp;gt;
#import &amp;lt;Expecta/Expecta.h&amp;gt;
#import &quot;ImageModel.h&quot;

SpecBegin(ImageModel);

__block ImageModel *model;

beforeEach(^{
    model = [[ImageModel alloc] initWithUrl:@&quot;http://pic37.nipic.com/20140113/8800276_184927469000_2.png&quot; title:@&quot;天空独角马&quot; described:@&quot;在黄色的沙漠里，特别突兀&quot;];
});

it(@&quot;should not nil&quot;, ^{
    expect(model).toNot.beNil();
});

it(@&quot;equal&quot;, ^{
    expect(model.url).to.equal(@&quot;http://pic37.nipic.com/20140113/8800276_184927469000_2.png&quot;);
    expect(model.title).to.equal(@&quot;天空独角马&quot;);
    expect(model.described).to.equal(@&quot;在黄色的沙漠里，特别突兀&quot;);
});

SpecEnd;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;Expecta 和 Specta 需要配合使用，与 XCTest 一样都是基于 XCTestCase 实现。在断言的使用上，XCTest 太过死板，Expecta 和 Specta 则很灵活，可以满足大部分场景需求。&lt;/p&gt;</content><author><name>Chars</name></author><category term="pieces" /><category term="objc" /><category term="test" /><category term="ios" /><summary type="html">单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。对于单元测试中单元的含义，一般来说，要根据实际情况去判定其具体含义，如 C 语言中单元指一个函数，Java 里单元指一个类，图形化的软件中可以指一个窗口或一个菜单等。总的来说，单元就是人为规定的最小的被测功能模块。</summary></entry><entry><title type="html">Core Data 是什么样子的</title><link href="http://localhost:4000/blog/core-data-junior-learn/" rel="alternate" type="text/html" title="Core Data 是什么样子的" /><published>2019-03-22T00:00:00+08:00</published><updated>2019-03-22T00:00:00+08:00</updated><id>http://localhost:4000/blog/core-data-junior-learn</id><content type="html" xml:base="http://localhost:4000/blog/core-data-junior-learn/">&lt;p&gt;Core Data 是 iOS3.0 时引入的一个数据持久化的框架。与 sqlite 对比最大的优点莫过于支持对象的存储，苹果的官方文档说其简化了数据库的操作，使用 Core Data 确实可以大量减少代码中的 SQL 语句。&lt;/p&gt;

&lt;p&gt;可是现状，大家对于持久化的选择方案仍多数是 FMDB。笔者猜测，最大的原因可能就是性能。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/core-data-junior-learn-queries.jpg&quot; alt=&quot;各种持久化方案性能比较&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;core-data-是什么&quot;&gt;Core Data 是什么&lt;/h2&gt;

&lt;p&gt;Core Data 是一个模型层的技术，帮助开发者建立代表程序状态的模型层。同时也是一种持久化技术，它能将模型对象的状态持久化到磁盘。它是完全独立于 UI 层级的框架，是作为模型层框架被设计出来的。&lt;/p&gt;

&lt;p&gt;Core Data 不是一个 O/RM，但它比 O/RM 能做的更多。它也不是一个 SQL wrapper。它默认使用 SQL，但它是一种更高级的抽象概念。&lt;/p&gt;

&lt;h2 id=&quot;堆栈&quot;&gt;堆栈&lt;/h2&gt;

&lt;p&gt;Core Data 有相当多可用的组件。当所有的组件都捆绑到一起的时候，我们把它称作 Core Data 堆栈，这个堆栈有两个主要部分。&lt;/p&gt;

&lt;p&gt;一部分是关于对象图管理，这正是你需要很好掌握的那一部分，并且知道怎么使用。
另一部分是关于持久化，比如，保存你模型对象的状态，然后再恢复模型对象的状态。&lt;/p&gt;

&lt;p&gt;堆栈结构如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/core-data-junior-learn-stack-complex.png&quot; alt=&quot;Core Data 堆栈&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NSPersistentStoreCoordinator 是一个位于本地存储文件与缓存层（NSManagedObjectContext）之间的一个持久化层，它是真实操作数据库本地文件。&lt;/p&gt;

&lt;p&gt;NSManagedObjectContext 是一个被管理数据的上下文，它实际上是对所有数据库操作的一个缓存层，把所有的操作都先缓存起来避免大量磁盘 IO 造成不流畅，在操作完数据库后调用其 save 方法，就可以把数据库操作提交给持久化层（NSPersistentStoreCoordinator），由持久化层一次性写入数据库文件。&lt;/p&gt;

&lt;p&gt;NSManagedObject 是被管理的数据记录，对应数据库的一个表。&lt;/p&gt;

&lt;p&gt;另外，Core Data 可以将多个 stores 附属于同一个持久化存储协调器，并且除了存储 SQL 格式外，还有很多存储类型可供选择。
最常见的方案如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/core-data-junior-learn-stack-simple.png&quot; alt=&quot;多个 stores 持久化&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;实际使用&quot;&gt;实际使用&lt;/h2&gt;

&lt;p&gt;下面是笔者定义的一个 Event 表的元素组成&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/core-data-junior-learn-event-struct.png&quot; alt=&quot;数据表元素&quot; /&gt;&lt;/p&gt;

&lt;p&gt;定义数据模型&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MXWEventModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int64&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;新增数据&quot;&gt;新增数据&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persistentContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewContext&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eventModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MXWEventModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MXWEventModel&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSEntityDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forEntityName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;MXWEvent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSManagedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;insertInto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;detail&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;addr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;删除数据&quot;&gt;删除数据&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSFetchRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSFetchRequestResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;entityName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;MXWEvent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSPredicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;id==&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;deleteRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSBatchDeleteRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fetchRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deleteRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;修改数据&quot;&gt;修改数据&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eventModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MXWEventModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MXWEventModel&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSFetchRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSFetchRequestResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;entityName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;MXWEvent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSPredicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;id==&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eventObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;updateObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSManagedObject&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;updateObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;updateObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;detail&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;updateObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;updateObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;addr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;查找数据&quot;&gt;查找数据&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSFetchRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSFetchRequestResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;entityName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;MXWEvent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSPredicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;id==&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSManagedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MXWEventModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;detail&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;addr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;高级功能&quot;&gt;高级功能&lt;/h2&gt;

&lt;h3 id=&quot;数据迁移&quot;&gt;数据迁移&lt;/h3&gt;

&lt;p&gt;在功能迭代过程中，难免会遇到要修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;.xcdatamodeld&lt;/code&gt; 文件。例如，新增或删除一个实体、增加或删除一个原有实体的属性等。如果开发者没有设置数据迁移，那更新后原有的数据将会被清空，所以此时需要进行数据的迁移操作。&lt;/p&gt;

&lt;p&gt;Core Data 可以设置轻量级的数据迁移，系统会自动分析差异，进行映射，这种方式只适用于简单的增删实体或是增删属性等操作。除此之外还有一种相当复杂的自定义数据迁移。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// MARK: - Core Data stack&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;persistentContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSPersistentContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSPersistentContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loadPersistentStores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storeDescription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unresolved error &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 设置数据迁移（shouldMigrateStoreAutomatically 默认值为 true）&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sDescription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSPersistentStoreDescription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storeDescription&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSPersistentStoreDescription&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldMigrateStoreAutomatically&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldInferMappingModelAutomatically&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;思考&quot;&gt;思考&lt;/h2&gt;

&lt;p&gt;对于 Core Data，Apple 官方很久之前就已经推出，但是并不受开发者青睐。笔者在这段时间的学习过程中也在思考这个问题。&lt;/p&gt;

&lt;p&gt;下面是笔者学习中遇到的注意点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Core Data 中没有自增数据类型。因为 Core Data 不能使用数据库思维去使用，所以也就很好解释了。&lt;/li&gt;
  &lt;li&gt;设置 context 的 merge 策略，减少数据迁移的麻烦。&lt;/li&gt;
  &lt;li&gt;最好使用多线程，可以进一步提升性能。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最后，文章开头给出了性能比较。但是，笔者认为，在客户端并没有很大量的数据写入，只要开发者在使用过程中稍作注意，性能应该不是否决 Core Data 技术方案的理由。反倒，Core Data 对 iCloud 很好的支持，以及数据迁移备份，这些都可以很容易实现。笔者认为，完全可以考虑使用它做客户端的数据持久化方案。&lt;/p&gt;

&lt;h2 id=&quot;参考文档&quot;&gt;参考文档&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/#//apple_ref/doc/uid/TP40001075-CH2-SW1&quot;&gt;《Core Data Programming Guide》&lt;/a&gt;&lt;/p&gt;</content><author><name>Chars</name></author><category term="pieces" /><category term="swift" /><category term="persistence" /><category term="core data" /><category term="ios" /><summary type="html">Core Data 是 iOS3.0 时引入的一个数据持久化的框架。与 sqlite 对比最大的优点莫过于支持对象的存储，苹果的官方文档说其简化了数据库的操作，使用 Core Data 确实可以大量减少代码中的 SQL 语句。</summary></entry><entry><title type="html">日本，我眼中的样子</title><link href="http://localhost:4000/blog/japan-life-experience/" rel="alternate" type="text/html" title="日本，我眼中的样子" /><published>2018-12-01T00:00:00+08:00</published><updated>2018-12-01T00:00:00+08:00</updated><id>http://localhost:4000/blog/japan-life-experience</id><content type="html" xml:base="http://localhost:4000/blog/japan-life-experience/">&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-1.JPG&quot; alt=&quot;礁岸&quot; /&gt;&lt;/p&gt;

&lt;p&gt;来到日本已经有一段时间了，为什么直到现在才开始想起来写一点感想呢。一是，时间不多。二是，之前体验不多。&lt;/p&gt;

&lt;p&gt;这次来日本，抱着学习、求证的心态。身边的人问起，笔者的回答一向都是，过来“浪”了。因为不是有很具体的目的过来的。在大学毕业时，就因为一些原因，对这边有兴趣。而现在，有机会过来了。那么，就能好好验证之前自己的困惑了。&lt;/p&gt;

&lt;p&gt;目前为止，最大的体会就是，日本绝对是个生活的好地方。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-24.JPG&quot; alt=&quot;居住区&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-23.JPG&quot; alt=&quot;马路&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-22.JPG&quot; alt=&quot;公园&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-21.JPG&quot; alt=&quot;公园&quot; /&gt;&lt;/p&gt;

&lt;p&gt;环境很不错，在大马路上走，都基本闻不到尾气。晨跑笔者是直接在马路边、公园里、居住区进行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-25.JPG&quot; alt=&quot;街道&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-4.JPG&quot; alt=&quot;街道&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-20.JPG&quot; alt=&quot;街道&quot; /&gt;&lt;/p&gt;

&lt;p&gt;周末出去逛逛街，看看各种地方。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-5.JPG&quot; alt=&quot;街道&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-10.JPG&quot; alt=&quot;街道&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-6.JPG&quot; alt=&quot;街道&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-15.JPG&quot; alt=&quot;街道&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-18.JPG&quot; alt=&quot;街道&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-16.JPG&quot; alt=&quot;街道&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-19.JPG&quot; alt=&quot;街道&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-3.JPG&quot; alt=&quot;街道&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了这些安静，空寂的街道。在人气比较旺的旅游区，也是大同小异。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-9.JPG&quot; alt=&quot;街道&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-8.JPG&quot; alt=&quot;街道&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-7.JPG&quot; alt=&quot;街道&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-26.JPG&quot; alt=&quot;街道&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-27.JPG&quot; alt=&quot;街道&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-28.JPG&quot; alt=&quot;街道&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-29.JPG&quot; alt=&quot;街道&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个红色的邮筒，超级有个性，很难得见到在发达国家还保持着一些比较原始的习惯，还包括看报纸。&lt;/p&gt;

&lt;p&gt;久负盛名的团地。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-31.JPG&quot; alt=&quot;团地&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至于吃的嘛，那就很随意了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-30.JPG&quot; alt=&quot;寿司&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，具有标志性的建筑，东京塔，也要来看看的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-13.jpg&quot; alt=&quot;东京塔&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-14.jpg&quot; alt=&quot;东京塔&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后，附上一些生活杂类拍照。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-12.JPG&quot; alt=&quot;生活&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-11.JPG&quot; alt=&quot;生活&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-16.JPG&quot; alt=&quot;生活&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-17.JPG&quot; alt=&quot;生活&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/japan-life-experience/japan-life-experience-2.JPG&quot; alt=&quot;生活&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看了这么多，应该很多人都会想过来体验一把。客观来说，这边除了工作，其他都很好。为什么这么说呢？工作就涉及到了日本文化问题了，或许有很多人喜欢，但是对于我们这些受欧美影响较多的人来说，或许，当真的亲身体验时，可能又是另一番感受了吧。&lt;/p&gt;</content><author><name>Chars</name></author><category term="talk" /><category term="碎碎念" /><summary type="html"></summary></entry><entry><title type="html">不是结束，只是开始</title><link href="http://localhost:4000/blog/just-begin-not-leave/" rel="alternate" type="text/html" title="不是结束，只是开始" /><published>2018-09-14T00:00:00+08:00</published><updated>2018-09-14T00:00:00+08:00</updated><id>http://localhost:4000/blog/just-begin-not-leave</id><content type="html" xml:base="http://localhost:4000/blog/just-begin-not-leave/">&lt;p&gt;今天自己已经没有上班了，心里却是莫名的失落。没有开心与轻松，自己现在并不累。今天终于发现自己真的很恋旧。在 ZAKER 呆了 912 天，说来也不是很短了。本来以为自己可以继续呆下去，依旧可以做着一边工作一边兼顾自己的项目，在工作中迸发自己的 idea，然后付诸行动。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;正如离开时对领导所说，自己是带着情怀来的，但是很可惜，要带着遗憾离开。&lt;/p&gt;

&lt;p&gt;自己在很早就使用 ZAKER 来看新闻，当时来到广州，经过各种面试考验，如愿来到老东家。慢慢的想着要将它变得更好，或者是说自己能够为它的成长贡献力量。两年多下来，看着它慢慢迭代，和两年前比较，已经不是同一个产品啦，变化还是很大的。&lt;/p&gt;

&lt;p&gt;最开始进来时，就被小组的团队氛围所触动。没错，我们是一个很年轻的团队，大家可以很自然的沟通，可以很放松，可以很时髦，但是我们也很努力。&lt;/p&gt;

&lt;p&gt;两年多来，自己不断被影响，努力前行。从一个开发新手，到一个完全可以自己 hold 住需求的开发人员。自己的成长，也得到了肯定。期间经历团队同事的离开，经历引导人的离开，这些无不是一种心理磨练。特别是当面试自己的领导同事离开时，那种说出不的滋味。虽然明白天下无不散之宴席，但当自己真的面对时，还是需要心理建设的。苟富贵，勿相忘。江湖再见。这几句话我们会在散场的时候诉说的。或许若干年后，我们会真的体会它的深意。&lt;/p&gt;

&lt;p&gt;最后，自己也不知道想要写什么，或许就是想留下一个印记吧。ZAKER 我曾经来过，ZAKER 我曾经为你激情付出。ZAKER 希望你越来越好！&lt;/p&gt;</content><author><name>Chars</name></author><category term="talk" /><category term="碎碎念" /><summary type="html">今天自己已经没有上班了，心里却是莫名的失落。没有开心与轻松，自己现在并不累。今天终于发现自己真的很恋旧。在 ZAKER 呆了 912 天，说来也不是很短了。本来以为自己可以继续呆下去，依旧可以做着一边工作一边兼顾自己的项目，在工作中迸发自己的 idea，然后付诸行动。</summary></entry><entry><title type="html">如何通过浏览器上网</title><link href="http://localhost:4000/blog/how-to-surfing-via-browser/" rel="alternate" type="text/html" title="如何通过浏览器上网" /><published>2018-08-10T00:00:00+08:00</published><updated>2018-08-10T00:00:00+08:00</updated><id>http://localhost:4000/blog/how-to-surfing-via-browser</id><content type="html" xml:base="http://localhost:4000/blog/how-to-surfing-via-browser/">&lt;p&gt;&lt;strong&gt;当我们在网页浏览器（Web browser）的地址栏中输入 URL 时，Web 页面是如何呈现的吗？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Web 页面当然不能凭空显示出来。根据 Web 浏览器地址栏中指定的 URL，Web 浏览器从 Web 服务器端获取文件资源（resource）等信息，从而显示出 Web 页面。像这种通过发送请求获取服务器资源的 Web 浏览器等，都可称为客户端（client）。&lt;/p&gt;

&lt;p&gt;Web 使用一种名为 HTTP（HyperText Transfer Protocol，超文本传输协议）的协议作为规范，完成从客户端到服务器端等一系列运作流程。而协议是指规则的约定，可以说，Web 是建立在 HTTP 协议上通信的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;超文本传输协议（HTTP，HyperText Transfer Protocol) 是互联网上应用最为广泛的一种网络协议。所有的 WWW 文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。1960 年美国人 Ted Nelson 构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext），这成为了 HTTP 超文本传输协议标准架构的发展根基。Ted Nelson 组织协调万维网协会（World Wide Web Consortium）和互联网工程工作小组（Internet Engineering Task Force ）共同合作研究，最终发布了一系列的 RFC，其中著名的 RFC 2616 定义了 HTTP 1.1。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;诞生&quot;&gt;诞生&lt;/h2&gt;

&lt;p&gt;HTTP 的出生时间是 1989 年 3 月，那时候互联网还属于少数人。&lt;/p&gt;

&lt;p&gt;CERN（欧洲核子研究组织）的蒂姆 • 伯纳斯 - 李（Tim BernersLee）博士提出了一种能让远隔两地的研究者们共享知识的设想。&lt;/p&gt;

&lt;p&gt;最初设想的基本理念是：借助多文档之间相互关联形成的超文本（HyperText），连成可相互参阅的 WWW（World Wide Web，万维网）。&lt;/p&gt;

&lt;p&gt;现在已提出了 3 项 WWW 构建技术，分别是：把 SGML（Standard Generalized Markup Language，标准通用标记语言）作为页面的文本标记语言的 HTML（HyperText Markup Language，超文本标记语言）；作为文档传递协议的 HTTP ；指定文档所在地址的 URL（Uniform Resource Locator，统一资源定位符）。&lt;/p&gt;

&lt;p&gt;WWW 这一名称，是 Web 浏览器当年用来浏览超文本的客户端应用程序时的名称。现在则用来表示这一系列的集合，也可简称为 Web。&lt;/p&gt;

&lt;p&gt;1990 年 11 月，CERN 成功研发了世界上第一台 Web 服务器和 Web 浏览器。&lt;/p&gt;

&lt;h2 id=&quot;成长&quot;&gt;成长&lt;/h2&gt;

&lt;h3 id=&quot;http09&quot;&gt;HTTP/0.9&lt;/h3&gt;

&lt;p&gt;HTTP 于 1990 年问世。那时的 HTTP 并没有作为正式的标准被建立。现在的 HTTP 其实含有 HTTP1.0 之前版本的意思，因此被称为 HTTP/0.9。&lt;/p&gt;

&lt;h3 id=&quot;http10&quot;&gt;HTTP/1.0&lt;/h3&gt;

&lt;p&gt;HTTP 正式作为标准被公布是在 1996 年的 5 月，版本被命名为 HTTP/1.0，并记载于 &lt;a href=&quot;http://www.ietf.org/rfc/rfc1945.txt&quot;&gt;RFC1945&lt;/a&gt;。虽说是初期标准，但该协议标准至今仍被广泛使用在服务器端。&lt;/p&gt;

&lt;h3 id=&quot;http11&quot;&gt;HTTP/1.1&lt;/h3&gt;

&lt;p&gt;1997 年 1 月公布的 HTTP/1.1 是目前主流的 HTTP 协议版本。当初的标准是 RFC2068，之后发布的修订版 &lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC2616&lt;/a&gt; 就是当前的最新版本。&lt;/p&gt;

&lt;h2 id=&quot;tcpip-简介&quot;&gt;TCP/IP 简介&lt;/h2&gt;

&lt;p&gt;为了理解 HTTP，我们有必要事先了解一下 TCP/IP 协议族。通常使用的网络（包括互联网）是在 TCP/IP 协议族的基础上运作的。而 HTTP 属于它内部的一个子集。&lt;/p&gt;

&lt;p&gt;计算机与网络设备要相互通信，双方就必须基于相同的方法。比如，如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通信、怎样结束通信等规则都需要事先确定。不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为协议（protocol）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/how-to-surfing-via-browser-TCP-IP-Protocol.png&quot; alt=&quot;TCP/IP 协议族&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;分层管理&quot;&gt;分层管理&lt;/h3&gt;

&lt;p&gt;TCP/IP 协议族里重要的一点就是分层。TCP/IP 协议族按层次分别分为以下 4 层：应用层、传输层、网络层和数据链路层。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分层的好处：&lt;/strong&gt;若某个地方需要改变设计时，不需要把所有部分整体替换掉，只需把变动的层替换掉即可。把各层之间的接口部分规划好之后，每个层次内部的设计就能够自由改动了。&lt;/p&gt;

&lt;h4 id=&quot;应用层&quot;&gt;应用层&lt;/h4&gt;

&lt;p&gt;应用层决定了向用户提供应用服务时通信的活动。&lt;/p&gt;

&lt;p&gt;TCP/IP 协议族内预存了各类通用的应用服务。比如，FTP（File Transfer Protocol，文件传输协议）和 DNS（Domain Name System，域名系统）。HTTP 协议也处于该层。&lt;/p&gt;

&lt;h4 id=&quot;传输层&quot;&gt;传输层&lt;/h4&gt;

&lt;p&gt;传输层为应用层，提供处于网络连接中的两台计算机之间的数据传输。&lt;/p&gt;

&lt;p&gt;在传输层有两个性质不同的协议：TCP（Transmission Control Protocol，传输控制协议）和 UDP（User Data Protocol，用户数据报协议）。&lt;/p&gt;

&lt;p&gt;TCP 提供可靠的字节流服务。所谓的字节流服务（Byte Stream Service）是指，为了方便传输，将大块数据分割成以报文段（segment）为单位的数据包进行管理。而可靠的传输服务是指，能够把数据准确可靠地传给对方。简单来说，TCP 协议为了更容易传送大数据才把数据分割，而且 TCP 协议能够确认数据最终是否送达到对方。而为了准确无误地将数据传输到目标，TCP 采用了三次握手策略。&lt;/p&gt;

&lt;h4 id=&quot;网络层&quot;&gt;网络层&lt;/h4&gt;

&lt;p&gt;网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方。&lt;/p&gt;

&lt;p&gt;与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线。&lt;/p&gt;

&lt;h5 id=&quot;负责传输的-ip-协议&quot;&gt;负责传输的 IP 协议&lt;/h5&gt;

&lt;p&gt;IP（Internet Protocol）网际协议位于网络层。需要注意的是可“IP”和“IP 地址”的区别，“IP”其实是一种协议的名称。&lt;/p&gt;

&lt;p&gt;IP 协议的作用是把各种数据包传送给对方。其中两个重要的条件是 IP 地址和 MAC 地址（Media Access Control Address）。&lt;/p&gt;

&lt;p&gt;IP 地址指明了节点被分配到的地址，MAC 地址是指网卡所属的固定地址。IP 地址可以和 MAC 地址进行配对。IP 地址可变换，但 MAC 地址基本上不会更改。基本上各大网卡制作厂商都被预制分配了 MAC 地址区间段。&lt;/p&gt;

&lt;p&gt;IP 间的通信依赖 MAC 地址。在网络上，通信的双方在同一局域网（LAN）内的情况是很少的，通常是经过多台计算机和网络设备中转才能连接到对方。而在进行中转时，会利用下一站中转设备的 MAC 地址来搜索下一个中转目标。这时，会采用 ARP 协议（Address Resolution Protocol）。ARP 是一种用以解析地址的协议，根据通信方的 IP 地址就可以反查出对应的 MAC 地址。&lt;/p&gt;

&lt;p&gt;在到达通信目标前的中转过程中，那些计算机和路由器等网络设备只能获悉很粗略的传输路线。这种机制称为路由选择（routing）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/how-to-surfing-via-browser-routing.png&quot; alt=&quot;路由选择&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;数据链路层&quot;&gt;数据链路层&lt;/h4&gt;

&lt;p&gt;用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC（Network Interface Card，网络适配器，即网卡），及光纤等物理可见部分（还包括连接器等一切传输媒介）。&lt;/p&gt;

&lt;p&gt;硬件上的范畴均在链路层的作用范围之内。&lt;/p&gt;

&lt;p&gt;在数据链路层还有一个常见的网络协议 LLDP。了解更多可以查看&lt;a href=&quot;/blog/data-link-layer-lldp&quot;&gt;《数据链路层之 LLDP》&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;通信传输流&quot;&gt;通信传输流&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/how-to-surfing-via-browser-stram.png&quot; alt=&quot;TCP/IP 通信传输流&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为了更好的理解上图，我们使用 HTTP 🌰 说明。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/how-to-surfing-via-browser-HTTP-transport.png&quot; alt=&quot;HTTP 通信&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;作为发送端的客户端在应用层（HTTP 协议）发出一个想看某个 Web 页面的 HTTP 请求。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在传输层（TCP 协议）把从应用层处收到的数据（HTTP 请求报文）进行分割，并在各个报文上打上标记序号及端口号后转发给网络层。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在网络层（IP 协议），增加作为通信目的地的 MAC 地址后转发给链路层。这样一来，发往网络的通信请求就准备齐全了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用层。当传输到应用层，才能算真正接收到由客户端发送过来的 HTTP 请求。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息。反之，接收端在层与层传输数据时，每经过一层时会把对应的首部消去。这种把数据信息包装起来的做法称为封装（encapsulate）。&lt;/p&gt;

&lt;h2 id=&quot;dns-简述&quot;&gt;DNS 简述&lt;/h2&gt;

&lt;p&gt;DNS（Domain Name System）服务是和 HTTP 协议一样位于应用层的协议。它提供域名到 IP 地址之间的解析服务。&lt;/p&gt;

&lt;p&gt;计算机既可以被赋予 IP 地址，也可以被赋予主机名和域名。🌰 &lt;a href=&quot;http://www.chars.tech&quot;&gt;www.chars.tech&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;用户通常使用主机名或域名来访问对方的计算机，而不是直接通过 IP 地址访问。因为与 IP 地址的一组纯数字相比，用字母配合数字的表示形式来指定计算机名更符合人类的记忆习惯。&lt;/p&gt;

&lt;p&gt;但要让计算机去理解名称，相对而言就变得困难了。因为计算机更擅长处理一长串数字。为了解决上述的问题，DNS 服务应运而生。DNS 协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/how-to-surfing-via-browser-DNS.jpg&quot; alt=&quot;DNS 服务&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;访问网站&quot;&gt;访问网站&lt;/h2&gt;

&lt;p&gt;至此，大致可以回答开篇的问题了，我们在浏览器输入框中输入想浏览的网页地址之后，发生了哪些事情呢？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/how-to-surfing-via-browser-Step.jpg&quot; alt=&quot;HTTP 浏览网页&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;客户端发起页面网址请求给 DNS。&lt;/li&gt;
  &lt;li&gt;DNS 解析出对应 IP 地址返回给客户端。&lt;/li&gt;
  &lt;li&gt;客户端填充请求 IP 地址。&lt;/li&gt;
  &lt;li&gt;客户端根据 HTTP 交互封装请求数据包。&lt;/li&gt;
  &lt;li&gt;请求数据包经过路由机制到达目的地址。&lt;/li&gt;
  &lt;li&gt;目的地址服务器返回数据给客户端。&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Chars</name></author><category term="web" /><category term="网络" /><summary type="html">当我们在网页浏览器（Web browser）的地址栏中输入 URL 时，Web 页面是如何呈现的吗？</summary></entry><entry><title type="html">云南，一片上天眷顾的土地</title><link href="http://localhost:4000/blog/yunnan-travel-notes/" rel="alternate" type="text/html" title="云南，一片上天眷顾的土地" /><published>2018-08-09T00:00:00+08:00</published><updated>2018-08-09T00:00:00+08:00</updated><id>http://localhost:4000/blog/yunnan-travel-%20notes</id><content type="html" xml:base="http://localhost:4000/blog/yunnan-travel-notes/">&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-12.jpg&quot; alt=&quot;丽江古城&quot; /&gt;&lt;/p&gt;

&lt;p&gt;距离从云南回来已经好些天了。但，脑海中还会时常回忆起那里的景色。或许对于一些人来说，那些也是很通常的环境。旅行，不就是不同环境生活的人，暂时交换体验吗？这次的旅行，发现自己变化很大，从心性上来说，应该成熟些了吧。对于这次的旅行，还是想能够记下来，毕竟对于我来说，是一份很珍贵的记忆。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-1.jpg&quot; alt=&quot;泸沽湖畔蒲公英&quot; /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;云南（不对，应该还包括四川。因为这次出行，已经各种跨省跨境的游玩了）不仅是个景色优美的地方，而且美食也是很重要的角色。相信我辈吃货们很关注那里有什么好吃的吧。这里首先来推荐几款一定要尝尝的美食吧。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-8.jpg&quot; alt=&quot;四川麻辣面&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是当时在扎窝洛码头住民宿时老板做的。看着很辣，一向清淡饮食的我被吓着了，试着吃了一口之后，完全停不下来，不仅不辣，还香气扑鼻。好吃！爽！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-38.jpg&quot; alt=&quot;黄李子&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这种黄李子只能在丽江买到，可能是特色水果吧。最棒的吃法是，使用当地泉水或井水，洗干净吃。不要问为什么，你自己去了尝试一下就明白了。至于是不是叫黄李子，这个就很难说了，一路上问了不少人。感觉没有一个是认真回答这个问题的，都随便叫一个名字。哈哈哈，这个“随便”的用法也是和当地人学的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-15.jpg&quot; alt=&quot;相思草&quot; /&gt;
&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-11.jpg&quot; alt=&quot;水性杨花&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以上这两种菜是在大理洱海畔的双廊一家餐馆吃的，味道嘛，和吃一般蔬菜一样，只不过名字比较有意思。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-22.jpg&quot; alt=&quot;炸昆虫&quot; /&gt;
&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-35.jpg&quot; alt=&quot;棱角&quot; /&gt;
&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-36.jpg&quot; alt=&quot;折洱根&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以上三样都是在大理古城逛吃发现的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-40.jpg&quot; alt=&quot;云南米线&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到了云南，肯定不能不吃云南米线。不过，有点分不清这个和米粉有什么区别啦。&lt;/p&gt;

&lt;p&gt;当然，吃的东西不仅仅如此，只不过这些都是比较有意思的。&lt;/p&gt;

&lt;p&gt;除了吃，当然就是玩啦。&lt;/p&gt;

&lt;p&gt;第一天早上来到丽江，因为太早。从火车站，直接坐18路公交进入市区，18路，记得郴州火车站的公交也是18路。好巧呀。&lt;/p&gt;

&lt;p&gt;车子可以直接到达丽江古城的忠义市场，以前需要的古城维修费，现在也不需要啦。下车之后找个地方吃了碗当地的云南米线，物价也不是很贵。加下来，绕着古城，找到南门，然后进去逛一逛。清晨空气很棒，古城里的公园很多运动的爷爷奶奶。还看到一对夫妻，前一天晚上就在他们的SUV中度过的，居然还带着宠物狗出门。真的很惬意呀！把行李寄存在客栈之后，就直接去丽江古城逛吃咯。&lt;/p&gt;

&lt;p&gt;丽江古城由束河古镇、大研古城、白沙古镇组成。最方便、最热闹的是大研古城，也就是人们常说的丽江古城。这里商业气息比较重，有很多小吃和店铺，人流量也是比较大的。虽然束河古城比较清净，但相应的是交通不怎么方便。因为客栈距离丽江古城东门，所以吃住还是很方便的。古城不是封闭的，你可以从任何你喜欢的地方进入。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-18.jpg&quot; alt=&quot;丽江古城&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是在狮子山附近看到的古城全貌。真的很幸运，前一天这里还在下雨，到的这一天却赶上放晴。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-21.jpg&quot; alt=&quot;丽江古城&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“大水车”不仅是古城的一个景点，它旁边也是古城北门。这附近有去泸沽湖的汽车，也有去其他景点的车。&lt;/p&gt;

&lt;p&gt;之前也去过乌镇，这种旧时建筑，可能风格都差不多，美不美，在于你！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-9.jpg&quot; alt=&quot;丽江古城&quot; /&gt;
&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-34.jpg&quot; alt=&quot;丽江古城&quot; /&gt;
&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-10.jpg&quot; alt=&quot;丽江古城&quot; /&gt;&lt;/p&gt;

&lt;p&gt;走累了，坐在这石桥上吃黄李子，桥木有拍，当然看不见啦。&lt;/p&gt;

&lt;p&gt;逛吃饱了之后，买了两件纳西族的衣服，准备期间穿起来。走出古城，办理好入住。准备出发去“拉市海”。拉市海边的花田和草地，让人眼前一亮，很久不见了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-23.jpg&quot; alt=&quot;拉市海&quot; /&gt;
&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-19.jpg&quot; alt=&quot;拉市海&quot; /&gt;&lt;/p&gt;

&lt;p&gt;租条皮划艇，自己划着。心之所往，片刻即至。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-28.jpg&quot; alt=&quot;拉市海&quot; /&gt;&lt;/p&gt;

&lt;p&gt;划了半天皮划艇，晚上都不想出门啦，在客栈收拾好，准备次日的行程–玉龙雪山。没错，奔着4680去的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-14.jpg&quot; alt=&quot;玉龙雪山&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不能不说是遗憾，这个也不由想起大四时候，和室友去爬华山，想看日出。然后那天大雾！这个玉龙雪山是准备了一天的时间，所以除了登4680，还有蓝月谷可以玩。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-33.jpg&quot; alt=&quot;蓝月谷&quot; /&gt;
&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-2.jpg&quot; alt=&quot;蓝月谷&quot; /&gt;
&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-39.jpg&quot; alt=&quot;蓝月谷&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下午5:30准时下山返程，回到客栈。次日，就要去泸沽湖啦。&lt;/p&gt;

&lt;p&gt;泸沽湖三分之一在云南 ，三分之二在四川，由湖泊和万亩草海组成。云南、 四川两省都可以进入。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-17.jpg&quot; alt=&quot;泸沽湖&quot; /&gt;&lt;/p&gt;

&lt;p&gt;先来一个全景，不错，这个就是一个未被污染的天然水域。迎面出来凉凉的风，好久没有这样的感觉啦。&lt;/p&gt;

&lt;p&gt;在泸沽湖，是住在四川境内的扎窝洛码头【老知青之家】民宿，这里是摩梭族人聚居区。在这里，体验当地人生活。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-37.jpg&quot; alt=&quot;草海&quot; /&gt;&lt;/p&gt;

&lt;p&gt;来看看漂亮的民宿。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-20.jpg&quot; alt=&quot;草海&quot; /&gt;
&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-5.jpg&quot; alt=&quot;草海&quot; /&gt;&lt;/p&gt;

&lt;p&gt;老板有两个和我一般年纪的儿子，下午刚好跟着一起去了【摩梭博物馆】&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-32.jpg&quot; alt=&quot;草海&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个是“莫言”题字的哟！不清楚是在获奖前还是后啦。&lt;/p&gt;

&lt;p&gt;晚上还去看了当地的篝火晚会！&lt;/p&gt;

&lt;p&gt;次日，和两个小老板一起环湖游啦，因为景区现在已经禁止骑行啦，少了一大乐趣！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-13.jpg&quot; alt=&quot;泸沽湖&quot; /&gt;
&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-31.jpg&quot; alt=&quot;泸沽湖&quot; /&gt;
&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-6.jpg&quot; alt=&quot;泸沽湖&quot; /&gt;
&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-16.jpg&quot; alt=&quot;泸沽湖&quot; /&gt;
&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-7.jpg&quot; alt=&quot;泸沽湖&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看见水面上的水性杨花了吗？那个就是可以吃的！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-27.jpg&quot; alt=&quot;草海&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这两天在泸沽湖呆得都不想离开啦。&lt;/p&gt;

&lt;p&gt;次日，来到大理古城。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-3.jpg&quot; alt=&quot;大理古城&quot; /&gt;
&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-24.jpg&quot; alt=&quot;大理古城&quot; /&gt;
&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-26.jpg&quot; alt=&quot;大理古城&quot; /&gt;&lt;/p&gt;

&lt;p&gt;晚上逛吃，休息好。因为～&lt;/p&gt;

&lt;p&gt;次日清晨起来，在古城里逛悠个早餐，租了个小电驴，开启洱海环行！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-4.jpg&quot; alt=&quot;崇圣寺三塔&quot; /&gt;&lt;/p&gt;

&lt;p&gt;先来到崇圣寺三塔，不错，就是那个明信片经常出现的地方！&lt;/p&gt;

&lt;p&gt;中午到双廊吃午餐，继续一路向前，出发。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-29.jpg&quot; alt=&quot;大理洱海&quot; /&gt;
&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-25.jpg&quot; alt=&quot;大理洱海&quot; /&gt;
&lt;img src=&quot;/assets/images/life/yunnan-travel-notes/yunnan-travel-notes-30.jpg&quot; alt=&quot;大理洱海&quot; /&gt;&lt;/p&gt;

&lt;p&gt;晚上回到客栈，都不敢想象，今天环洱海有150公里。到了这个时候，旅行进度条也要撑不住啦。不久就要返程啦。&lt;/p&gt;

&lt;p&gt;最后一天还是在大理，不过没有具体目标，早上多睡了一会，然后出门觅食。最后在洱海公园好好逛了逛。&lt;/p&gt;

&lt;p&gt;这次旅行，真的很放松。这期间，可以不管手机上的信息，不用理会各种事物。在那里，都是使用现金，离开网络，离开忙碌的世界。&lt;/p&gt;

&lt;p&gt;社会在快速发展，人到底是变得更幸福快乐了吗？&lt;/p&gt;

&lt;p&gt;回来之后，又要开启自己的学习节奏，既然走了这条路，就要坚持下去。现在已经开设了知乎专栏&lt;a href=&quot;https://zhuanlan.zhihu.com/easy-to-understand-algorithm&quot;&gt;《通俗易懂的算法》&lt;/a&gt;、&lt;a href=&quot;https://zhuanlan.zhihu.com/health-go&quot;&gt;《如何独立开发一个完整应用》&lt;/a&gt;，有兴趣的童鞋欢迎关注和推荐给他人。&lt;/p&gt;</content><author><name>Chars</name></author><category term="talk" /><category term="碎碎念" /><summary type="html"></summary></entry><entry><title type="html">什么是大 O 表示法</title><link href="http://localhost:4000/blog/big-o-notation/" rel="alternate" type="text/html" title="什么是大 O 表示法" /><published>2018-08-05T00:00:00+08:00</published><updated>2018-08-05T00:00:00+08:00</updated><id>http://localhost:4000/blog/big-o-notation</id><content type="html" xml:base="http://localhost:4000/blog/big-o-notation/">&lt;p&gt;“大O表示法”是一种特殊的表示法，指出了算法的速度有多快。但是它却不是指具体的时间，那么该如何正确理解它呢？&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;算法的运行时间以不同的速度增加&quot;&gt;算法的运行时间以不同的速度增加&lt;/h2&gt;

&lt;p&gt;“算法的运行时间以不同的速度增加”这句话应该如何理解呢？下面我们通过🌰来看看这句话到底想表达什么。&lt;/p&gt;

&lt;p&gt;小明现在需要编写一个查找算法，这个算法服务于学校图书馆，目的是帮助童鞋们能够快速的找到自己需要的书籍所在位置。&lt;/p&gt;

&lt;p&gt;假设小明现在只会“二分查找”和“简单查找”。一方面，二分查找的速度很快，小明必须在 10 秒钟内找到书籍所在位置，否则童鞋们没有更多耐心等待。另一方面，简单查找算法编写起来更容易，因此出现 bug 的可能性更小。&lt;/p&gt;

&lt;p&gt;为了检验这两种算法的耗时，小明决定计算两种算法在列表包含 100 个元素的情况下需要的时间。&lt;/p&gt;

&lt;p&gt;假设检查一个元素需要 1 毫秒。使用简单查找时，小明必须检查 100 个元素，因此需要 100 毫秒才能查找完毕。而使用二分查找时，只需检查 7 个元素（log2 100大约为7），因此需要 7 毫秒就能查找完毕。然而，实际要查找的列表可能包含 10 亿个元素，在这种情况下，简单查找需要多长时间呢？二分查找又需要多长时间呢？&lt;/p&gt;

&lt;p&gt;小明使用包含 10 亿个元素的列表运行二分查找，运行时间为 30 毫秒（log2 1 000 000 000大约为30）。他心里想，二分查找的速度大约为简单查找的 15 倍，因为列表包含 100 个元素时，简单查找需要 100 毫秒，而二分查找需要 7 毫秒。因此，列表包含 10 亿个元素时，简单查找需要 30 × 15 = 450 毫秒，完全符合在 10 秒内查找完毕的要求。小明决定使用简单查找。这是正确的选择吗？&lt;/p&gt;

&lt;p&gt;不是。实际上，小明错了，而且错得离谱。列表包含 10 亿个元素时，简单查找需要 10 亿毫秒，相当于 11 天！为什么会这样呢？因为二分查找和简单查找的运行时间的增速不同。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;简单查找&lt;/th&gt;
      &lt;th&gt;二分查找&lt;/th&gt;
      &lt;th&gt;元素个数&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;100 毫秒&lt;/td&gt;
      &lt;td&gt;7 毫秒&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10 秒&lt;/td&gt;
      &lt;td&gt;14 毫秒&lt;/td&gt;
      &lt;td&gt;10 000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11 天&lt;/td&gt;
      &lt;td&gt;30 毫秒&lt;/td&gt;
      &lt;td&gt;1 000 000 000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;随着元素数量的增加，二分查找需要的额外时间并不多，而简单查找需要的额外时间却很多。因此，随着列表的增长，二分查找的速度比简单查找快得多。小明以为二分查找速度为简单查找的 15 倍，这不对：列表包含 10 亿个元素时，为 3300 万倍。有鉴于此，仅知道算法需要多长时间才能运行完毕还不够，还需知道运行时间如何随列表增长而增加。这正是大O表示法的用武之地。&lt;/p&gt;

&lt;p&gt;大O表示法指出了算法有多快。例如，假设列表包含 n 个元素。简单查找需要检查每个元素，因此需要执行 n 次操作。使用大O表示法，这个运行时间为 O(n)。单位秒呢？没有！大O表示法指的并非以秒为单位的速度。大O表示法让你能够比较操作数，它指出了算法运行时间的增速。&lt;/p&gt;

&lt;h2 id=&quot;最糟糕情况下的运行时间&quot;&gt;最糟糕情况下的运行时间&lt;/h2&gt;

&lt;p&gt;假设你使用简单查找在电话簿中找人。你知道，简单查找的运行时间为 O(n)，这意味着在最糟情况下，必须查看电话簿中的每个条目。如果要查找的是 Chars ——电话簿中的第一个人，一次就能找到，无需查看每个条目。考虑到一次就找到了 Chars，请问这种算法的运行时间是 O(n)还是 O(1) 呢？&lt;/p&gt;

&lt;p&gt;简单查找的运行时间总是为 O(n)。查找 Chars 时，一次就找到了，这是最佳的情形，但大O表示法说的是最糟的情形。因此，你可以说，在最糟情况下，必须查看电话簿中的每个条目，对应的运行时间为 O(n)。这是一个保证——你知道简单查找的运行时间不可能超过 O(n)。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;说明&lt;/p&gt;

  &lt;p&gt;除最糟情况下的运行时间外，还应考虑平均情况的运行时间，这很重要。最糟情况和平均情况将在第4章讨论。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;一些常见的大o运行时间&quot;&gt;一些常见的大O运行时间&lt;/h2&gt;

&lt;p&gt;下面按从快到慢的顺序列出了你经常会遇到的5种大O运行时间。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;O (log n )，也叫对数时间 ，这样的算法包括二分查找。&lt;/li&gt;
  &lt;li&gt;O (n )，也叫线性时间 ，这样的算法包括简单查找。&lt;/li&gt;
  &lt;li&gt;O (n * log n )，这样的算法包括快速排序——一种速度较快的排序算法。&lt;/li&gt;
  &lt;li&gt;O (n 2 )，这样的算法包括选择排序——一种速度较慢的排序算法。&lt;/li&gt;
  &lt;li&gt;O (n !)，这样的算法包括旅行商问题的解决方案——一种非常慢的算法。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;1、算法的速度指的并非时间，而是操作数的增速。&lt;/p&gt;

&lt;p&gt;2、谈论算法的速度时，说的是随着输入的增加，其运行时间将以什么样的速度增加。&lt;/p&gt;

&lt;p&gt;3、算法的运行时间用大O表示法表示。&lt;/p&gt;

&lt;p&gt;4、O(log n) 比 O(n)快，当需要搜索的元素越多时，前者比后者快得越多。&lt;/p&gt;

&lt;h2 id=&quot;写在最后&quot;&gt;写在最后&lt;/h2&gt;

&lt;p&gt;对算法有兴趣的童鞋可以关注专栏&lt;a href=&quot;https://zhuanlan.zhihu.com/easy-to-understand-algorithm&quot;&gt;《通俗易懂的算法》&lt;/a&gt;，也欢迎大家多多投稿分享。&lt;/p&gt;

&lt;p&gt;同时欢迎大家加入算法交流Q群交流讨论，Q群号：855454453&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Q855454453.jpg&quot; alt=&quot;Q855454453&quot; /&gt;&lt;/p&gt;</content><author><name>Chars</name></author><category term="algorithm" /><category term="概念" /><summary type="html">“大O表示法”是一种特殊的表示法，指出了算法的速度有多快。但是它却不是指具体的时间，那么该如何正确理解它呢？</summary></entry><entry><title type="html">实现一个 RESTful API 服务器</title><link href="http://localhost:4000/blog/restful-api-go/" rel="alternate" type="text/html" title="实现一个 RESTful API 服务器" /><published>2018-07-31T00:00:00+08:00</published><updated>2018-07-31T00:00:00+08:00</updated><id>http://localhost:4000/blog/restful-api-go</id><content type="html" xml:base="http://localhost:4000/blog/restful-api-go/">&lt;p&gt;RESTful 是目前最为流行的一种互联网软件结构。因为它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;什么是-rest&quot;&gt;什么是 REST&lt;/h2&gt;

&lt;p&gt;REST（REpresentational State Transfer），首次出现在 2000 年 Roy Thomas Fielding 的博士论文中，它指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful 的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;资源（Resources），REST 是“表现层状态转化”，其实它省略了主语。“表现层”其实指的是“资源”的“表现层”。那么什么是资源呢？我们平时网上访问到图片、文字、文档、多媒体等就是资源，一般通过 URI 来定位。也就是说，一个 URI 就表示一个资源。&lt;/li&gt;
  &lt;li&gt;表现层（Representation），资源是作为一个具体的实体信息，它可以有多种的展现方式。而把实体展现出来就是表现层。例如一个 txt 文本信息，它可以输出成 html、json 等。&lt;/li&gt;
  &lt;li&gt;状态转化（State Transfer），访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，就涉及到数据和状态的变化。而 HTTP 协议是无状态的，那么这些状态肯定保存在服务器端，所以如果客户端想要通知服务器端改变数据和状态的变化，就要通过某种方式来通知它。客户端能通知服务器端的手段，只能是 HTTP 协议。具体来说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源（也可以用于更新资源），PUT 用来更新资源，DELETE 用来删除资源。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;综上所述，我们总结一下什么是 RESTful 架构：&lt;/p&gt;

&lt;p&gt;1、每一个 URI 代表一种资源&lt;/p&gt;

&lt;p&gt;2、客户端和服务端之间，传递这种资源的某种表现层&lt;/p&gt;

&lt;p&gt;3、客户端通过四个 HTTP 动词，对服务端资源进行操作，实现“表现层状态转化”&lt;/p&gt;

&lt;p&gt;将它们概述为图片形式，则 REST 架构图为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/restful-api-go-REST-struct.png&quot; alt=&quot;REST架构图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;REST 的扩展性：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/restful-api-go-REST-extern.png&quot; alt=&quot;REST 的扩展性&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;什么是-rpc&quot;&gt;什么是 RPC&lt;/h2&gt;

&lt;p&gt;RPC（Remote Procedure Call Protocol）远程过程调用协议，是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。它假定某些传输协议的存在，如 TCP 或 UDP，以便为通信程序之间携带信息数据。通过它可以使函数调用模式网络化。在 OSI 网络通信模型中，RPC 跨越了传输层和应用层。RPC 使得开发包括网络分布式多程序在内的应用程序更加容易。&lt;/p&gt;

&lt;h3 id=&quot;工作原理&quot;&gt;工作原理&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tech/restful-api-go-RPC-flow.png&quot; alt=&quot;RPC工作流程图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;运行时，一次客户端对服务器的 RPC 调用，其内部操作大致有如下步骤：&lt;/p&gt;

&lt;p&gt;1、调用客户端句柄；执行传送参数&lt;/p&gt;

&lt;p&gt;2、调用本地系统内核发送网络消息&lt;/p&gt;

&lt;p&gt;3、消息传送到服务端&lt;/p&gt;

&lt;p&gt;4、服务器句柄得到消息并取得参数&lt;/p&gt;

&lt;p&gt;5、执行远程过程&lt;/p&gt;

&lt;p&gt;6、执行的过程将结果返回服务器句柄&lt;/p&gt;

&lt;p&gt;7、服务器句柄返回结果，调用远程系统内核&lt;/p&gt;

&lt;p&gt;8、消息传回本地主机&lt;/p&gt;

&lt;p&gt;9、客户端句柄由内核接收消息&lt;/p&gt;

&lt;p&gt;10、客户端接收句柄返回的数据&lt;/p&gt;

&lt;h2 id=&quot;rest-vs-rpc&quot;&gt;REST vs RPC&lt;/h2&gt;

&lt;p&gt;在做 API 服务器开发时，很多人都会遇到这个问题 —— 选择 REST 还是 RPC。RPC 相比 REST 的优点主要有 3 点：&lt;/p&gt;

&lt;p&gt;1、RPC+Protobuf 采用的是 TCP 做传输协议，REST 直接使用 HTTP 做应用层协议，这种区别导致 REST 在调用性能上会比 RPC+Protobuf 低&lt;/p&gt;

&lt;p&gt;2、RPC 不像 REST 那样，每一个操作都要抽象成对资源的增删改查，在实际开发中，有很多操作很难抽象成资源，比如登录操作。所以在实际开发中并不能严格按照 REST 规范来写 API，RPC 就不存在这个问题&lt;/p&gt;

&lt;p&gt;3、RPC 屏蔽网络细节、易用，和本地调用类似&lt;/p&gt;

&lt;p&gt;但是 REST 相较 RPC 也有很多优势：&lt;/p&gt;

&lt;p&gt;1、轻量级，简单易用，维护性和扩展性都比较好&lt;/p&gt;

&lt;p&gt;2、REST 相对更规范，更标准，更通用，无论哪种语言都支持 HTTP 协议，可以对接外部很多系统，只要满足 HTTP 调用即可，更适合对外，RPC 会有语言限制，不同语言的 RPC 调用起来很麻烦&lt;/p&gt;

&lt;p&gt;3、JSON 格式可读性更强，开发调试都很方便&lt;/p&gt;

&lt;p&gt;4、在开发过程中，如果严格按照 REST 规范来写 API，API 看起来更清晰，更容易被大家理解&lt;/p&gt;

&lt;p&gt;其实业界普遍采用的做法是，内部系统之间调用用 RPC，对外用 REST，因为内部系统之间可能调用很频繁，需要 RPC 的高性能支撑。对外用 REST 更易理解，更通用些。&lt;/p&gt;

&lt;h2 id=&quot;一个基本的-web-server&quot;&gt;一个基本的 Web Server&lt;/h2&gt;

&lt;p&gt;一个 RESTful 服务本质上首先是一个 Web service。下面是一个最简单的 Web server，对于任何请求都简单的直接返回请求链接：&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandleFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, %q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EscapeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:8080&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;编译运行之后，使用 curl 测试，结果如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl -v -XGET -H &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt; http://127.0.0.1:8080/user

Hello, &lt;span class=&quot;s2&quot;&gt;&quot;/user&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;路由功能&quot;&gt;路由功能&lt;/h2&gt;

&lt;p&gt;很显然，我们的线上项目不可能使用这么简单的 API 服务器。当用户增加，请求也会不断上涨，该如何处理好这些请求？作者使用了一个开源路由框架 &lt;a href=&quot;https://github.com/gorilla/mux&quot;&gt;mux&lt;/a&gt;。这是一个小巧高效，且使用较广的第三方框架。接下来的篇幅里，作者会使用 mux 搭建一个 API 服务器框架。&lt;/p&gt;

&lt;h3 id=&quot;安装-mux&quot;&gt;安装 mux&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$go&lt;/span&gt; get github.com/gorilla/mux
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;router&quot;&gt;Router&lt;/h3&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;//Router.go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;github.com/gorilla/mux&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandlerFunc&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandlerFunc&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Routes&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StrictSlash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandlerFunc&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandlerFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServeHTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DeleteItem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DELETE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/v1/delete&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1_deleteItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;handler&quot;&gt;Handler&lt;/h3&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;//Handler.go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1_deleteItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/json; charset=UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusOK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewEncoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusOK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;操作成功&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;整体 mux 功能实现：&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;//main.go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;service running(PID:%d)...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:8080&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;API 基本框架已经实现，接下来就是将相应功能实现模块与相应接口对接即可。&lt;/p&gt;

&lt;h2 id=&quot;写在最后&quot;&gt;写在最后&lt;/h2&gt;

&lt;p&gt;对于想要学习作为一个客户端开发者如何独立完成一个具有 API 服务器功能的线上 APP，可以参考专栏&lt;a href=&quot;https://zhuanlan.zhihu.com/health-go&quot;&gt;《如何独立开发一个完整应用》&lt;/a&gt;，专栏中使用线上 APP &lt;a href=&quot;https://itunes.apple.com/cn/app/id1177823334&quot;&gt;靓手艺&lt;/a&gt; 作为案例，详细分享了笔者如何实现 APP 全部功能。&lt;/p&gt;</content><author><name>Chars</name></author><category term="web" /><category term="go" /><summary type="html">RESTful 是目前最为流行的一种互联网软件结构。因为它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。</summary></entry><entry><title type="html">CocoaPods 提交代码踩坑</title><link href="http://localhost:4000/blog/cocoapods-source-commit/" rel="alternate" type="text/html" title="CocoaPods 提交代码踩坑" /><published>2018-07-16T00:00:00+08:00</published><updated>2018-07-16T00:00:00+08:00</updated><id>http://localhost:4000/blog/cocoapods-source-commit</id><content type="html" xml:base="http://localhost:4000/blog/cocoapods-source-commit/">&lt;p&gt;如何提交代码至 CocoaPods？这个问题在 Google 一搜索可以有很多文章出来，不过，其中遇到的坑却无人提及。笔者现在将实际操作工程记录如下，并总结踩坑注意事项：操作顺序、文件配置、命令使用。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;准备工作&quot;&gt;准备工作&lt;/h2&gt;

&lt;h3 id=&quot;提交代码&quot;&gt;提交代码&lt;/h3&gt;

&lt;p&gt;将需要提交至 CocoaPods 的代码提交至代码托管服务器，例如：GitHub。&lt;/p&gt;

&lt;p&gt;这里需要注意的是，提交的代码需要包含 &lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt; 标签。其实就是 git 里面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;git tag&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;安装或更新-cocoapods&quot;&gt;安装或更新 CocoaPods&lt;/h3&gt;

&lt;h4 id=&quot;安装&quot;&gt;安装&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;更新&quot;&gt;更新&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;pod update
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;注册-trunk&quot;&gt;注册 Trunk&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;pod trunk register e_mail_address &lt;span class=&quot;s1&quot;&gt;'your_name'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;记得去注册邮箱激活&lt;/p&gt;

&lt;h4 id=&quot;查看注册信息&quot;&gt;查看注册信息&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;pod trunk me

  - Name:     charsdavy
  - Email:    chars.davy@gmail.com
  - Since:    July 15th, 21:38
  - Pods:
    - JCCNavigationController
  - Sessions:
    - July 15th, 21:38 - November 21st, 01:45. IP: xx.xx.xx.xx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;创建-podspec-文件&quot;&gt;创建 .podspec 文件&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.podspec&lt;/code&gt; 文件的作用是为了让 CocoaPods 搜索引擎知道该代码的作者、版本号、概要、描述、源代码地址、部署版本、依赖的框架等描述信息。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.podspec&lt;/code&gt;文件可以自动生成：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;pod spec create JCCNavigationController // 生成 JCCNavigationController.podspec 文件
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JCCNavigationController.podspec&lt;/code&gt; 文件内容：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#
#  Be sure to run `pod spec lint JCCNavigationController.podspec' to ensure this is a
#  valid spec and to remove all comments including this before submitting the spec.
#
#  To learn more about Podspec attributes see http://docs.cocoapods.org/specification.html
#  To see working Podspecs in the CocoaPods repo see https://github.com/CocoaPods/Specs/
#

Pod::Spec.new do |s|

  # ―――  Spec Metadata  ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #
  #
  #  These will help people to find your library, and whilst it
  #  can feel like a chore to fill in it's definitely to your advantage. The
  #  summary should be tweet-length, and the description more in depth.
  #

  s.name         = &quot;JCCNavigationController&quot;
  s.version      = &quot;1.0&quot;
  s.summary      = &quot;A navigation bar integrated transition animation effect.&quot;

  # This description is used to generate tags and improve search results.
  #   * Think: What does it do? Why did you write it? What is the focus?
  #   * Try to keep it short, snappy and to the point.
  #   * Write the description between the DESC delimiters below.
  #   * Finally, don't worry about the indent, CocoaPods strips it!
  s.description  = &amp;lt;&amp;lt;-DESC
                  With zoom interactive animation, A navigation bar integrated transition animation effect.
                  DESC

  s.homepage     = &quot;https://github.com/charsdavy/JCCNavigationController&quot;
  s.screenshots  = &quot;https://raw.githubusercontent.com/charsdavy/JCCNavigationController/master/Screenshot.gif&quot;
  # s.screenshots  = &quot;www.example.com/screenshots_1.gif&quot;, &quot;www.example.com/screenshots_2.gif&quot;


  # ―――  Spec License  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #
  #
  #  Licensing your code is important. See http://choosealicense.com for more info.
  #  CocoaPods will detect a license file if there is a named LICENSE*
  #  Popular ones are 'MIT', 'BSD' and 'Apache License, Version 2.0'.
  #

  s.license      = { :type =&amp;gt; &quot;MIT&quot;, :file =&amp;gt; &quot;LICENSE&quot; }
  # s.license      = { :type =&amp;gt; &quot;MIT&quot;, :file =&amp;gt; &quot;FILE_LICENSE&quot; }


  # ――― Author Metadata  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #
  #
  #  Specify the authors of the library, with email addresses. Email addresses
  #  of the authors are extracted from the SCM log. E.g. $ git log. CocoaPods also
  #  accepts just a name if you'd rather not provide an email address.
  #
  #  Specify a social_media_url where others can refer to, for example a twitter
  #  profile URL.
  #

  s.author             = { &quot;charsdavy&quot; =&amp;gt; &quot;charsdavy@gamil.com&quot; }
  s.social_media_url   = &quot;https://twitter.com/charsdavy&quot;

  s.swift_version = &quot;4.0&quot;
  # ――― Platform Specifics ――――――――――――――――――――――――――――――――――――――――――――――――――――――― #
  #
  #  If this Pod runs only on iOS or OS X, then specify the platform and
  #  the deployment target. You can optionally include the target after the platform.
  #

  s.platform     = :ios
  s.platform     = :ios, &quot;8.0&quot;

  #  When using multiple platforms
  s.ios.deployment_target = &quot;8.0&quot;
  # s.osx.deployment_target = &quot;10.7&quot;
  # s.watchos.deployment_target = &quot;2.0&quot;
  # s.tvos.deployment_target = &quot;9.0&quot;


  # ――― Source Location ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #
  #
  #  Specify the location from where the source should be retrieved.
  #  Supports git, hg, bzr, svn and HTTP.
  #

  s.source       = { :git =&amp;gt; &quot;https://github.com/charsdavy/JCCNavigationController.git&quot;, :tag =&amp;gt; &quot;#{s.version}&quot; }


  # ――― Source Code ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #
  #
  #  CocoaPods is smart about how it includes source code. For source files
  #  giving a folder will include any swift, h, m, mm, c &amp;amp; cpp files.
  #  For header files it will include any header in the folder.
  #  Not including the public_header_files will make all headers public.
  #

  s.source_files  = &quot;JCCNavigationController/*.swift&quot;
  # s.exclude_files = &quot;Classes/Exclude&quot;

  # s.public_header_files = &quot;Classes/**/*.h&quot;


  # ――― Resources ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #
  #
  #  A list of resources included with the Pod. These are copied into the
  #  target bundle with a build phase script. Anything else will be cleaned.
  #  You can preserve files from being cleaned, please don't preserve
  #  non-essential files like tests, examples and documentation.
  #

  # s.resource  = &quot;icon.png&quot;
  # s.resources = &quot;Resources/*.png&quot;

  # s.preserve_paths = &quot;FilesToSave&quot;, &quot;MoreFilesToSave&quot;


  # ――― Project Linking ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #
  #
  #  Link your library with frameworks, or libraries. Libraries do not include
  #  the lib prefix of their name.
  #

  # s.framework  = &quot;SomeFramework&quot;
  # s.frameworks = &quot;SomeFramework&quot;, &quot;AnotherFramework&quot;

  # s.library   = &quot;iconv&quot;
  # s.libraries = &quot;iconv&quot;, &quot;xml2&quot;


  # ――― Project Settings ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #
  #
  #  If your library depends on compiler flags you can set them in the xcconfig hash
  #  where they will only apply to your library. If you depend on other Podspecs
  #  you can include multiple dependencies to ensure it works.

  # s.requires_arc = true

  # s.xcconfig = { &quot;HEADER_SEARCH_PATHS&quot; =&amp;gt; &quot;$(SDKROOT)/usr/include/libxml2&quot; }
  # s.dependency &quot;JSONKit&quot;, &quot;~&amp;gt; 1.4&quot;

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以上文件，需要注意 &lt;code class=&quot;highlighter-rouge&quot;&gt;s.platform&lt;/code&gt; 这个字段，文本中的注释说的很明白，默认是全平台都支持的，如果只支持某一个平台，则需要细心配置完善。&lt;/p&gt;

&lt;h2 id=&quot;验证-podspec-文件是否合法&quot;&gt;验证 &lt;code class=&quot;highlighter-rouge&quot;&gt;.podspec&lt;/code&gt; 文件是否合法&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;pod spec lint JCCNavigationController.podspec
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果配置文件仍存在错误，则根据错误提示修复错误。&lt;/p&gt;

&lt;p&gt;如果只有以下一个错误，则只需提交代码即可：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR | unknown: Encountered an unknown error &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;uninitialized constant REST::DisconnectedError&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; during validation.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;提交-podspec-文件&quot;&gt;提交 &lt;code class=&quot;highlighter-rouge&quot;&gt;.podspec&lt;/code&gt; 文件&lt;/h2&gt;

&lt;p&gt;将 &lt;code class=&quot;highlighter-rouge&quot;&gt;.podspec&lt;/code&gt; 文件提交至代码托管服务器，例如，将 &lt;code class=&quot;highlighter-rouge&quot;&gt;JCCNavigationController.podspec&lt;/code&gt; 文件提交至 &lt;code class=&quot;highlighter-rouge&quot;&gt;JCCNavigationController&lt;/code&gt; 项目。&lt;/p&gt;

&lt;h2 id=&quot;提交代码至-cocoapods&quot;&gt;提交代码至 CocoaPods&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;pod trunk push JCCNavigationController.podspec --allow-warnings
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;返回以下信息则为成功：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--------------------------------------------------------------------------------
 🎉  Congrats

 🚀  JCCNavigationController &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; successfully published
 📅  July 16th, 00:58
 🌎  https://cocoapods.org/pods/JCCNavigationController
 👍  Tell your friends!
--------------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;附录&quot;&gt;附录&lt;/h2&gt;

&lt;h3 id=&quot;jccnavigationcontroller&quot;&gt;&lt;a href=&quot;https://github.com/charsdavy/JCCNavigationController&quot;&gt;JCCNavigationController&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/charsdavy/JCCNavigationController&quot;&gt;JCCNavigationController&lt;/a&gt;，一种导航栏一体化转场动画效果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/charsdavy/JCCNavigationController/master/Screenshot.gif&quot; alt=&quot;JCCNavigationController&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ddcornerradius&quot;&gt;&lt;a href=&quot;https://github.com/charsdavy/JCCNavigationController&quot;&gt;DDCornerRadius&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/charsdavy/DDCornerRadius&quot;&gt;DDCornerRadius&lt;/a&gt;，优化圆角实现方案，避免离屏渲染。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/charsdavy/DDCornerRadius/master/Screenshot.gif&quot; alt=&quot;DDCornerRadius&quot; /&gt;&lt;/p&gt;</content><author><name>Chars</name></author><category term="pieces" /><category term="cocoapods" /><category term="开源" /><summary type="html">如何提交代码至 CocoaPods？这个问题在 Google 一搜索可以有很多文章出来，不过，其中遇到的坑却无人提及。笔者现在将实际操作工程记录如下，并总结踩坑注意事项：操作顺序、文件配置、命令使用。</summary></entry><entry><title type="html">Tensorflow – 基准</title><link href="http://localhost:4000/blog/tensorflow-performance-benchmarks/" rel="alternate" type="text/html" title="Tensorflow -- 基准" /><published>2018-02-05T00:00:00+08:00</published><updated>2018-02-05T00:00:00+08:00</updated><id>http://localhost:4000/blog/tensorflow-performance-benchmarks</id><content type="html" xml:base="http://localhost:4000/blog/tensorflow-performance-benchmarks/">&lt;p&gt;TensorFlow 社区创建了一系列用于多平台测试的图像分类模型参考点。在 &lt;a href=&quot;#methodology&quot;&gt;方法&lt;/a&gt; 章节中会详细说明如何执行测试，并给出使用的脚本链接。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;图像分类模型的结果&quot;&gt;图像分类模型的结果&lt;/h2&gt;

&lt;p&gt;InceptionV3 (&lt;a href=&quot;https://arxiv.org/abs/1512.00567&quot;&gt;arXiv:1512.00567&lt;/a&gt;), ResNet-50
(&lt;a href=&quot;https://arxiv.org/abs/1512.03385&quot;&gt;arXiv:1512.03385&lt;/a&gt;), ResNet-152
(&lt;a href=&quot;https://arxiv.org/abs/1512.03385&quot;&gt;arXiv:1512.03385&lt;/a&gt;), VGG16
(&lt;a href=&quot;https://arxiv.org/abs/1409.1556&quot;&gt;arXiv:1409.1556&lt;/a&gt;), 和
&lt;a href=&quot;http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf&quot;&gt;AlexNet&lt;/a&gt; 使用 &lt;a href=&quot;http://www.image-net.org/&quot;&gt;ImageNet&lt;/a&gt; 数据集测试。这些测试运行在 Google 计算云引擎，亚马逊计算云 (Amazon EC2) 和 NVIDIA® DGX-1™ 。大部分测试使用合成和真实的数据。&lt;/p&gt;

&lt;p&gt;对合成数据的测试是通过使用一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;tf.Variable&lt;/code&gt; 设置相同的 shape，除了每个 ImageNet 模型。我们认为，当评估一个平台的基准时包含真实数据是很重要的。底层硬件和框架的加载测试是为了训练实际数据。我们开始合成数据用来移除磁盘 I/O 作为一个变量，并设置一个基准。然后使用真实的数据来验证 TensorFlow 的输入和底层磁盘 I/O 的计算单元。&lt;/p&gt;

&lt;h3 id=&quot;使用-nvidia-dgx-1-nvidia-tesla-p100-训练&quot;&gt;使用 NVIDIA® DGX-1™ (NVIDIA® Tesla® P100) 训练&lt;/h3&gt;

&lt;div style=&quot;width:95%; margin:auto; margin-bottom:10px; margin-top:20px;&quot;&gt;
  &lt;img style=&quot;width:80%&quot; src=&quot;https://www.tensorflow.org/images/perf_summary_p100_single_server.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;细节和附加结果在 &lt;a href=&quot;#details_for_nvidia_dgx-1tm_nvidia_tesla_p100&quot;&gt;NVIDIA® DGX-1™ (NVIDIA®
Tesla® P100) 的细节&lt;/a&gt; 章节中。&lt;/p&gt;

&lt;h3 id=&quot;使用-nvidia-tesla-k80-训练&quot;&gt;使用 NVIDIA® Tesla® K80 训练&lt;/h3&gt;

&lt;div style=&quot;width:95%; margin:auto; margin-bottom:10px; margin-top:20px;&quot;&gt;
  &lt;img style=&quot;width:80%&quot; src=&quot;https://www.tensorflow.org/images/perf_summary_k80_single_server.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;细节和附加结果在 &lt;a href=&quot;#details_for_google_compute_engine_nvidia_tesla_k80&quot;&gt;Google 计算引擎
(NVIDIA® Tesla® K80) 的细节&lt;/a&gt; 和
&lt;a href=&quot;#details_for_amazon_ec2_nvidia_tesla_k80&quot;&gt;Amazon EC2 (NVIDIA® Tesla®
K80) 的细节&lt;/a&gt; 章节中。&lt;/p&gt;

&lt;h3 id=&quot;使用-nvidia-tesla-k80-分布式训练&quot;&gt;使用 NVIDIA® Tesla® K80 分布式训练&lt;/h3&gt;

&lt;div style=&quot;width:95%; margin:auto; margin-bottom:10px; margin-top:20px;&quot;&gt;
  &lt;img style=&quot;width:80%&quot; src=&quot;https://www.tensorflow.org/images/perf_summary_k80_aws_distributed.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;细节和附加结果在 &lt;a href=&quot;#details_for_amazon_ec2_distributed_nvidia_tesla_k80&quot;&gt;分布式 Amazon EC2
(NVIDIA® Tesla® K80) 的细节&lt;/a&gt;
章节中。&lt;/p&gt;

&lt;h3 id=&quot;比较合成和真实训练数据&quot;&gt;比较合成和真实训练数据&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NVIDIA® Tesla® P100&lt;/strong&gt;&lt;/p&gt;

&lt;div style=&quot;width:95%; margin:auto; margin-bottom:10px; margin-top:20px;&quot;&gt;
  &lt;img style=&quot;width:35%&quot; src=&quot;https://www.tensorflow.org/images/perf_summary_p100_data_compare_inceptionv3.png&quot; /&gt;
  &lt;img style=&quot;width:35%&quot; src=&quot;https://www.tensorflow.org/images/perf_summary_p100_data_compare_resnet50.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NVIDIA® Tesla® K80&lt;/strong&gt;&lt;/p&gt;

&lt;div style=&quot;width:95%; margin:auto; margin-bottom:10px; margin-top:20px;&quot;&gt;
  &lt;img style=&quot;width:35%&quot; src=&quot;https://www.tensorflow.org/images/perf_summary_k80_data_compare_inceptionv3.png&quot; /&gt;
  &lt;img style=&quot;width:35%&quot; src=&quot;https://www.tensorflow.org/images/perf_summary_k80_data_compare_resnet50.png&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;nvidia-dgx-1-nvidia-tesla-p100-的细节&quot;&gt;NVIDIA® DGX-1™ (NVIDIA® Tesla® P100) 的细节&lt;/h2&gt;

&lt;h3 id=&quot;环境配置&quot;&gt;环境配置&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Instance type&lt;/strong&gt;: NVIDIA® DGX-1™&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GPU:&lt;/strong&gt; 8x NVIDIA® Tesla® P100&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OS:&lt;/strong&gt; Ubuntu 16.04 LTS with tests run via Docker&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CUDA / cuDNN:&lt;/strong&gt; 8.0 / 5.1&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TensorFlow GitHub hash:&lt;/strong&gt; b1e174e&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Benchmark GitHub hash:&lt;/strong&gt; 9165a70&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Build Command:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;bazel build -c opt --copt=-march=&quot;haswell&quot; --config=cuda
//tensorflow/tools/pip_package:build_pip_package&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Disk:&lt;/strong&gt; Local SSD&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DataSet:&lt;/strong&gt; ImageNet&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test Date:&lt;/strong&gt; May 2017&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每个模型的批处理大小和优化器如下表所示。除了下表所示的批处理大小，InceptionV3、ResNet-50、ResNet-152 和 VGG16 也用批处理大小为 32 进行测试。这些结果在 &lt;em&gt;其他结果&lt;/em&gt; 章节。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Options&lt;/th&gt;
      &lt;th&gt;InceptionV3&lt;/th&gt;
      &lt;th&gt;ResNet-50&lt;/th&gt;
      &lt;th&gt;ResNet-152&lt;/th&gt;
      &lt;th&gt;AlexNet&lt;/th&gt;
      &lt;th&gt;VGG16&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Batch size per GPU&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;512&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Optimizer&lt;/td&gt;
      &lt;td&gt;sgd&lt;/td&gt;
      &lt;td&gt;sgd&lt;/td&gt;
      &lt;td&gt;sgd&lt;/td&gt;
      &lt;td&gt;sgd&lt;/td&gt;
      &lt;td&gt;sgd&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;用于每个模型的配置。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Model&lt;/th&gt;
      &lt;th&gt;variable_update&lt;/th&gt;
      &lt;th&gt;local_parameter_device&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;InceptionV3&lt;/td&gt;
      &lt;td&gt;parameter_server&lt;/td&gt;
      &lt;td&gt;cpu&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ResNet50&lt;/td&gt;
      &lt;td&gt;parameter_server&lt;/td&gt;
      &lt;td&gt;cpu&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ResNet152&lt;/td&gt;
      &lt;td&gt;parameter_server&lt;/td&gt;
      &lt;td&gt;cpu&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AlexNet&lt;/td&gt;
      &lt;td&gt;replicated (with NCCL)&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;VGG16&lt;/td&gt;
      &lt;td&gt;replicated (with NCCL)&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;结果&quot;&gt;结果&lt;/h3&gt;

&lt;div style=&quot;width:95%; margin:auto; margin-bottom:10px; margin-top:20px;&quot;&gt;
  &lt;img style=&quot;width:80%&quot; src=&quot;https://www.tensorflow.org/images/perf_summary_p100_single_server.png&quot; /&gt;
&lt;/div&gt;

&lt;div style=&quot;width:95%; margin:auto; margin-bottom:10px; margin-top:20px;&quot;&gt;
  &lt;img style=&quot;width:35%&quot; src=&quot;https://www.tensorflow.org/images/perf_dgx1_synth_p100_single_server_scaling.png&quot; /&gt;
  &lt;img style=&quot;width:35%&quot; src=&quot;https://www.tensorflow.org/images/perf_dgx1_real_p100_single_server_scaling.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;训练合成数据&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GPUs&lt;/th&gt;
      &lt;th&gt;InceptionV3&lt;/th&gt;
      &lt;th&gt;ResNet-50&lt;/th&gt;
      &lt;th&gt;ResNet-152&lt;/th&gt;
      &lt;th&gt;AlexNet&lt;/th&gt;
      &lt;th&gt;VGG16&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;142&lt;/td&gt;
      &lt;td&gt;219&lt;/td&gt;
      &lt;td&gt;91.8&lt;/td&gt;
      &lt;td&gt;2987&lt;/td&gt;
      &lt;td&gt;154&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;284&lt;/td&gt;
      &lt;td&gt;422&lt;/td&gt;
      &lt;td&gt;181&lt;/td&gt;
      &lt;td&gt;5658&lt;/td&gt;
      &lt;td&gt;295&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;569&lt;/td&gt;
      &lt;td&gt;852&lt;/td&gt;
      &lt;td&gt;356&lt;/td&gt;
      &lt;td&gt;10509&lt;/td&gt;
      &lt;td&gt;584&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;1131&lt;/td&gt;
      &lt;td&gt;1734&lt;/td&gt;
      &lt;td&gt;716&lt;/td&gt;
      &lt;td&gt;17822&lt;/td&gt;
      &lt;td&gt;1081&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;训练真实数据&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GPUs&lt;/th&gt;
      &lt;th&gt;InceptionV3&lt;/th&gt;
      &lt;th&gt;ResNet-50&lt;/th&gt;
      &lt;th&gt;ResNet-152&lt;/th&gt;
      &lt;th&gt;AlexNet&lt;/th&gt;
      &lt;th&gt;VGG16&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;142&lt;/td&gt;
      &lt;td&gt;218&lt;/td&gt;
      &lt;td&gt;91.4&lt;/td&gt;
      &lt;td&gt;2890&lt;/td&gt;
      &lt;td&gt;154&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;278&lt;/td&gt;
      &lt;td&gt;425&lt;/td&gt;
      &lt;td&gt;179&lt;/td&gt;
      &lt;td&gt;4448&lt;/td&gt;
      &lt;td&gt;284&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;551&lt;/td&gt;
      &lt;td&gt;853&lt;/td&gt;
      &lt;td&gt;359&lt;/td&gt;
      &lt;td&gt;7105&lt;/td&gt;
      &lt;td&gt;534&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;1079&lt;/td&gt;
      &lt;td&gt;1630&lt;/td&gt;
      &lt;td&gt;708&lt;/td&gt;
      &lt;td&gt;N/A&lt;/td&gt;
      &lt;td&gt;898&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;从上图表可以看出，由于最大输入的限制，AlexNet 模型没有使用 8 个 GPU 来训练数据。&lt;/p&gt;

&lt;h3 id=&quot;其他结果&quot;&gt;其他结果&lt;/h3&gt;

&lt;p&gt;以下是批处理大小为 32 的结果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;训练合成数据&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GPUs&lt;/th&gt;
      &lt;th&gt;InceptionV3&lt;/th&gt;
      &lt;th&gt;ResNet-50&lt;/th&gt;
      &lt;th&gt;ResNet-152&lt;/th&gt;
      &lt;th&gt;VGG16&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;128&lt;/td&gt;
      &lt;td&gt;195&lt;/td&gt;
      &lt;td&gt;82.7&lt;/td&gt;
      &lt;td&gt;144&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;259&lt;/td&gt;
      &lt;td&gt;368&lt;/td&gt;
      &lt;td&gt;160&lt;/td&gt;
      &lt;td&gt;281&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;520&lt;/td&gt;
      &lt;td&gt;768&lt;/td&gt;
      &lt;td&gt;317&lt;/td&gt;
      &lt;td&gt;549&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;995&lt;/td&gt;
      &lt;td&gt;1485&lt;/td&gt;
      &lt;td&gt;632&lt;/td&gt;
      &lt;td&gt;820&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;训练真实数据&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GPUs&lt;/th&gt;
      &lt;th&gt;InceptionV3&lt;/th&gt;
      &lt;th&gt;ResNet-50&lt;/th&gt;
      &lt;th&gt;ResNet-152&lt;/th&gt;
      &lt;th&gt;VGG16&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;130&lt;/td&gt;
      &lt;td&gt;193&lt;/td&gt;
      &lt;td&gt;82.4&lt;/td&gt;
      &lt;td&gt;144&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;257&lt;/td&gt;
      &lt;td&gt;369&lt;/td&gt;
      &lt;td&gt;159&lt;/td&gt;
      &lt;td&gt;253&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;507&lt;/td&gt;
      &lt;td&gt;760&lt;/td&gt;
      &lt;td&gt;317&lt;/td&gt;
      &lt;td&gt;457&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;966&lt;/td&gt;
      &lt;td&gt;1410&lt;/td&gt;
      &lt;td&gt;609&lt;/td&gt;
      &lt;td&gt;690&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;google-compute-engine-nvidia-tesla-k80-的细节&quot;&gt;Google Compute Engine (NVIDIA® Tesla® K80) 的细节&lt;/h2&gt;

&lt;h3 id=&quot;环境配置-1&quot;&gt;环境配置&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Instance type&lt;/strong&gt;: n1-standard-32-k80x8&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GPU:&lt;/strong&gt; 8x NVIDIA® Tesla® K80&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OS:&lt;/strong&gt; Ubuntu 16.04 LTS&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CUDA / cuDNN:&lt;/strong&gt; 8.0 / 5.1&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TensorFlow GitHub hash:&lt;/strong&gt; b1e174e&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Benchmark GitHub hash:&lt;/strong&gt; 9165a70&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Build Command:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;bazel build -c opt --copt=-march=&quot;haswell&quot; --config=cuda
//tensorflow/tools/pip_package:build_pip_package&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Disk:&lt;/strong&gt; 1.7 TB Shared SSD persistent disk (800 MB/s)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DataSet:&lt;/strong&gt; ImageNet&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test Date:&lt;/strong&gt; May 2017&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每个模型的批处理大小和优化器如下表所示。除了下表所示的批处理大小，InceptionV3 和 ResNet-50 也用批处理大小为 32 进行测试。这些结果在 &lt;em&gt;其他结果&lt;/em&gt; 章节。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Options&lt;/th&gt;
      &lt;th&gt;InceptionV3&lt;/th&gt;
      &lt;th&gt;ResNet-50&lt;/th&gt;
      &lt;th&gt;ResNet-152&lt;/th&gt;
      &lt;th&gt;AlexNet&lt;/th&gt;
      &lt;th&gt;VGG16&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Batch size per GPU&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;512&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Optimizer&lt;/td&gt;
      &lt;td&gt;sgd&lt;/td&gt;
      &lt;td&gt;sgd&lt;/td&gt;
      &lt;td&gt;sgd&lt;/td&gt;
      &lt;td&gt;sgd&lt;/td&gt;
      &lt;td&gt;sgd&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;每个模型所用的配置中， variable_update 和 parameter_server 配置相同，local_parameter_device 和 cpu 配置相同。&lt;/p&gt;

&lt;h3 id=&quot;结果-1&quot;&gt;结果&lt;/h3&gt;

&lt;div style=&quot;width:95%; margin:auto; margin-bottom:10px; margin-top:20px;&quot;&gt;
  &lt;img style=&quot;width:35%&quot; src=&quot;https://www.tensorflow.org/images/perf_gce_synth_k80_single_server_scaling.png&quot; /&gt;
  &lt;img style=&quot;width:35%&quot; src=&quot;https://www.tensorflow.org/images/perf_gce_real_k80_single_server_scaling.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;训练合成数据&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GPUs&lt;/th&gt;
      &lt;th&gt;InceptionV3&lt;/th&gt;
      &lt;th&gt;ResNet-50&lt;/th&gt;
      &lt;th&gt;ResNet-152&lt;/th&gt;
      &lt;th&gt;AlexNet&lt;/th&gt;
      &lt;th&gt;VGG16&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;30.5&lt;/td&gt;
      &lt;td&gt;51.9&lt;/td&gt;
      &lt;td&gt;20.0&lt;/td&gt;
      &lt;td&gt;656&lt;/td&gt;
      &lt;td&gt;35.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;57.8&lt;/td&gt;
      &lt;td&gt;99.0&lt;/td&gt;
      &lt;td&gt;38.2&lt;/td&gt;
      &lt;td&gt;1209&lt;/td&gt;
      &lt;td&gt;64.8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;116&lt;/td&gt;
      &lt;td&gt;195&lt;/td&gt;
      &lt;td&gt;75.8&lt;/td&gt;
      &lt;td&gt;2328&lt;/td&gt;
      &lt;td&gt;120&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;227&lt;/td&gt;
      &lt;td&gt;387&lt;/td&gt;
      &lt;td&gt;148&lt;/td&gt;
      &lt;td&gt;4640&lt;/td&gt;
      &lt;td&gt;234&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;训练真实数据&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GPUs&lt;/th&gt;
      &lt;th&gt;InceptionV3&lt;/th&gt;
      &lt;th&gt;ResNet-50&lt;/th&gt;
      &lt;th&gt;ResNet-152&lt;/th&gt;
      &lt;th&gt;AlexNet&lt;/th&gt;
      &lt;th&gt;VGG16&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;30.6&lt;/td&gt;
      &lt;td&gt;51.2&lt;/td&gt;
      &lt;td&gt;20.0&lt;/td&gt;
      &lt;td&gt;639&lt;/td&gt;
      &lt;td&gt;34.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;58.4&lt;/td&gt;
      &lt;td&gt;98.8&lt;/td&gt;
      &lt;td&gt;38.3&lt;/td&gt;
      &lt;td&gt;1136&lt;/td&gt;
      &lt;td&gt;62.9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;115&lt;/td&gt;
      &lt;td&gt;194&lt;/td&gt;
      &lt;td&gt;75.4&lt;/td&gt;
      &lt;td&gt;2067&lt;/td&gt;
      &lt;td&gt;118&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;225&lt;/td&gt;
      &lt;td&gt;381&lt;/td&gt;
      &lt;td&gt;148&lt;/td&gt;
      &lt;td&gt;4056&lt;/td&gt;
      &lt;td&gt;230&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;其他结果-1&quot;&gt;其他结果&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;训练合成数据&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GPUs&lt;/th&gt;
      &lt;th&gt;InceptionV3 (batch size 32)&lt;/th&gt;
      &lt;th&gt;ResNet-50 (batch size 32)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;29.3&lt;/td&gt;
      &lt;td&gt;49.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;55.0&lt;/td&gt;
      &lt;td&gt;95.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;109&lt;/td&gt;
      &lt;td&gt;183&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;216&lt;/td&gt;
      &lt;td&gt;362&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;训练真实数据&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GPUs&lt;/th&gt;
      &lt;th&gt;InceptionV3 (batch size 32)&lt;/th&gt;
      &lt;th&gt;ResNet-50 (batch size 32)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;29.5&lt;/td&gt;
      &lt;td&gt;49.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;55.4&lt;/td&gt;
      &lt;td&gt;95.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;110&lt;/td&gt;
      &lt;td&gt;186&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;216&lt;/td&gt;
      &lt;td&gt;359&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;amazon-ec2-nvidia-tesla-k80-的细节&quot;&gt;Amazon EC2 (NVIDIA® Tesla® K80) 的细节&lt;/h2&gt;

&lt;h3 id=&quot;环境配置-2&quot;&gt;环境配置&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Instance type&lt;/strong&gt;: p2.8xlarge&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GPU:&lt;/strong&gt; 8x NVIDIA® Tesla® K80&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OS:&lt;/strong&gt; Ubuntu 16.04 LTS&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CUDA / cuDNN:&lt;/strong&gt; 8.0 / 5.1&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TensorFlow GitHub hash:&lt;/strong&gt; b1e174e&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Benchmark GitHub hash:&lt;/strong&gt; 9165a70&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Build Command:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;bazel build -c opt --copt=-march=&quot;haswell&quot; --config=cuda
//tensorflow/tools/pip_package:build_pip_package&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Disk:&lt;/strong&gt; 1TB Amazon EFS (burst 100 MiB/sec for 12 hours, continuous 50
MiB/sec)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DataSet:&lt;/strong&gt; ImageNet&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test Date:&lt;/strong&gt; May 2017&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每个模型的批处理大小和优化器如下表所示。除了下表所示的批处理大小，InceptionV3 和 ResNet-50 也用批处理大小为 32 进行测试。这些结果在 &lt;em&gt;其他结果&lt;/em&gt; 章节。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Options&lt;/th&gt;
      &lt;th&gt;InceptionV3&lt;/th&gt;
      &lt;th&gt;ResNet-50&lt;/th&gt;
      &lt;th&gt;ResNet-152&lt;/th&gt;
      &lt;th&gt;AlexNet&lt;/th&gt;
      &lt;th&gt;VGG16&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Batch size per GPU&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;512&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Optimizer&lt;/td&gt;
      &lt;td&gt;sgd&lt;/td&gt;
      &lt;td&gt;sgd&lt;/td&gt;
      &lt;td&gt;sgd&lt;/td&gt;
      &lt;td&gt;sgd&lt;/td&gt;
      &lt;td&gt;sgd&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;用于每个模型的配置。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Model&lt;/th&gt;
      &lt;th&gt;variable_update&lt;/th&gt;
      &lt;th&gt;local_parameter_device&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;InceptionV3&lt;/td&gt;
      &lt;td&gt;parameter_server&lt;/td&gt;
      &lt;td&gt;cpu&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ResNet-50&lt;/td&gt;
      &lt;td&gt;replicated (without NCCL)&lt;/td&gt;
      &lt;td&gt;gpu&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ResNet-152&lt;/td&gt;
      &lt;td&gt;replicated (without NCCL)&lt;/td&gt;
      &lt;td&gt;gpu&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AlexNet&lt;/td&gt;
      &lt;td&gt;parameter_server&lt;/td&gt;
      &lt;td&gt;gpu&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;VGG16&lt;/td&gt;
      &lt;td&gt;parameter_server&lt;/td&gt;
      &lt;td&gt;gpu&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;结果-2&quot;&gt;结果&lt;/h3&gt;

&lt;div style=&quot;width:95%; margin:auto; margin-bottom:10px; margin-top:20px;&quot;&gt;
  &lt;img style=&quot;width:35%&quot; src=&quot;https://www.tensorflow.org/images/perf_aws_synth_k80_single_server_scaling.png&quot; /&gt;
  &lt;img style=&quot;width:35%&quot; src=&quot;https://www.tensorflow.org/images/perf_aws_real_k80_single_server_scaling.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;训练合成数据&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GPUs&lt;/th&gt;
      &lt;th&gt;InceptionV3&lt;/th&gt;
      &lt;th&gt;ResNet-50&lt;/th&gt;
      &lt;th&gt;ResNet-152&lt;/th&gt;
      &lt;th&gt;AlexNet&lt;/th&gt;
      &lt;th&gt;VGG16&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;30.8&lt;/td&gt;
      &lt;td&gt;51.5&lt;/td&gt;
      &lt;td&gt;19.7&lt;/td&gt;
      &lt;td&gt;684&lt;/td&gt;
      &lt;td&gt;36.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;58.7&lt;/td&gt;
      &lt;td&gt;98.0&lt;/td&gt;
      &lt;td&gt;37.6&lt;/td&gt;
      &lt;td&gt;1244&lt;/td&gt;
      &lt;td&gt;69.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;117&lt;/td&gt;
      &lt;td&gt;195&lt;/td&gt;
      &lt;td&gt;74.9&lt;/td&gt;
      &lt;td&gt;2479&lt;/td&gt;
      &lt;td&gt;141&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;230&lt;/td&gt;
      &lt;td&gt;384&lt;/td&gt;
      &lt;td&gt;149&lt;/td&gt;
      &lt;td&gt;4853&lt;/td&gt;
      &lt;td&gt;260&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;训练真实数据&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GPUs&lt;/th&gt;
      &lt;th&gt;InceptionV3&lt;/th&gt;
      &lt;th&gt;ResNet-50&lt;/th&gt;
      &lt;th&gt;ResNet-152&lt;/th&gt;
      &lt;th&gt;AlexNet&lt;/th&gt;
      &lt;th&gt;VGG16&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;30.5&lt;/td&gt;
      &lt;td&gt;51.3&lt;/td&gt;
      &lt;td&gt;19.7&lt;/td&gt;
      &lt;td&gt;674&lt;/td&gt;
      &lt;td&gt;36.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;59.0&lt;/td&gt;
      &lt;td&gt;94.9&lt;/td&gt;
      &lt;td&gt;38.2&lt;/td&gt;
      &lt;td&gt;1227&lt;/td&gt;
      &lt;td&gt;67.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;118&lt;/td&gt;
      &lt;td&gt;188&lt;/td&gt;
      &lt;td&gt;75.2&lt;/td&gt;
      &lt;td&gt;2201&lt;/td&gt;
      &lt;td&gt;136&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;228&lt;/td&gt;
      &lt;td&gt;373&lt;/td&gt;
      &lt;td&gt;149&lt;/td&gt;
      &lt;td&gt;N/A&lt;/td&gt;
      &lt;td&gt;242&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;由于我们的 EFS 没有提供足够的吞吐量，上面的图表中我们排出了使用 8 个 GPU 来训练 AlexNet 模型的统计。&lt;/p&gt;

&lt;h3 id=&quot;其他结果-2&quot;&gt;其他结果&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;训练合成数据&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GPUs&lt;/th&gt;
      &lt;th&gt;InceptionV3 (batch size 32)&lt;/th&gt;
      &lt;th&gt;ResNet-50 (batch size 32)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;29.9&lt;/td&gt;
      &lt;td&gt;49.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;57.5&lt;/td&gt;
      &lt;td&gt;94.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;114&lt;/td&gt;
      &lt;td&gt;184&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;216&lt;/td&gt;
      &lt;td&gt;355&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;训练真实数据&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GPUs&lt;/th&gt;
      &lt;th&gt;InceptionV3 (batch size 32)&lt;/th&gt;
      &lt;th&gt;ResNet-50 (batch size 32)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;30.0&lt;/td&gt;
      &lt;td&gt;49.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;57.5&lt;/td&gt;
      &lt;td&gt;95.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;113&lt;/td&gt;
      &lt;td&gt;185&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;212&lt;/td&gt;
      &lt;td&gt;353&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;amazon-ec2-distributed-nvidia-tesla-k80-的细节&quot;&gt;Amazon EC2 Distributed (NVIDIA® Tesla® K80) 的细节&lt;/h2&gt;

&lt;h3 id=&quot;环境配置-3&quot;&gt;环境配置&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Instance type&lt;/strong&gt;: p2.8xlarge&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GPU:&lt;/strong&gt; 8x NVIDIA® Tesla® K80&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OS:&lt;/strong&gt; Ubuntu 16.04 LTS&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CUDA / cuDNN:&lt;/strong&gt; 8.0 / 5.1&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TensorFlow GitHub hash:&lt;/strong&gt; b1e174e&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Benchmark GitHub hash:&lt;/strong&gt; 9165a70&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Build Command:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;bazel build -c opt --copt=-march=&quot;haswell&quot; --config=cuda
//tensorflow/tools/pip_package:build_pip_package&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Disk:&lt;/strong&gt; 1.0 TB EFS (burst 100 MB/sec for 12 hours, continuous 50 MB/sec)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DataSet:&lt;/strong&gt; ImageNet&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test Date:&lt;/strong&gt; May 2017&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每个模型的批处理大小和优化器如下表所示。除了下表所示的批处理大小，InceptionV3 和 ResNet-50 也用批处理大小为 32 进行测试。这些结果在 &lt;em&gt;其他结果&lt;/em&gt; 章节。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Options&lt;/th&gt;
      &lt;th&gt;InceptionV3&lt;/th&gt;
      &lt;th&gt;ResNet-50&lt;/th&gt;
      &lt;th&gt;ResNet-152&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Batch size per GPU&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Optimizer&lt;/td&gt;
      &lt;td&gt;sgd&lt;/td&gt;
      &lt;td&gt;sgd&lt;/td&gt;
      &lt;td&gt;sgd&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;用于每个模型的配置。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Model&lt;/th&gt;
      &lt;th&gt;variable_update&lt;/th&gt;
      &lt;th&gt;local_parameter_device&lt;/th&gt;
      &lt;th&gt;cross_replica_sync&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;InceptionV3&lt;/td&gt;
      &lt;td&gt;distributed_replicated&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ResNet-50&lt;/td&gt;
      &lt;td&gt;distributed_replicated&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ResNet-152&lt;/td&gt;
      &lt;td&gt;distributed_replicated&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;为了简化服务器设置，EC2 实例（p2.8xlarge）运行了 worker 服务器和 parameter 服务器。相同数量的 worker 服务器和 parameter 服务器使用了下述的配置：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;InceptionV3: 8 instances / 6 parameter servers&lt;/li&gt;
  &lt;li&gt;ResNet-50: (batch size 32) 8 instances / 4 parameter servers&lt;/li&gt;
  &lt;li&gt;ResNet-152: 8 instances / 4 parameter servers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;结果-3&quot;&gt;结果&lt;/h3&gt;

&lt;div style=&quot;width:95%; margin:auto; margin-bottom:10px; margin-top:20px;&quot;&gt;
  &lt;img style=&quot;width:80%&quot; src=&quot;https://www.tensorflow.org/images/perf_summary_k80_aws_distributed.png&quot; /&gt;
&lt;/div&gt;

&lt;div style=&quot;width:95%; margin:auto; margin-bottom:10px; margin-top:20px;&quot;&gt;
  &lt;img style=&quot;width:70%&quot; src=&quot;https://www.tensorflow.org/images/perf_aws_synth_k80_distributed_scaling.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;训练合成数据&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GPUs&lt;/th&gt;
      &lt;th&gt;InceptionV3&lt;/th&gt;
      &lt;th&gt;ResNet-50&lt;/th&gt;
      &lt;th&gt;ResNet-152&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;29.7&lt;/td&gt;
      &lt;td&gt;52.4&lt;/td&gt;
      &lt;td&gt;19.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;229&lt;/td&gt;
      &lt;td&gt;378&lt;/td&gt;
      &lt;td&gt;146&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;459&lt;/td&gt;
      &lt;td&gt;751&lt;/td&gt;
      &lt;td&gt;291&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;902&lt;/td&gt;
      &lt;td&gt;1388&lt;/td&gt;
      &lt;td&gt;565&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;1783&lt;/td&gt;
      &lt;td&gt;2744&lt;/td&gt;
      &lt;td&gt;981&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;其他结果-3&quot;&gt;其他结果&lt;/h3&gt;

&lt;div style=&quot;width:95%; margin:auto; margin-bottom:10px; margin-top:20px;&quot;&gt;
  &lt;img style=&quot;width:50%&quot; src=&quot;https://www.tensorflow.org/images/perf_aws_synth_k80_multi_server_batch32.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;训练合成数据&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GPUs&lt;/th&gt;
      &lt;th&gt;InceptionV3 (batch size 32)&lt;/th&gt;
      &lt;th&gt;ResNet-50 (batch size 32)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;29.2&lt;/td&gt;
      &lt;td&gt;48.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;219&lt;/td&gt;
      &lt;td&gt;333&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;427&lt;/td&gt;
      &lt;td&gt;667&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;820&lt;/td&gt;
      &lt;td&gt;1180&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;1608&lt;/td&gt;
      &lt;td&gt;2315&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;方法&quot;&gt;方法&lt;/h2&gt;

&lt;p&gt;上述结果是使用该 &lt;a href=&quot;https://github.com/tensorflow/benchmarks/tree/master/scripts/tf_cnn_benchmarks&quot;&gt;脚本&lt;/a&gt; 运行在各种平台上而生成。&lt;a href=&quot;https://www.tensorflow.org/performance/performance_models&quot;&gt;《High-Performance Models》&lt;/a&gt; 文章详细描述了脚本中的技术，以及如何执行脚本的示例。&lt;/p&gt;

&lt;p&gt;为了创建尽可能重复的结果，每个测试运行 5 次，然后取平均值。在给定的平台上，GPU 是在默认状态下运行的。对于 NVIDIA® Tesla® K80 来说这意味着不使用 &lt;a href=&quot;https://devblogs.nvidia.com/parallelforall/increase-performance-gpu-boost-k80-autoboost/&quot;&gt;GPU
Boost&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;对于每个测试，需要完成 10 次预热，然后再平均完成 100 次测试。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;原文地址：&lt;a href=&quot;https://www.tensorflow.org/performance/benchmarks&quot;&gt;https://www.tensorflow.org/performance/benchmarks&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;译文出自：&lt;a href=&quot;https://github.com/xitu/gold-miner&quot;&gt;掘金翻译计划&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;译者：&lt;a href=&quot;https://github.com/charsdavy&quot;&gt;charsdavy&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;校对者：&lt;a href=&quot;https://github.com/joyking7&quot;&gt;joyking7&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/xitu/gold-miner&quot;&gt;掘金翻译计划&lt;/a&gt; 是一个翻译优质互联网技术文章的社区，文章来源为 &lt;a href=&quot;https://juejin.im&quot;&gt;掘金&lt;/a&gt; 上的英文分享文章。内容覆盖 &lt;a href=&quot;https://github.com/xitu/gold-miner#android&quot;&gt;Android&lt;/a&gt;、&lt;a href=&quot;https://github.com/xitu/gold-miner#ios&quot;&gt;iOS&lt;/a&gt;、&lt;a href=&quot;https://github.com/xitu/gold-miner#前端&quot;&gt;前端&lt;/a&gt;、&lt;a href=&quot;https://github.com/xitu/gold-miner#后端&quot;&gt;后端&lt;/a&gt;、&lt;a href=&quot;https://github.com/xitu/gold-miner#区块链&quot;&gt;区块链&lt;/a&gt;、&lt;a href=&quot;https://github.com/xitu/gold-miner#产品&quot;&gt;产品&lt;/a&gt;、&lt;a href=&quot;https://github.com/xitu/gold-miner#设计&quot;&gt;设计&lt;/a&gt;、&lt;a href=&quot;https://github.com/xitu/gold-miner#人工智能&quot;&gt;人工智能&lt;/a&gt;等领域，想要查看更多优质译文请持续关注 &lt;a href=&quot;https://github.com/xitu/gold-miner&quot;&gt;掘金翻译计划&lt;/a&gt;、&lt;a href=&quot;http://weibo.com/juejinfanyi&quot;&gt;官方微博&lt;/a&gt;、&lt;a href=&quot;https://zhuanlan.zhihu.com/juejinfanyi&quot;&gt;知乎专栏&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Chars</name></author><category term="ml" /><category term="掘金翻译计划" /><category term="tensorflow" /><category term="性能" /><category term="机器学习" /><summary type="html">TensorFlow 社区创建了一系列用于多平台测试的图像分类模型参考点。在 方法 章节中会详细说明如何执行测试，并给出使用的脚本链接。</summary></entry></feed>