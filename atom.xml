<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chars&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://charsdavy.github.io/"/>
  <updated>2017-04-12T14:07:42.000Z</updated>
  <id>http://charsdavy.github.io/</id>
  
  <author>
    <name>Chars</name>
    <email>chars.davy@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>聊一聊iOS的那些生命周期</title>
    <link href="http://charsdavy.github.io/2017/04/11/ios-lifecycle/"/>
    <id>http://charsdavy.github.io/2017/04/11/ios-lifecycle/</id>
    <published>2017-04-11T09:07:18.000Z</published>
    <updated>2017-04-12T14:07:42.000Z</updated>
    
    <content type="html">&lt;p&gt;iOS应用程序的生命周期，还有程序是运行在前台还是后台，应用程序各个状态的变换，这些对于开发者来说都是很重要的。iOS系统的资源是有限的，应用程序在前台和在后台的状态是不一样的。在后台时，程序会受到系统的很多限制，这样可以提高电池的使用和用户体验。&lt;/p&gt;
&lt;p&gt;本文所要说到的生命周期，也不仅仅只是应用生命周期；还包括，视图生命周期。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;应用生命周期&quot;&gt;&lt;a href=&quot;#应用生命周期&quot; class=&quot;headerlink&quot; title=&quot;应用生命周期&quot;&gt;&lt;/a&gt;应用生命周期&lt;/h2&gt;&lt;p&gt;iOS的应用程序一共有5种状态:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not Running(非运行状态)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用没有运行或被系统终止。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inactive(前台非活动状态)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用正在进入前台状态，但是还不能接受事件处理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Active(前台活动状态)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用进入前台状态，能接受事件处理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Background(后台状态)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用进入后台后，依然能够执行代码。如果有可执行的代码，就会执行代码，如果没有可执行的代码或者将可执行的代码执行完毕，应用会马上进入挂起状态。有的程序经过特殊的请求后可以长期处于Backgroud状态。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Suspended(挂起状态)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;处于挂起的应用进入一种“冷冻”状态,不能执行代码。如果系统内存不够,系统就把挂起的程序清除掉，为前台程序提供更多的内存，应用会被终止。&lt;/p&gt;
&lt;p&gt;作为应用程序的委托对象，AppDelegate类在应用生命周期的不同阶段会回调不同的方法。首先，让我们先了解一下iOS 应用的不同状态及它们彼此间的关系，如下图所示 ：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ios-app-lifecycle-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在应用状态跃迁的过程中，iOS 系统会回调AppDelegate中的一些方法，并且发送一些通知。实际上，在应用的生命周期中用到的方法和通知很多，我们选取了几个主要的方法和通知进行详细介绍，具体如下表所述：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ios-app-lifecycle-2.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了便于观察应用程序的运行状态，为AppDelegate.m中的方法添加一些日志输出，具体代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@implementation AppDelegate &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)application:(UIApplication *)application &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;%@&amp;quot;, @&amp;quot;application:didFinishLaunchingWithOptions:&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)applicationWillResignActive:(UIApplication *)application&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;%@&amp;quot;, @&amp;quot;applicationWillResignActive:&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)applicationDidEnterBackground:(UIApplication *)application&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;%@&amp;quot;, @&amp;quot;applicationDidEnterBackground:&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)applicationWillEnterForeground:(UIApplication *)application&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;%@&amp;quot;, @&amp;quot;applicationWillEnterForeground:&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)applicationDidBecomeActive:(UIApplication *)application&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;%@&amp;quot;, @&amp;quot;applicationDidBecomeActive:&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)applicationWillTerminate:(UIApplication *)application&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;%@&amp;quot;, @&amp;quot;applicationWillTerminate:&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了让大家更直观地了解各状态与其相应的方法、通知间的关系，下面以几个应用场景为切入点进行系统的分析。&lt;/p&gt;
&lt;h3 id=&quot;（一）非运行状态——应用启动场景&quot;&gt;&lt;a href=&quot;#（一）非运行状态——应用启动场景&quot; class=&quot;headerlink&quot; title=&quot;（一）非运行状态——应用启动场景&quot;&gt;&lt;/a&gt;（一）非运行状态——应用启动场景&lt;/h3&gt;&lt;p&gt;场景描述：用户点击应用图标的时候，可能是第一次启动这个应用，也可能是应用终止后再次启动。该场景的状态跃迁过程见下图，共经历两个阶段3个状态：Not running →Inactive→Active。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1)在Not running→Inactive 阶段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用&lt;code&gt;application:didFinishLaunchingWithOptions:&lt;/code&gt;方法，发出&lt;code&gt;UIApplicationDidFinishLaunchingNotification&lt;/code&gt; 通知。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2)在Inactive →Active 阶段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用 &lt;code&gt;applicationDidBecomeActive:&lt;/code&gt;方法，发出&lt;code&gt;UIApplicationDidBecomeActiveNotification&lt;/code&gt; 通知。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ios-app-lifecycle-3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;（二）点击Home键——应用退出场景&quot;&gt;&lt;a href=&quot;#（二）点击Home键——应用退出场景&quot; class=&quot;headerlink&quot; title=&quot;（二）点击Home键——应用退出场景&quot;&gt;&lt;/a&gt;（二）点击Home键——应用退出场景&lt;/h3&gt;&lt;p&gt;场景描述：应用处于运行状态（即Active状态）时，点击Home键或者有其他的应用导致当前应用中断。该场景的状态跃迁过程可以分成两种情况：可以在后台运行或者挂起，不可以在后台运行或者挂起。根据产品属性文件（如HelloWorld-Info.plist）中的相关属性Application does not run in background 是与否可以控制这两种状态。如果采用文本编辑器打开HelloWorldInfo.plist文件该设置项对应的键是UIApplicationExitsOnSuspend。　&lt;/p&gt;
&lt;p&gt;状态跃迁的第一种情况：应用可以在后台运行或者挂起，该场景的状态跃迁过程见下图 ，共经历3 个阶段4个状态：Active → Inactive → Background→Suspended。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1)在Active→Inactive 阶段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用 &lt;code&gt;applicationWillResignActive:&lt;/code&gt;方法，发出&lt;code&gt;UIApplicationWillResignActiveNotification&lt;/code&gt; 通知。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2)在Inactive →Background阶段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用从非活动状态进入到后台（不涉及我们要重点说明的方法和通知）。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3)在Background→Suspended 阶段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用&lt;code&gt;applicationDidEnterBackground:&lt;/code&gt;方法，发出&lt;code&gt;UIApplicationDidEnterBackgroundNotification&lt;/code&gt; 通知。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ios-app-lifecycle-4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;状态跃迁的第二种情况：应用不可以在后台运行或者挂起，其状态跃迁情况见下图 ，共经历4个阶段5 个状态：Active  → Inactive  → Background→Suspended→Not running 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1)在Active →Inactivd 阶段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用由活动状态转为非活动状态（不涉及我们要重点说明的方法和通知）。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2)在Inactive →Background阶段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用从非活动状态进入到后台（不涉及我们要重点说明的方法和通知）。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3)在Background→Suspended 阶段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用&lt;code&gt;applicationDidEnterBackground:&lt;/code&gt;方法， 发出&lt;code&gt;UIApplicationDidEnterBackgroundNotification&lt;/code&gt;通知。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4)在Suspended →Not running阶段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用&lt;code&gt;applicationWillTerminate:&lt;/code&gt;方法，发出&lt;code&gt;UIApplicationWillTerminateNotification&lt;/code&gt;通知。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ios-app-lifecycle-5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;iOS 在iOS 4之前不支持多任务，点击Home键时，应用会退出并中断；而在iOS 4之后（包括iOS 4），操作系统能够支持多任务处理，点击Home键应用会进入后台但不会中断（内存不够的情况除外）。 &lt;/p&gt;
&lt;p&gt;应用在后台也可以进行部分处理工作，处理完成则进入挂起状态。&lt;/p&gt;
&lt;h3 id=&quot;（三）挂起重新运行场景&quot;&gt;&lt;a href=&quot;#（三）挂起重新运行场景&quot; class=&quot;headerlink&quot; title=&quot;（三）挂起重新运行场景&quot;&gt;&lt;/a&gt;（三）挂起重新运行场景&lt;/h3&gt;&lt;p&gt;场景描述：挂起状态的应用重新运行。该场景的状态跃迁过程如下图所示，共经历3 个阶段4 个状态：Suspended  → Background  → Inactive  → Active 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ios-app-lifecycle-6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1)Suspended→Background阶段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用从挂起状态进入后台（不涉及我们讲述的这几个方法和通知）。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2)Background→Inactive 阶段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用&lt;code&gt;applicationWillEnterForeground:&lt;/code&gt;方法，发出&lt;code&gt;UIApplicationWillEnterForegroundNotification&lt;/code&gt;通知。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3)Inactive →Active 阶段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用&lt;code&gt;applicationDidBecomeActive:&lt;/code&gt;方法，发出&lt;code&gt;UIApplicationDidBecomeActiveNotification&lt;/code&gt; 通知。&lt;/p&gt;
&lt;h3 id=&quot;（四）内存清除——应用终止场景&quot;&gt;&lt;a href=&quot;#（四）内存清除——应用终止场景&quot; class=&quot;headerlink&quot; title=&quot;（四）内存清除——应用终止场景&quot;&gt;&lt;/a&gt;（四）内存清除——应用终止场景&lt;/h3&gt;&lt;p&gt;场景描述：应用在后台处理完成时进入挂起状态（这是一种休眠状态），如果这时发出低内存警告，为了满足其他应用对内存的需要，该应用就会被清除内存从而终止运行，该场景的状态跃迁见下图 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ios-app-lifecycle-7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;内存清除的时候应用终止运行。内存清除有两种情况，可能是系统强制清除内存，也可能是由使用者从任务栏中手动清除（即删掉应用）。内存清除后如果应用再次运行，上一次的运行状态不会被保存，相当于应用第一次运行。&lt;/p&gt;
&lt;p&gt;在内存清除场景下，应用不会调用任何方法，也不会发出任何通知。&lt;/p&gt;
&lt;h2 id=&quot;视图生命周期&quot;&gt;&lt;a href=&quot;#视图生命周期&quot; class=&quot;headerlink&quot; title=&quot;视图生命周期&quot;&gt;&lt;/a&gt;视图生命周期&lt;/h2&gt;&lt;p&gt;视图是应用的一个重要组成部分，功能的实现与其息息相关，而视图控制器控制着视图，其重要性在整个应用中不言而喻。&lt;/p&gt;
&lt;h3 id=&quot;视图生命周期与视图控制器关系&quot;&gt;&lt;a href=&quot;#视图生命周期与视图控制器关系&quot; class=&quot;headerlink&quot; title=&quot;视图生命周期与视图控制器关系&quot;&gt;&lt;/a&gt;视图生命周期与视图控制器关系&lt;/h3&gt;&lt;p&gt;以视图的4 种状态为基础，我们来系统了解一下视图控制器的生命周期。在视图不同的生命周期中，视图控制器会回调不同的方法，具体如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ios-ui-lifecycle-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在视图控制器已被实例化，视图被加载到内存中时调用viewDidLoad方法，这个时候视图并未出现。在该方法中，通常进行的是对所控制的视图进行初始化处理。 &lt;/p&gt;
&lt;p&gt;视图可见前后会调用&lt;code&gt;viewWillAppear:&lt;/code&gt;方法和&lt;code&gt;viewDidAppear:&lt;/code&gt; 方法；视图不可见前后会调用&lt;code&gt;viewWillDisappear:&lt;/code&gt; 方法和&lt;code&gt;viewDidDisappear:&lt;/code&gt;方法。4个方法调用父类相应的方法以实现其功能，编码时该方法的位置可根据实际情况做以调整，参见如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-(void)viewWillAppear:(BOOL)animated&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super viewWillAppear:YES];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //something code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;viewDidLoad&lt;/code&gt; 方法在应用运行的时候只调用一次，而这上述4 个方法可以被反复调用多次，它们的使用很广泛但同时也具有很强的技巧性。例如，有的应用会使用重力加速计，重力加速计会不断轮询设备以实时获得设备在z 轴、x 轴和y轴方向的重力加速度。不断的轮询必然会耗费大量电能进而影响电池使用寿命，我们通过利用这4个方法适时地打开或者关闭重力加速计来达到节约电能的目的。怎么使用这4 个方法才能做到“适时”是一个值得思考的问题。 &lt;/p&gt;
&lt;p&gt;在低内存情况下，iOS 会调用&lt;code&gt;didReceiveMemoryWarning:&lt;/code&gt; 和&lt;code&gt;viewDidUnload:&lt;/code&gt;方法。在iOS 6 之后，就不再使用&lt;code&gt;viewDidUnload:&lt;/code&gt;，而仅支持&lt;code&gt;didReceiveMemoryWarning：&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;didReceiveMemoryWarning:&lt;/code&gt;方法的主要职能是释放内存，包括视图控制器中的一些成员变量和视图的释放。现举例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)didReceiveMemoryWarning &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.button = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.myStringD = nil; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [myStringC release];    //ARC内存管理情况下不用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super didReceiveMemoryWarning];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了上述5 个方法视图控制器外，还有很多其他方法。&lt;/p&gt;
&lt;h3 id=&quot;iOS-UI-状态保持和恢复&quot;&gt;&lt;a href=&quot;#iOS-UI-状态保持和恢复&quot; class=&quot;headerlink&quot; title=&quot;iOS  UI 状态保持和恢复&quot;&gt;&lt;/a&gt;iOS  UI 状态保持和恢复&lt;/h3&gt;&lt;p&gt;iOS 设计规范中要求，当应用退出的时候（包括被终止运行的时候），需要保持界面中UI元素的状态，当再次进来的时候看到的状态与退出时是一样的。在iOS 之后，苹果提供以下API使得UI状态保持和恢复变得很容易。 &lt;/p&gt;
&lt;p&gt;在iOS 中，我们可以在以下3种地方实现状态保持和恢复：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;应用程序委托对象 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;视图控制器 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自定义视图&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;恢复标识是iOS为了实现UI状态保持和恢复添加的设置项目。我们还需要在应用程序委托对象AppDelegate代码部分做一些修改，添加的代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-(BOOL) application:(UIApplication *)application shouldSaveApplicationState:(NSCoder *)coder&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(BOOL) application:(UIApplication *)application shouldRestoreApplicationState:(NSCoder *)coder&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)application:(UIApplication *)application willEncodeRestorableStateWithCoder:(NSCoder *)coder&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [coder encodeFloat:2.0 forKey:@&amp;quot;Version&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)application:(UIApplication *)application didDecodeRestorableStateWithCoder:(NSCoder *)coder&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    float lastVer = [coder decodeFloatForKey:@&amp;quot;Version&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;lastVer = %f&amp;quot;,lastVer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中application:shouldSaveApplicationState:方法在应用退出时调用，负责控制是否允许保存状态，返回YES 情况是可以保存，NO是不保存。 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;application:shouldRestoreApplicationState:&lt;/code&gt;方法在应用启动时调用，负责控制是否恢复上次退出时的状态，返回YES 表示可以恢复，返回NO表示不可以恢复。 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;application:willEncodeRestorableStateWithCoder:&lt;/code&gt;方法在保存时调用，在这个方法中实现UI状态或数据的保存，其中&lt;code&gt;[coder encodeFloat:2.0 forKey:@&amp;quot;Version&amp;quot;]&lt;/code&gt; 语句是保存简单数据。 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;application:didDecodeRestorableStateWithCoder:&lt;/code&gt;方法在恢复时调用，在这个方法中实现UI状态或数据的恢复，其中&lt;code&gt;[coder decodeFloatForKey:@&amp;quot;Version&amp;quot;]&lt;/code&gt; 语句用于恢复上次保存的数据。 &lt;/p&gt;
&lt;p&gt;想要实现具体界面中控件的保持和恢复，还需要在它的视图控制器中添加一些代码。我们在ViewController.m中添加的代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-(void)encodeRestorableStateWithCoder:(NSCoder *)coder&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super encodeRestorableStateWithCoder:coder];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [coder encodeObject:self.txtField.text forKey:kSaveKey];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)decodeRestorableStateWithCoder:(NSCoder *)coder&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super decodeRestorableStateWithCoder:coder];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.txtField.text = [coder decodeObjectForKey:kSaveKey];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在iOS 6之后，视图控制器都添加了两个方法——&lt;code&gt;encodeRestorableStateWithCoder:&lt;/code&gt; 和&lt;code&gt;decodeRestorableStateWithCoder:&lt;/code&gt; ，用来实现该控制器中的控件或数据的保存和恢复。&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;encodeRestorableStateWithCoder:&lt;/code&gt;方法在保存时候调用，&lt;code&gt;[coder encodeObject:self. txtField.textforKey:kSaveKey]&lt;/code&gt;语句是按照指定的键保存文本框的内容。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;decodeRestorableStateWithCoder:&lt;/code&gt;方法在恢复时调用，&lt;code&gt;[coder decodeObjectForKey:kSaveKey]&lt;/code&gt;在恢复文本框内容时调用，保存和恢复事实上就是向一个归档文件中编码和解码的过程。&lt;/p&gt;
&lt;h2 id=&quot;移除Main-storyboard&quot;&gt;&lt;a href=&quot;#移除Main-storyboard&quot; class=&quot;headerlink&quot; title=&quot;移除Main.storyboard&quot;&gt;&lt;/a&gt;移除Main.storyboard&lt;/h2&gt;&lt;p&gt;每次使用Single View Application模板创建工程之后，总是会有一个Main.storyboard文件，那么，当我们使用代码布局的时候，很显然是不需要它的。那么，如何将它从工程中移除呢？只要进行如下几步即可。&lt;/p&gt;
&lt;h3 id=&quot;在工程配置中移除关联&quot;&gt;&lt;a href=&quot;#在工程配置中移除关联&quot; class=&quot;headerlink&quot; title=&quot;在工程配置中移除关联&quot;&gt;&lt;/a&gt;在工程配置中移除关联&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ios-remove-storyboard-1.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在TARGETS中，将Main InInterface选项中的值清空并保存设置。&lt;/p&gt;
&lt;h3 id=&quot;移除Main-storyboard中的关联文件&quot;&gt;&lt;a href=&quot;#移除Main-storyboard中的关联文件&quot; class=&quot;headerlink&quot; title=&quot;移除Main.storyboard中的关联文件&quot;&gt;&lt;/a&gt;移除Main.storyboard中的关联文件&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ios-remove-storyboard-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;选择storyboard文件。将类关联文件项清空并保存设置。&lt;/p&gt;
&lt;h3 id=&quot;移除Main-storyboard文件&quot;&gt;&lt;a href=&quot;#移除Main-storyboard文件&quot; class=&quot;headerlink&quot; title=&quot;移除Main.storyboard文件&quot;&gt;&lt;/a&gt;移除Main.storyboard文件&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ios-remove-storyboard-3.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;从工程中移除文件。&lt;/p&gt;
&lt;h3 id=&quot;在AppDelegate中添加代码&quot;&gt;&lt;a href=&quot;#在AppDelegate中添加代码&quot; class=&quot;headerlink&quot; title=&quot;在AppDelegate中添加代码&quot;&gt;&lt;/a&gt;在AppDelegate中添加代码&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Override point for customization after application launch.   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ViewController *viewController = [[ViewController alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.window.rootViewController = viewController;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.window.backgroundColor = [UIColor purpleColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　[self.window makeKeyAndVisible];    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   return YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完成以上几步，运行工程即可，顺利运行，没有出现任何error或waring。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;iOS应用程序的生命周期，还有程序是运行在前台还是后台，应用程序各个状态的变换，这些对于开发者来说都是很重要的。iOS系统的资源是有限的，应用程序在前台和在后台的状态是不一样的。在后台时，程序会受到系统的很多限制，这样可以提高电池的使用和用户体验。&lt;/p&gt;
&lt;p&gt;本文所要说到的生命周期，也不仅仅只是应用生命周期；还包括，视图生命周期。&lt;/p&gt;
    
    </summary>
    
      <category term="pieces" scheme="http://charsdavy.github.io/categories/pieces/"/>
    
    
      <category term="ios" scheme="http://charsdavy.github.io/tags/ios/"/>
    
      <category term="objc" scheme="http://charsdavy.github.io/tags/objc/"/>
    
      <category term="application" scheme="http://charsdavy.github.io/tags/application/"/>
    
      <category term="ui" scheme="http://charsdavy.github.io/tags/ui/"/>
    
      <category term="生命周期" scheme="http://charsdavy.github.io/tags/lifecycle/"/>
    
  </entry>
  
  <entry>
    <title>日语-发音</title>
    <link href="http://charsdavy.github.io/2017/04/10/japanese-pronounce/"/>
    <id>http://charsdavy.github.io/2017/04/10/japanese-pronounce/</id>
    <published>2017-04-10T14:05:00.000Z</published>
    <updated>2017-04-12T14:18:01.000Z</updated>
    
    <content type="html">&lt;p&gt;日语以东京音为标准音，其声调可以分为如下几种：0型，①型，②型，③型，④型，⑤型，⑥型和⑦型等。高声调表示重音，低声调表示轻音。&lt;/p&gt;
&lt;p&gt;0型：表示只有第一拍低，其它各拍都高。&lt;/p&gt;
&lt;p&gt;①型：表示只有第一拍高，以下其它各拍都低。&lt;/p&gt;
&lt;p&gt;②型：表示只有第二拍高，第一拍和以下其它各拍都低。&lt;/p&gt;
&lt;p&gt;③型：表示第二拍，第三拍高，第一拍和以下其它各拍都低。&lt;/p&gt;
&lt;p&gt;④型：表示第二拍，第三拍，第四拍高，第一拍和以下其它各拍都低。&lt;/p&gt;
&lt;p&gt;依此类推其它型。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;五十音图&quot;&gt;&lt;a href=&quot;#五十音图&quot; class=&quot;headerlink&quot; title=&quot;五十音图&quot;&gt;&lt;/a&gt;五十音图&lt;/h2&gt;&lt;h3 id=&quot;清音&quot;&gt;&lt;a href=&quot;#清音&quot; class=&quot;headerlink&quot; title=&quot;清音&quot;&gt;&lt;/a&gt;清音&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;あ段&lt;/th&gt;
&lt;th&gt;い段&lt;/th&gt;
&lt;th&gt;う段&lt;/th&gt;
&lt;th&gt;え段&lt;/th&gt;
&lt;th&gt;お段&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;　あ行 　&lt;/td&gt;
&lt;td&gt;　あ　ア a　&lt;/td&gt;
&lt;td&gt;　い　イ i　&lt;/td&gt;
&lt;td&gt;　う　ウ u　&lt;/td&gt;
&lt;td&gt;　え　エ e　&lt;/td&gt;
&lt;td&gt;　お　オ　o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;　か行 k　&lt;/td&gt;
&lt;td&gt;　か　カ ka　&lt;/td&gt;
&lt;td&gt;　き　キ ki　&lt;/td&gt;
&lt;td&gt;　く　ク ku　&lt;/td&gt;
&lt;td&gt;　け　ケ ke　&lt;/td&gt;
&lt;td&gt;　こ　コ　ko&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;　さ行 s　&lt;/td&gt;
&lt;td&gt;　さ　サ sa　&lt;/td&gt;
&lt;td&gt;　し　シ shi　&lt;/td&gt;
&lt;td&gt;　す　ス su　&lt;/td&gt;
&lt;td&gt;　せ セ　se　&lt;/td&gt;
&lt;td&gt;　そ　ソ so　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;　た行 t　&lt;/td&gt;
&lt;td&gt;　た タ　ta　&lt;/td&gt;
&lt;td&gt;　ち　チ chi　&lt;/td&gt;
&lt;td&gt;　つ ツ　tsu　&lt;/td&gt;
&lt;td&gt;　て　テ　te&lt;/td&gt;
&lt;td&gt;　と　ト to　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;　な行 n　&lt;/td&gt;
&lt;td&gt;　な　ナ na　&lt;/td&gt;
&lt;td&gt;　に　ニ ni　&lt;/td&gt;
&lt;td&gt;　ぬ ヌ　nu　&lt;/td&gt;
&lt;td&gt;　ね ネ　ne　&lt;/td&gt;
&lt;td&gt;　の　ノ no　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;　は行 h　&lt;/td&gt;
&lt;td&gt;　は ハ　ha　&lt;/td&gt;
&lt;td&gt;　ひ　ヒ hi　&lt;/td&gt;
&lt;td&gt;　ふ フ　fu　&lt;/td&gt;
&lt;td&gt;　へ　ヘ　he&lt;/td&gt;
&lt;td&gt;　ほ　ホ ho　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;　ま行 m　&lt;/td&gt;
&lt;td&gt;　ま　マ ma　&lt;/td&gt;
&lt;td&gt;　み　ミ　mi&lt;/td&gt;
&lt;td&gt;　む　ム mu　&lt;/td&gt;
&lt;td&gt;　め　メ　me　&lt;/td&gt;
&lt;td&gt;　も　モ　mo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;　や行 y　&lt;/td&gt;
&lt;td&gt;　や　ヤ ya　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　ゆ　ユ yu　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　よ　ヨ yo　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;　ら行 r　&lt;/td&gt;
&lt;td&gt;　ら　ラ ra　&lt;/td&gt;
&lt;td&gt;　り　リ ri　&lt;/td&gt;
&lt;td&gt;　る　ル ru　&lt;/td&gt;
&lt;td&gt;　れ　レ re　&lt;/td&gt;
&lt;td&gt;　ろ　ロ ro　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;　わ行 w　&lt;/td&gt;
&lt;td&gt;　わ　ワ wa　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　を　ヲ wo　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　ん　ン n　&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;拨音-ん&quot;&gt;&lt;a href=&quot;#拨音-ん&quot; class=&quot;headerlink&quot; title=&quot;拨音 (ん)&quot;&gt;&lt;/a&gt;拨音 (ん)&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;后续音节&lt;/th&gt;
&lt;th&gt;实际发音&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ぱ、ば、ま行&lt;/td&gt;
&lt;td&gt;/m/&lt;/td&gt;
&lt;td&gt;　さんぽ、しんぶん、うんめい、こんぶ、かんぶ　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;た、だ、ら、な行&lt;/td&gt;
&lt;td&gt;/n/&lt;/td&gt;
&lt;td&gt;　ほんとう、もんだい、ほんらい、しんねん、こんど、すんな　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;其它或词尾&lt;/td&gt;
&lt;td&gt;/ng/&lt;/td&gt;
&lt;td&gt;　へんか、あんしん、れんあい、まんが、バン、おんせん　&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;浊音&quot;&gt;&lt;a href=&quot;#浊音&quot; class=&quot;headerlink&quot; title=&quot;浊音&quot;&gt;&lt;/a&gt;浊音&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;が行 g&lt;/th&gt;
&lt;th&gt;　が　ガ ga　&lt;/th&gt;
&lt;th&gt;　ぎ　ギ　gi&lt;/th&gt;
&lt;th&gt;　ぐ　グ gu　&lt;/th&gt;
&lt;th&gt;　げ　ゲ ge　&lt;/th&gt;
&lt;th&gt;　ご　ゴ go　&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ざ行 z&lt;/td&gt;
&lt;td&gt;　ざ　ザ za　&lt;/td&gt;
&lt;td&gt;　じ　ジ zi　&lt;/td&gt;
&lt;td&gt;　ず　ズ zu　&lt;/td&gt;
&lt;td&gt;　ぜ　ゼ ze　&lt;/td&gt;
&lt;td&gt;　ぞ　ゾ zo　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;だ行 d&lt;/td&gt;
&lt;td&gt;　だ　ダ da　&lt;/td&gt;
&lt;td&gt;　ぢ　ヂ zi　&lt;/td&gt;
&lt;td&gt;　づ　ヅ zu　&lt;/td&gt;
&lt;td&gt;　で　デ de　&lt;/td&gt;
&lt;td&gt;　ど　ド do　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ば行 b&lt;/td&gt;
&lt;td&gt;　ば　バ ba　&lt;/td&gt;
&lt;td&gt;　び　ビ bi　&lt;/td&gt;
&lt;td&gt;　ぶ　ブ bu　&lt;/td&gt;
&lt;td&gt;　べ　ベ be　&lt;/td&gt;
&lt;td&gt;　ぼ　ボ bo　&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;半浊音&quot;&gt;&lt;a href=&quot;#半浊音&quot; class=&quot;headerlink&quot; title=&quot;半浊音&quot;&gt;&lt;/a&gt;半浊音&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ぱ行 p&lt;/th&gt;
&lt;th&gt;　ぱ pa　&lt;/th&gt;
&lt;th&gt;　ぴ　pi&lt;/th&gt;
&lt;th&gt;　ぷ pu　&lt;/th&gt;
&lt;th&gt;　ぺpe　&lt;/th&gt;
&lt;th&gt;　ぽ　po&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;　パ　&lt;/td&gt;
&lt;td&gt;　ピ&lt;/td&gt;
&lt;td&gt;　プ　&lt;/td&gt;
&lt;td&gt;　ペ　&lt;/td&gt;
&lt;td&gt;　ポ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;拗音&quot;&gt;&lt;a href=&quot;#拗音&quot; class=&quot;headerlink&quot; title=&quot;拗音&quot;&gt;&lt;/a&gt;拗音&lt;/h3&gt;&lt;p&gt;拗音是在“い段”假名后面加上复元音“や”、“ゆ”、“よ”拼成的音节。拗音符号是把“や”、“ゆ”、“よ”写在“い段”假名的右下角。把拗音自动拉长一拍就是拗长音。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;きゃ　キャ kya&lt;/th&gt;
&lt;th&gt;きゅ　キュ kyu&lt;/th&gt;
&lt;th&gt;きょ　キョ kyo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;しゃ　シャ sha&lt;/td&gt;
&lt;td&gt;しゅ　シュ shu&lt;/td&gt;
&lt;td&gt;しょ　ショ sho&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ちゃ　チャ cha&lt;/td&gt;
&lt;td&gt;ちゅ　チュ chu&lt;/td&gt;
&lt;td&gt;ちょ　チョ cho&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;にゃ　ニャ nya&lt;/td&gt;
&lt;td&gt;にゅ　ニュ nyu&lt;/td&gt;
&lt;td&gt;にょ　ニョ nyo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ひゃ　ヒャ hya&lt;/td&gt;
&lt;td&gt;ひゅ　ヒュ hyu&lt;/td&gt;
&lt;td&gt;ひょ　ヒョ hyo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;みゃ　ミャ mya&lt;/td&gt;
&lt;td&gt;みゅ　ミュ myu&lt;/td&gt;
&lt;td&gt;みょ　ミョ myo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;りゃ　リャ rya&lt;/td&gt;
&lt;td&gt;りゅ　リュ ryu&lt;/td&gt;
&lt;td&gt;りょ　リョ ryo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ぎゃ　ギャ gya&lt;/td&gt;
&lt;td&gt;ぎゅ　ギュ gyu&lt;/td&gt;
&lt;td&gt;ぎょ　ギョ gyo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;じゃ　ジャ ja&lt;/td&gt;
&lt;td&gt;じゅ　ジュ ju&lt;/td&gt;
&lt;td&gt;じょ　ジョ jo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ぢゃ　ヂャ dya&lt;/td&gt;
&lt;td&gt;ぢゅ　ヂュ dyu&lt;/td&gt;
&lt;td&gt;ぢょ　ヂョ dyo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;びゃ　ビャ bya&lt;/td&gt;
&lt;td&gt;びゅ　ビュ byu&lt;/td&gt;
&lt;td&gt;びょ　ビョ byo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ぴゃ　ピャ pya&lt;/td&gt;
&lt;td&gt;ぴゅ　ピュ pyu&lt;/td&gt;
&lt;td&gt;ぴょ　ピョ pyo&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1）が行假名出现在单词首位置，发本音（浊音）；若出现在单词其他位置，发鼻浊音。&lt;/p&gt;
&lt;p&gt;2）か行和た行假名出现在单词首位置，发本音（清音）；若出现在其他位置，发近对应的浊音。&lt;/p&gt;
&lt;p&gt;3）ぱ行假名出现在单词首位置，发本音（半浊音）；若出现在其他位置，发ば行对应的音。&lt;/p&gt;
&lt;h2 id=&quot;促音&quot;&gt;&lt;a href=&quot;#促音&quot; class=&quot;headerlink&quot; title=&quot;促音&quot;&gt;&lt;/a&gt;促音&lt;/h2&gt;&lt;p&gt;发音时用发音器官某一部分堵住呼吸，形成一个短促的顿挫，然后放开堵塞使呼气急冲而出，这种音节叫“促音”，用小“つ”表示，即“っ”。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;促音+か行假名&lt;/td&gt;
&lt;td&gt;かっこ、がっき、じっけん、せっけん、はっけん、みっか&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;促音+さ行假名&lt;/td&gt;
&lt;td&gt;あっさり、けっせき、ざっし、じっせん、しっそ、ねっしん&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;促音+た行假名&lt;/td&gt;
&lt;td&gt;ねったい、おっと、ずっと、ぜったい、はってん、まったく&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;促音+ぱ行假名&lt;/td&gt;
&lt;td&gt;いっぱい、いっぺん、じっぴ、じっぷん、にっぽん、りっぱ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;长音&quot;&gt;&lt;a href=&quot;#长音&quot; class=&quot;headerlink&quot; title=&quot;长音&quot;&gt;&lt;/a&gt;长音&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;长音规则&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;特例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;あ段假名后加あ&lt;/td&gt;
&lt;td&gt;おかあさん&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;い段假名后加い&lt;/td&gt;
&lt;td&gt;おにいさん&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;う段假名后加う&lt;/td&gt;
&lt;td&gt;ゆうじん&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;え段假名后加い，个别场合加え&lt;/td&gt;
&lt;td&gt;せんせい&lt;/td&gt;
&lt;td&gt;おねえさん、ええ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;お段假名后加う，个别场合加お&lt;/td&gt;
&lt;td&gt;おとうさん&lt;/td&gt;
&lt;td&gt;大きい、こお、とお&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;外来语用ー&lt;/td&gt;
&lt;td&gt;メーデー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;日语以东京音为标准音，其声调可以分为如下几种：0型，①型，②型，③型，④型，⑤型，⑥型和⑦型等。高声调表示重音，低声调表示轻音。&lt;/p&gt;
&lt;p&gt;0型：表示只有第一拍低，其它各拍都高。&lt;/p&gt;
&lt;p&gt;①型：表示只有第一拍高，以下其它各拍都低。&lt;/p&gt;
&lt;p&gt;②型：表示只有第二拍高，第一拍和以下其它各拍都低。&lt;/p&gt;
&lt;p&gt;③型：表示第二拍，第三拍高，第一拍和以下其它各拍都低。&lt;/p&gt;
&lt;p&gt;④型：表示第二拍，第三拍，第四拍高，第一拍和以下其它各拍都低。&lt;/p&gt;
&lt;p&gt;依此类推其它型。&lt;/p&gt;
    
    </summary>
    
      <category term="talk" scheme="http://charsdavy.github.io/categories/talk/"/>
    
    
      <category term="碎碎念" scheme="http://charsdavy.github.io/tags/text/"/>
    
      <category term="日语" scheme="http://charsdavy.github.io/tags/japan-language/"/>
    
  </entry>
  
  <entry>
    <title>sublime text 实用技巧</title>
    <link href="http://charsdavy.github.io/2017/03/30/sublime-text-tool/"/>
    <id>http://charsdavy.github.io/2017/03/30/sublime-text-tool/</id>
    <published>2017-03-29T23:51:43.000Z</published>
    <updated>2017-03-31T13:37:53.000Z</updated>
    
    <content type="html">&lt;p&gt;Sublime Text 是一个代码编辑器（Sublime Text 2是收费软件，但可以无限期试用），也是HTML和散文先进的文本编辑器。Sublime Text是由程序员Jon Skinner于2008年1月份所开发出来，它最初被设计为一个具有丰富扩展功能的Vim。&lt;/p&gt;
&lt;p&gt;笔者整理了一些使用快捷方式，以及一些常用插件，分享一下。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;安装包控制（Package-Control）&quot;&gt;&lt;a href=&quot;#安装包控制（Package-Control）&quot; class=&quot;headerlink&quot; title=&quot;安装包控制（Package Control）&quot;&gt;&lt;/a&gt;安装包控制（Package Control）&lt;/h2&gt;&lt;p&gt;打开Sublime Text 2，按快捷键 ctrl+` 或者点击 Tools → Command Palette 调出控制台Console；&lt;br&gt;将以下代码复制粘贴进命令行后回车：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import urllib2,os;pf=&amp;apos;Package Control.sublime-package&amp;apos;;ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp)elseNone;open(os.path.join(ipp,pf),&amp;apos;wb&amp;apos;).write(urllib2.urlopen(&amp;apos;http://sublime.wbond.net/&amp;apos;+pf.replace(&amp;apos; &amp;apos;,&amp;apos;%20&amp;apos;)).read())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重新启动Sublime Text 2，如果在Preferences → Package Settings 中看到 Package Control 这一项，就说明安装成功。&lt;/p&gt;
&lt;h2 id=&quot;安装Alignment插件&quot;&gt;&lt;a href=&quot;#安装Alignment插件&quot; class=&quot;headerlink&quot; title=&quot;安装Alignment插件&quot;&gt;&lt;/a&gt;安装Alignment插件&lt;/h2&gt;&lt;p&gt;对于喜欢整齐的码农来说，这不失为一个省事的插件。该插件可以通过上面安装好的 Package Control 来安装：&lt;/p&gt;
&lt;p&gt;按ctrl + shift + P调出命令面板；&lt;/p&gt;
&lt;p&gt;输入 install 调出 Package Control：Install Package 选项，并回车；&lt;/p&gt;
&lt;p&gt;输入Alignment，选中并按回车安装；&lt;/p&gt;
&lt;p&gt;重启Sublime Text 2，选中文本并按ctrl + alt + a 就可以进行对齐操作了。&lt;/p&gt;
&lt;h2 id=&quot;安装-Soda-主题&quot;&gt;&lt;a href=&quot;#安装-Soda-主题&quot; class=&quot;headerlink&quot; title=&quot;安装 Soda 主题&quot;&gt;&lt;/a&gt;安装 Soda 主题&lt;/h2&gt;&lt;p&gt;这里的主题不同于针对代码的 color scheme，而是针对Sublime Text 2该软件本身的主题，该主题也可以通过万能的 Package Control 来安装。&lt;/p&gt;
&lt;p&gt;按ctrl + shift + P调出命令面板；&lt;/p&gt;
&lt;p&gt;输入 install 调出 Package Control：Install Package 选项，并回车；&lt;/p&gt;
&lt;p&gt;输入 theme soda 选中后回车即可安装；&lt;/p&gt;
&lt;p&gt;安装完之后要激活主题，打开 Preferences → Global Settings – User，加上以下代码保存即可生效：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;theme&amp;quot;: &amp;quot;Soda Light.sublime-theme&amp;quot; 或者 &amp;quot;theme&amp;quot; : &amp;quot;Soda Dark.sublime-theme&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;安装cTags插件&quot;&gt;&lt;a href=&quot;#安装cTags插件&quot; class=&quot;headerlink&quot; title=&quot;安装cTags插件&quot;&gt;&lt;/a&gt;安装cTags插件&lt;/h2&gt;&lt;p&gt;首先，从Ctags官网下载压缩包下来，解压到电脑的某个地方，比如“C:\Program Files\ctags”，然后把cTags添加到系统变量里去：&lt;br&gt;在“我的电脑”右键属性 → 高级 → 环境变量 → 在“系统变量”里找到“Path”，点击“编辑” → 把“;C:\Program Files\ctags”（不包括双引号）复制到最后 → 最后一路“确定”保存。&lt;/p&gt;
&lt;p&gt;然后通过 Package Control 来安装 cTags 插件：&lt;/p&gt;
&lt;p&gt;按ctrl + shift + P调出命令面板；&lt;/p&gt;
&lt;p&gt;输入 install 调出 Package Control：Install Package 选项，并回车；&lt;/p&gt;
&lt;p&gt;输入 ctags 选中后回车即可安装。&lt;/p&gt;
&lt;p&gt;安装完之后，在项目的当前目录下按ctrl + t, ctrl + r，会生成.tags的文件。当光标停留在某个函数上时，按快捷键 ctrl+t, ctrl+t就可以打开函数所在的文件，并跳转到相应的位置了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; 安装这个插件折腾了我蛮久，主要是不知道还要从ctags官网下载压缩包，以及修改系统的变量，后来还是一博友给我发的国外的参考资料才知道要这样配置 的。刚开始知道这软件之所以没用是因为没有像eclipse可以追踪函数的功能，后来才知道可以通过安装cTags插件来实现。装上此功能后，就更喜欢用 Sublime Text 2了。&lt;/p&gt;
&lt;h2 id=&quot;jsFormat插件&quot;&gt;&lt;a href=&quot;#jsFormat插件&quot; class=&quot;headerlink&quot; title=&quot;jsFormat插件&quot;&gt;&lt;/a&gt;jsFormat插件&lt;/h2&gt;&lt;p&gt;格式化js：选中一段文本，control+alt+f。&lt;/p&gt;
&lt;p&gt;DocBlockr&lt;/p&gt;
&lt;p&gt;在JS函数上方输入/**，然后回车，doc就生成好了非常好用。&lt;/p&gt;
&lt;p&gt;sublime-jslint&lt;/p&gt;
&lt;p&gt;打开一个js文件，control+j，即可输出jsLint检查的结果。打开Packages目录，找到插件目录sublime-jslint，打开 sublime-jslint.sublime-settings文件，可以修改jsLint配置，还可以配置文件保存时自动检查等，如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; // Path to the jslint jar. // Leave blank to use bundled jar. &amp;quot;jslint_jar&amp;quot;: &amp;quot;&amp;quot;,   // Options pass to jslint. // Jerry Qu注：全部可用配置参考这里，https://github.com/fbzhong/sublime-jslint/wiki/Available- jslint4java-options &amp;quot;jslint_options&amp;quot;: &amp;quot;--encoding utf-8 --bitwise --browser --cap --css --devel --debug --evil --forin --fragment --on --sub --white --windows --sloppy&amp;quot;,   // Ignore errors, regex. &amp;quot;ignore_errors&amp;quot;: [ // &amp;quot;Expected an identifier and instead saw &amp;apos;undefined&amp;apos; \(a reserved word\)&amp;quot; ],   // run jslint on save. &amp;quot;run_on_save&amp;quot;: false,   // debug flag. &amp;quot;debug&amp;quot;:false &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;SideBarEnhancements&quot;&gt;&lt;a href=&quot;#SideBarEnhancements&quot; class=&quot;headerlink&quot; title=&quot;SideBarEnhancements&quot;&gt;&lt;/a&gt;SideBarEnhancements&lt;/h2&gt;&lt;p&gt;推荐通过 Package Control 安装 SideBarEnhancements 这个插件，可以大大加强在侧栏目录树中右键的选项&lt;/p&gt;
&lt;h2 id=&quot;推荐插件：&quot;&gt;&lt;a href=&quot;#推荐插件：&quot; class=&quot;headerlink&quot; title=&quot;推荐插件：&quot;&gt;&lt;/a&gt;推荐插件：&lt;/h2&gt;&lt;p&gt;1）Zen Coding&lt;/p&gt;
&lt;p&gt;2）jQuery Package for sublime Text&lt;/p&gt;
&lt;p&gt;3）Clipboard History&lt;/p&gt;
&lt;p&gt;4）Bracket Highlighter&lt;/p&gt;
&lt;p&gt;5）GBK to UTF8&lt;/p&gt;
&lt;p&gt;6）Git&lt;/p&gt;
&lt;h2 id=&quot;常用快捷键&quot;&gt;&lt;a href=&quot;#常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;常用快捷键&quot;&gt;&lt;/a&gt;常用快捷键&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;按键组合&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Command+Shift+L&lt;/td&gt;
&lt;td&gt;选中多行即可可以同时编辑这些行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;control + Command +G&lt;/td&gt;
&lt;td&gt;可以一次性选择全部相同的文件进行同时编辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+D&lt;/td&gt;
&lt;td&gt;选词（反复按快捷键，即可继续向下同时选中下一个相同的文本进行同时编辑）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+G&lt;/td&gt;
&lt;td&gt;跳转到相应的行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+J&lt;/td&gt;
&lt;td&gt;合并行（已选择需要合并的多行时）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+L&lt;/td&gt;
&lt;td&gt;选择整行（按住-继续选择下行）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+M&lt;/td&gt;
&lt;td&gt;光标移动至括号内开始或结束的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+T&lt;/td&gt;
&lt;td&gt;词互换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+U&lt;/td&gt;
&lt;td&gt;软撤销&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+P&lt;/td&gt;
&lt;td&gt;查找当前项目中的文件和快速搜索；输入@查找文件主标题/函数；或者输入:跳转到文件某行；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+R&lt;/td&gt;
&lt;td&gt;快速列出/跳转到某个函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+KBackspace&lt;/td&gt;
&lt;td&gt;从光标处删除至行首&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+KB&lt;/td&gt;
&lt;td&gt;开启/关闭侧边栏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+KK&lt;/td&gt;
&lt;td&gt;从光标处删除至行尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+KT&lt;/td&gt;
&lt;td&gt;折叠属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+KU&lt;/td&gt;
&lt;td&gt;改为大写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+KL&lt;/td&gt;
&lt;td&gt;改为小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+K0&lt;/td&gt;
&lt;td&gt;展开所有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Enter&lt;/td&gt;
&lt;td&gt;插入行后（快速换行）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Tab&lt;/td&gt;
&lt;td&gt;当前窗口中的标签页切换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+A&lt;/td&gt;
&lt;td&gt;选择光标位置父标签对儿&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+D&lt;/td&gt;
&lt;td&gt;复制光标所在整行，插入在该行之前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+shift+F&lt;/td&gt;
&lt;td&gt;在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+K&lt;/td&gt;
&lt;td&gt;删除整行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+L&lt;/td&gt;
&lt;td&gt;鼠标选中多行（按下快捷键），即可同时编辑这些行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+M&lt;/td&gt;
&lt;td&gt;选择括号内的内容（按住-继续选择父括号）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+P&lt;/td&gt;
&lt;td&gt;打开命令面板&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+/&lt;/td&gt;
&lt;td&gt;注释已选择内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+↑&lt;/td&gt;
&lt;td&gt;可以移动此行代码，与上行互换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+↓&lt;/td&gt;
&lt;td&gt;可以移动此行代码，与下行互换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+[&lt;/td&gt;
&lt;td&gt;折叠代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+]&lt;/td&gt;
&lt;td&gt;展开代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+Enter&lt;/td&gt;
&lt;td&gt;光标前插入行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+PageDown、Ctrl+PageUp&lt;/td&gt;
&lt;td&gt;文件按开启的前后顺序切换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Z&lt;/td&gt;
&lt;td&gt;撤销&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Y&lt;/td&gt;
&lt;td&gt;恢复撤销&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+F2&lt;/td&gt;
&lt;td&gt;设置书签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+/&lt;/td&gt;
&lt;td&gt;注释整行（如已选择内容，同“Ctrl+Shift+/”效果）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+鼠标左键&lt;/td&gt;
&lt;td&gt;可以同时选择要编辑的多处文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift+鼠标右键（或使用鼠标中键）&lt;/td&gt;
&lt;td&gt;可以用鼠标进行竖向多行选择&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift+F2&lt;/td&gt;
&lt;td&gt;上一个书签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift+Tab&lt;/td&gt;
&lt;td&gt;去除缩进&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt+Shift+1~9（非小键盘）&lt;/td&gt;
&lt;td&gt;屏幕显示相等数字的小窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt+.&lt;/td&gt;
&lt;td&gt;闭合当前标签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt+F3&lt;/td&gt;
&lt;td&gt;选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tab&lt;/td&gt;
&lt;td&gt;缩进,自动完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F2&lt;/td&gt;
&lt;td&gt;下一个书签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F6&lt;/td&gt;
&lt;td&gt;检测语法错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F9&lt;/td&gt;
&lt;td&gt;行排序(按a-z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F11&lt;/td&gt;
&lt;td&gt;全屏模式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Sublime Text 是一个代码编辑器（Sublime Text 2是收费软件，但可以无限期试用），也是HTML和散文先进的文本编辑器。Sublime Text是由程序员Jon Skinner于2008年1月份所开发出来，它最初被设计为一个具有丰富扩展功能的Vim。&lt;/p&gt;
&lt;p&gt;笔者整理了一些使用快捷方式，以及一些常用插件，分享一下。&lt;/p&gt;
    
    </summary>
    
      <category term="talk" scheme="http://charsdavy.github.io/categories/talk/"/>
    
    
      <category term="工具" scheme="http://charsdavy.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>想说说文章版权</title>
    <link href="http://charsdavy.github.io/2017/03/29/article-copyright/"/>
    <id>http://charsdavy.github.io/2017/03/29/article-copyright/</id>
    <published>2017-03-29T06:04:50.000Z</published>
    <updated>2017-03-31T13:37:53.000Z</updated>
    
    <content type="html">&lt;p&gt;文章版权，这个词汇以前笔者以前是不怎么有体会的，认为在当今互联网的时代，随便网上Google一下很多地方的文章如出一辙，而作者也是千奇百怪，甚至都不清楚谁才是作者。这篇文章，笔者是遇见了真实的事件，现在很想说一说，看看大家是否也是一样，认为一个版权意识高的视界里，资源与时间都是高效的。不用在看一条，两条都是一样的，浪费时间和资源。&lt;/p&gt;
&lt;p&gt;不知道是否有人明白什么叫“版权”。说实在的，笔者并不是很清楚它的定义。这里引入百科的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;版权（copyright）是用来表述创作者因其文学和艺术作品而享有的权利的一个法律用语。&lt;/p&gt;
&lt;p&gt;版权是对计算机程序、文学著作、音乐作品、照片、电影等的复制权利的合法所有权。除非转让给另一方，版权通常被认为是属于作者的。大多数计算机程序不仅受到版权的保护，还受软件许可证的保护。版权只保护思想的表达形式，而不保护思想本身。算法、数学方法、技术或机器的设计均不在版权的保护之列。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这个是属于法律领域了，只不过在天朝，大家都不认为这是事儿。不过现在好了，慢慢的付费阅读，付费视频等等开始流行，这样大家虽然花了米米，不过质量却是有了保证。&lt;/p&gt;
&lt;p&gt;说回这篇文章的初衷，就是在这两天，笔者遇到了自己博客网站的文章别他人拿去分享，并攫取了利益。更巧的是，被笔者知道了。曾经在知乎一个问答里看见，关于招聘，面试官会直接pass掉那些抄袭他们文章的应聘者。看到之后笔者将自己转载，并备注了“转载”二字的文章删除干净。不错，或许笔者没有从中获利，不过确实有些文章是没有联系到作者的，虽然给了原链接，可是确实吸引了眼球。&lt;/p&gt;
&lt;p&gt;现在，保证文章都是原创，无论深浅文雅如何，总归是自己的作品。相反，在不断撰写过程中，会发现很多自身的漏洞。网络已经很发达了，大家都能在网上找到自己需要的文章，干嘛还要做搬运工呢，笔者认为，高手应该转载于无形，即看懂原文加上自己的思考，想必比简单的复制拷贝要有价值得多。&lt;/p&gt;
&lt;p&gt;笔者之前在一个“同行说”的平台分享自己的文章，后来转行了，渐渐时间少了，也就远离了一段时间的撰文。现在，又要安利大家了，这款&lt;a href=&quot;https://toutiao.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;开发者头条&lt;/a&gt;，内容不错，文章也很是有质量，笔者使用pocket已经收藏了不少好文。不过，这篇文章的始因也是源于此平台。平台有激励作者自荐的机制，积分商城应该算得上为数不多的几家良心公司。为此，笔者有空会创作原创，因为这样才能登上文章精选的列表。&lt;/p&gt;
&lt;p&gt;可是，不得不说的一点是，平台没有很好的原创保护机制。笔者作为一个技术人员。看到几点问题：&lt;/p&gt;
&lt;p&gt;1.平台有精选文章缓存。这样的后果就是，即使作者发现了自己文章的错误，修改之后还是不能同步到精选文章列表。&lt;/p&gt;
&lt;p&gt;2.对于原创和非原创没有好的保护与甄别，除非巧合遇到像笔者这样的情况，且还是个较真的人。&lt;/p&gt;
&lt;p&gt;3.软件聊天体验有待提高。emoji发送太麻烦，iOS平台必须依赖系统键盘的发送。Android端没有用过不清楚。&lt;/p&gt;
&lt;p&gt;第一个问题，笔者建议可以使用定时机制，一段时间检测分享链接的内容，这样也能很好的保护原创。当原创作者发现自己的文章被他人肆意分享，只需改变文章地址即可令其失效。这样也就不存在原创甄别问题了。还保证了文章内容的同步。&lt;/p&gt;
&lt;p&gt;第二个问题，技术不是问题，关键是否会为这个的细节付出时间。&lt;/p&gt;
&lt;p&gt;不过，笔者自己也想过使用什么方式能够避免这样的问题，URL混淆？反爬虫？不知道是否可行。不过迫于无奈，现在笔者的文章顶部都加了一条申明。其实就是小偷和锁的问题，是否有效只取决于剽窃者。&lt;/p&gt;
&lt;p&gt;最后，很感谢平台的及时沟通和处理，为笔者补回了损失。不过，却便宜了剽窃者。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;文章版权，这个词汇以前笔者以前是不怎么有体会的，认为在当今互联网的时代，随便网上Google一下很多地方的文章如出一辙，而作者也是千奇百怪，甚至都不清楚谁才是作者。这篇文章，笔者是遇见了真实的事件，现在很想说一说，看看大家是否也是一样，认为一个版权意识高的视界里，资源与时间都是高效的。不用在看一条，两条都是一样的，浪费时间和资源。&lt;/p&gt;
&lt;p&gt;不知道是否有人明白什么叫“版权”。说实在的，笔者并不是很清楚它的定义。这里引入百科的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;版权（copyright）是用来表述创作者因其文学和艺术作品而享有的权利的一个法律用语。&lt;/p&gt;
&lt;p&gt;版权是对计算机程序、文学著作、音乐作品、照片、电影等的复制权利的合法所有权。除非转让给另一方，版权通常被认为是属于作者的。大多数计算机程序不仅受到版权的保护，还受软件许可证的保护。版权只保护思想的表达形式，而不保护思想本身。算法、数学方法、技术或机器的设计均不在版权的保护之列。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="talk" scheme="http://charsdavy.github.io/categories/talk/"/>
    
    
      <category term="碎碎念" scheme="http://charsdavy.github.io/tags/text/"/>
    
  </entry>
  
  <entry>
    <title>iOS的那些面试</title>
    <link href="http://charsdavy.github.io/2017/03/28/ios-interview/"/>
    <id>http://charsdavy.github.io/2017/03/28/ios-interview/</id>
    <published>2017-03-28T00:01:18.000Z</published>
    <updated>2017-03-31T13:37:53.000Z</updated>
    
    <content type="html">&lt;p&gt;笔试面试是程序员应聘绕不过的坎，想进大厂就一定要有知识储备量，而这个却是最佳的考察方式。笔者分享一些收集的iOS面试题，答案仅供参考，如有错误，还请指正。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;第一部分&quot;&gt;&lt;a href=&quot;#第一部分&quot; class=&quot;headerlink&quot; title=&quot;第一部分&quot;&gt;&lt;/a&gt;第一部分&lt;/h2&gt;&lt;p&gt;1.Objective-C语言的基本特点？&lt;/p&gt;
&lt;p&gt;Objective-C语言是C语言的一个超集，只是在C的基础之上添加了面向对象（OO）的特性；Objective-C与Java语言相同都是单继承，这一点与C++语言不同（多重继承），这一点可以参看之前有关讲解继承的文章；Objective-C不支持命名空间，取而代之的是在类名之前添加前缀，以此来区分。&lt;/p&gt;
&lt;p&gt;2.#include与#import的区别，#import与@class的区别？&lt;/p&gt;
&lt;p&gt;1）#include和#import效果相同，只是后者不会引起交叉编译，确保头文件只会被导入一次。&lt;/p&gt;
&lt;p&gt;2）#import会包含这个类的所有信息，包括实体变量和方法，而@class只是告诉编译器，其后面声明的名称是类的名称，至于这些类是如何定义的，暂时不用考虑，后面会再告诉你。使用#import编译效率高，防止相互包含的编译错误。&lt;/p&gt;
&lt;p&gt;3.简述类目优缺点，如果覆盖本类或者父类的方法会出现什么问题？&lt;/p&gt;
&lt;p&gt;优点：不需要通过增加子类而增加现有类的行为（方法），且类目中的方法与原始类方法基本没有区别。&lt;/p&gt;
&lt;p&gt;缺点：无法向类目添加实例变量。覆盖原始类方法后，原始类的方法没办法调用。&lt;/p&gt;
&lt;p&gt;4.简述内存管理基本原则？&lt;/p&gt;
&lt;p&gt;如果使用alloc、copy（mutableCopy）或者retain一个对象时，你就有义务向它发送一条release或autorelease消息。其他方法创建的对象，不需要由你来管理内存。&lt;/p&gt;
&lt;p&gt;5.什么是ARC技术？与GC是否相同？&lt;/p&gt;
&lt;p&gt;ARC是Automatic Reference Counting的简称，我们称之为自动引用计数，是iOS5.0之后推出的内存管理的新特性。本质上还是使用引用计数来管理对象，只是我们在编写代码时，不需要向对象发送release或autorelease方法，也不可以调用dealloc方法，编译器会在合适的位置自动给用户生成release（autorelease）消息。GC是Garbage Collection，内存垃圾回收机制，ARC比GC性能好。&lt;/p&gt;
&lt;p&gt;6.iOS中是否支持垃圾回收机制？&lt;/p&gt;
&lt;p&gt;iOS开发只支持MRC与ARC，Mac开发支持GC垃圾回收机制，10.8之后弃用了GC，推荐使用ARC。&lt;/p&gt;
&lt;p&gt;7.深、浅复制的基本概念以及区别？&lt;/p&gt;
&lt;p&gt;浅复制：只复制对象本身，不对里面的属性复制。&lt;/p&gt;
&lt;p&gt;深复制：不仅复制对象本身，对象持有的属性对象也做复制。&lt;/p&gt;
&lt;p&gt;8.内存中的堆区和栈区的差别？&lt;/p&gt;
&lt;p&gt;栈区（stack）由编译器自动分配释放，存放方法（函数）的参数值，局部变量的值等。&lt;/p&gt;
&lt;p&gt;堆区（heap）一般由程序员分配与释放，若程序员不释放，则会内存溢出。&lt;/p&gt;
&lt;p&gt;9.用户自定义了一个对象，如何实现拷贝（可变和不可变拷贝）？&lt;/p&gt;
&lt;p&gt;必须实现copying和mutableCopying协议，表示返回一个不可变和可变的对象。否则，程序将会出现异常。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-(id)copyWithZone:(NSZone *)zone &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Person *person = [[self Class] allocWithZone:zone];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	person-&amp;gt;age = self.age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	person-&amp;gt;name = self.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return person;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(id)mutableCopyWithZone:(NSZone *)zone;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;10.定义属性时，什么时候用assign、retain、copy和nonatomic？&lt;/p&gt;
&lt;p&gt;assign：普通赋值，一般常用于基本数据类型，常见委托设计模式，以此来防止循环引用。&lt;/p&gt;
&lt;p&gt;retain：保留计数，获得了对象的所有权。引用计数在原有基础上加1。&lt;/p&gt;
&lt;p&gt;copy：用来复制对象，一般字符串使用，Foundation中的不可变对象使用，效果相当于retain，只是引用计数加1。&lt;/p&gt;
&lt;p&gt;nonatomic：非原子性访问，不加同步，多线程并发访问会提高性能。&lt;/p&gt;
&lt;p&gt;11.strong和weak，_unsafe_unretained与weak的区别？&lt;/p&gt;
&lt;p&gt;strong：强引用，在ARC中告诉编译器帮助我们自动插入retain。&lt;/p&gt;
&lt;p&gt;weak：弱引用，是普通赋值，相当于手动管理内存的assign。&lt;/p&gt;
&lt;p&gt;_unsafe_unretained：与weak功能一致，区别在于当指向的对象销毁后，weak会将变量置为nil，防止调用野指针。&lt;/p&gt;
&lt;p&gt;12.ARC存在内存泄露吗？&lt;/p&gt;
&lt;p&gt;ARC中如果内存管理不当的话，同样会存在内存泄露。例如，ARC中也会循环引用导致内存泄露；Objective-C对象与CoreFoundation类之间桥接时，管理不当也会产生内存泄露。&lt;/p&gt;
&lt;p&gt;13.当我们释放对象时，为什么需要调用[super dealloc]方法？&lt;/p&gt;
&lt;p&gt;子类是继承自父类，那么子类中有一些实例变量（对象），是继承自父类的，因此，我们需要调用父类方法，将父类所拥有的实例进行释放。&lt;/p&gt;
&lt;p&gt;14.自动释放池是什么，如何工作？&lt;/p&gt;
&lt;p&gt;自动释放池是NSAutorelease类的一个实例，当向一个对象发送autorelease消息时，该对象会自动入池，待池销毁时，将会向池中所有对象发送一条release消息，释放对象。&lt;/p&gt;
&lt;p&gt;15.为什么delegate（代理）属性都是assign而不是retain的？&lt;/p&gt;
&lt;p&gt;防止循环引用，以至对象无法得到正确的释放。&lt;/p&gt;
&lt;h2 id=&quot;第二部分&quot;&gt;&lt;a href=&quot;#第二部分&quot; class=&quot;headerlink&quot; title=&quot;第二部分&quot;&gt;&lt;/a&gt;第二部分&lt;/h2&gt;&lt;p&gt;1.iOS开发中数据持久性有哪几种？&lt;/p&gt;
&lt;p&gt;plist文件写入，对象归档，sqlite3数据库，CoreData。&lt;/p&gt;
&lt;p&gt;2.什么是KVC和KVO？它们之间的关系是什么？&lt;/p&gt;
&lt;p&gt;KVC：键值编码，是一种间接访问对象实例变量的机制，该机制可以不通过存取方法就可以访问对象的实例变量。&lt;/p&gt;
&lt;p&gt;KVO：键值观察，是一种能使得对象获取到其他对象属性变化的通知机制。&lt;br&gt;实现KVO键值观察模式，被观察的对象必须使用KVC键值编码来修改它的实例变量，这样才能被观察者观察到。因此，KVC是KVO的基础或者说KVO的实现是建立在KVC的基础之上的。&lt;/p&gt;
&lt;p&gt;3.简述常见的设计模式？&lt;/p&gt;
&lt;p&gt;单例模式、代理设计、观察者（通知）、工厂方法、模板方法。&lt;/p&gt;
&lt;p&gt;4.内存管理在dealloc方法中用release方法与self.xx=nil哪个好？&lt;/p&gt;
&lt;p&gt;使用self.xx=nil更好，因为先调用了release方法，而且还将变量设置为nil，这样就更安全的释放对象，防止野指针调用。&lt;/p&gt;
&lt;p&gt;5.线程与进程的区别和联系？&lt;/p&gt;
&lt;p&gt;一般的应用程序是单个进程，也有多进程（Chrome），进程是个静态的容器，里面容纳了很多个线程，线程是一系列方法的线性执行路径。&lt;/p&gt;
&lt;p&gt;6.Objective-C语言的优缺点？&lt;/p&gt;
&lt;p&gt;优点：类目、动态识别、支持C语言、Objective-C与C++可以混编。&lt;/p&gt;
&lt;p&gt;缺点：不支持命名空间、不支持运算符重载、不支持多重继承。&lt;/p&gt;
&lt;p&gt;7.代理delegate、通知Notification与block的使用区别？&lt;/p&gt;
&lt;p&gt;delegate和block一般是用于两个对象一对一之间的通信交互，delegate需要定义协议方法，代理对象实现协议方法，并且需要建立代理关系才可以实现通信。block更加简洁，不需要定义繁琐的协议方法，但是如果通信事件比较多的话，建议使用delegate。&lt;br&gt;Notification主要用于一对多情况下通信，而且，通信对象之间不需要建立关系，但是使用通知，代码可读性差。&lt;/p&gt;
&lt;p&gt;8.控制器ViewController的loadView、viewDidLoad、viewWillApear和viewDidUnload分别是在什么时候调用？&lt;/p&gt;
&lt;p&gt;loadView：当控制器的根视图view为空，且此view被访问时调用。&lt;/p&gt;
&lt;p&gt;viewDidLoad：loadView调用之后被调用。&lt;/p&gt;
&lt;p&gt;viewWillApear：当控制器根视图view被添加到父视图上时调用。&lt;/p&gt;
&lt;p&gt;viewDidUnload：iOS6.0之前，当内存警告时，先卸载视图，再调用&lt;br&gt;viewDidUnload来释放内存。&lt;/p&gt;
&lt;p&gt;9.@synthesize和@dynamic的区别？&lt;/p&gt;
&lt;p&gt;@synthesize：系统自动生成getter和setter属性声明。&lt;/p&gt;
&lt;p&gt;@dynamic：告诉编译器，属性的获取与赋值方法由用户自己实现，不自动生成。&lt;/p&gt;
&lt;p&gt;10.事件响应者链的概念？&lt;/p&gt;
&lt;p&gt;响应者链表示一系列的响应者对象。事件被交由第一响应者对象处理，如果第一响应者不处理，事件被沿着响应者链向上传递，交给下一个响应者。一般来说，第一响应者是个视图对象或者其子类对象，当其被触摸后事件交由它处理，如果它不处理，事件会被传递给它的视图控制器对象（如果存在），然后是它的父视图对象（如果存在），以此类推，直到顶层视图。接下来会沿着顶层视图到窗口（UIWindow对象），再到程序（UIApplication对象）。如果整个过程都没有响应这个事件，该事件被丢弃。一般情况下，在响应者链中只要有对象处理事件，事件就停止传递。但有时候可以在视图的响应方法中根据一些条件判断来决定是否需要继续传递事件。&lt;/p&gt;
&lt;p&gt;11.C语言中的static变量和static函数有什么作用？&lt;/p&gt;
&lt;p&gt;1）表示变量是静态存储变量，表示变量存放在静态存储区。&lt;/p&gt;
&lt;p&gt;2）加在函数前面的时候表示该函数是内部连接，只在本文件中有效，别的文件中不能使用该函数。&lt;/p&gt;
&lt;p&gt;12.指针题&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1）int a; //一个数值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2）int *a; //一个指向数值的指针。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3）int **a; //一个指向指针的指针。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4）int a[10]; //一个有10个指针的数组，该指针是指向一个整型数的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5）int *a[10]; //一个有10个指针的数组，该指针是指向一个整型数的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6）int (*a)[10]; //一个指向有10个整型数数组的指针。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7）int (*a)(int); //一个指向函数的指针，该函数有一个整型参数并返回一个整型数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8）int (*a[10])(int); //一个有10个指针的数组，该指针指向一个函数，该函数有一个整型参数并返回一个整型数。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;13.写一个NSString类的实现？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+(id)initWithCString:(const char *)nullTerminatedCString encoding:(NSStringEncoding)encoding &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	NSString *obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	obj = [self allocWithZone:NSDefaultMallocZone()];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	obj = [obj initWithCString:nullTerminatedCString encoding:encoding];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return autorelease(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;14.Objective-C与C如何混用？Objective-C与C++如何混用？&lt;/p&gt;
&lt;p&gt;实现文件的扩展名.m改成.mm即可，但cpp文件必须只能使用C/C++代码，而且cpp文件include的头文件中，也不能出现Objective-C的代码，因为cpp只能写C++的代码。&lt;/p&gt;
&lt;p&gt;15.Objective-C中有私有方法和私有变量吗？&lt;/p&gt;
&lt;p&gt;使用private修饰的全局变量是私有的变量。&lt;/p&gt;
&lt;p&gt;Objective-C在语法上没有设计私有的方法，不过可以通过延展在实现文件里定义方法作为私有的方法。但不是真正意义上的私有方法，也是可以调用的，只是外部不可见而已。&lt;/p&gt;
&lt;h2 id=&quot;第三部分&quot;&gt;&lt;a href=&quot;#第三部分&quot; class=&quot;headerlink&quot; title=&quot;第三部分&quot;&gt;&lt;/a&gt;第三部分&lt;/h2&gt;&lt;p&gt;1.下面关键字const有什么含义？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const int a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int const a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const int *a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int * const a;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;前两个的作用是一样的，a是一个常整型数。&lt;/p&gt;
&lt;p&gt;第三个意味着a是一个指向常整型数的指针（即整型数是不可修改的，但指针可以）。&lt;/p&gt;
&lt;p&gt;第四个意味着a是一个指向整型数的常指针（即指针指向的整型数是可以修改的，但指针是不可修改的）。&lt;/p&gt;
&lt;p&gt;2.C语言中extern的作用，extern “C”的作用？&lt;/p&gt;
&lt;p&gt;1）extern可以置于变量或者函数前，以标示变量或函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。&lt;/p&gt;
&lt;p&gt;2）C++语言在编译的时候为了解决函数的多态问题，会将函数名和参数联合起来生成一个中间的函数名称，而C语言则不会，因此会造成链接时找不到对应函数的情况，此时C函数就需要用extern “C”进行链接指定，这告诉编译器，请保持我的名称，不要给我生成用于链接的中间函数名。&lt;/p&gt;
&lt;p&gt;3.Objective-C是如何管理内存的？&lt;/p&gt;
&lt;p&gt;Objective-C语言是使用引用计数来管理一个对象的生命周期，当对象被其他“人”使用的时候引用计数加1，不使用时减1，当此对象的引用计数为0时，则对象被系统回收。&lt;/p&gt;
&lt;p&gt;4.什么是动态绑定（多态）？&lt;/p&gt;
&lt;p&gt;动态绑定是面向对象特性之一多态的体现，声明一个变量，在运行的时候可以绑定不同的对象，比如在方法的参数中声明这样一个变量UIView *view，运行的时候，我们可以根据不同的应用场景给view变量传入不同的对象，可以传递一个UIButton对象，也可以传入UIImageView对象。&lt;/p&gt;
&lt;p&gt;5.如何理解delegate？&lt;/p&gt;
&lt;p&gt;delegate，又称为委托或代理，它是一种设计模式。delegate主要用于两个对象之间的通信交互，并且解除两个通信对象的耦合性，iOS中大量使用了delegate设计，主要用于视图与使用对象之间的通信交互。&lt;/p&gt;
&lt;p&gt;6.block与函数有何异同？block有何优点？&lt;/p&gt;
&lt;p&gt;1）block类似于C里面的函数指针，都可以作为参数进行传递，用于回调。但是block的实现可以定义在方法中，函数则不可以。&lt;/p&gt;
&lt;p&gt;2）block语法简洁，可以在方法中定义实现，这样可以访问方法中的局部变量，使代码更加的紧凑，结构化。&lt;/p&gt;
&lt;p&gt;7.为什么标准头文件都有类似以下的结构？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#ifndef __INCvxWorksh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define __INCvxWorksh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifdef __cplusplus&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extern &amp;quot;C&amp;quot; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*...*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifdef __cplusplus&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif /*__INCvxWorksh*/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;显然，头文件中的编译宏“#ifndef &lt;strong&gt;INCvxWorksh、#define &lt;/strong&gt;INCvxWorksh、#endif”的作用是防止该头文件被重复引用。&lt;/p&gt;
&lt;p&gt;8.CocoaTouch框架？&lt;/p&gt;
&lt;p&gt;UIKit、Foundation、CoreGraphic、CoreAnimation&lt;/p&gt;
&lt;p&gt;1）音频和视频：Core Audio、OpenAL、Media Library、AV Foundation&lt;/p&gt;
&lt;p&gt;2）数据管理：Core Data、SQLite&lt;/p&gt;
&lt;p&gt;3）图形和动画：Core Animation、OpenGL ES、Quartz 2D、Core Graphic&lt;/p&gt;
&lt;p&gt;4）用户应用：Address Book、Core Location、Map Kit、Store Kit&lt;/p&gt;
&lt;p&gt;9.栈结构与队列的区别？&lt;/p&gt;
&lt;p&gt;栈（stack）：限定只能在表的一端进行插入和删除操作的线性表。&lt;/p&gt;
&lt;p&gt;队列（queue）：限定只能在表的一端插入和在另一端进行删除操作的线性表。&lt;/p&gt;
&lt;p&gt;1）队列先进先出，栈先进后出。&lt;/p&gt;
&lt;p&gt;2）对插入和删除操作的“限定”不同。&lt;/p&gt;
&lt;p&gt;3）遍历数据速度不同。队列遍历数据的速度要快得多。&lt;/p&gt;
&lt;p&gt;10.Objective-C中有无多重继承？如何实现多重继承？&lt;/p&gt;
&lt;p&gt;Objective-C是没有多重继承的。&lt;/p&gt;
&lt;p&gt;Cocoa中所有的类都是NSObject的子类，多继承在这里是用protocol委托代理来实现的。&lt;/p&gt;
&lt;p&gt;面向对象语言大部分都是单继承，例如：Java、C#。&lt;/p&gt;
&lt;p&gt;C++支持多继承。&lt;/p&gt;
&lt;p&gt;11.static全局变量与普通的全局变量的区别？局部变量呢？函数呢？&lt;/p&gt;
&lt;p&gt;1）static全局变量与普通全局变量的区别：static全局变量只初始化一次，防止在其他文件单元中被引用。&lt;/p&gt;
&lt;p&gt;2）static局部变量与普通局部变量的区别：static局部变量只被初始化一次，下一次依据上一次结果值。&lt;/p&gt;
&lt;p&gt;3）static函数与普通函数的区别：static函数在内存中只有一份，普通函数在每个被调用中维持一份拷贝。&lt;/p&gt;
&lt;p&gt;12.什么是类目与延展？&lt;/p&gt;
&lt;p&gt;类目：为已知的类增加新的方法。&lt;/p&gt;
&lt;p&gt;延展：通知在本类的定义里使用类目来声明私有方法。&lt;/p&gt;
&lt;p&gt;13.Objective-C中的协议和Java中的接口区别？&lt;/p&gt;
&lt;p&gt;协议定义的方法，可以设置可选实现和必须实现。&lt;/p&gt;
&lt;p&gt;接口则是必须全部实现。&lt;/p&gt;
&lt;p&gt;14.在一个对象的方法里self.name=”object”和name=”object”有什么不同？&lt;/p&gt;
&lt;p&gt;前者调用的是设置器方法，后者是普通赋值。&lt;/p&gt;
&lt;p&gt;15.单例设计模式的实现？为什么使用单例设计？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;static File *instance = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation File&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//获取单例的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+(id)shareInstance &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@synthesize (self) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if(instance == nil) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			instance = [[File alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//覆写allocWithZone、copyWithZone、retain、release和autorelease方法，目的是限制这个类只创建一个对象&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为什么使用单例设计？&lt;/p&gt;
&lt;p&gt;1）单例设计是用来限制一个类只能创建一个对象，那么此对象中的属性可以存储全局共享的数据，所有的类都可以访问、设置此单例对象中的属性数据。&lt;/p&gt;
&lt;p&gt;2）如果一个类创建的时候非常的耗费性能，那么此类如果能满足要求，可以设置为单例节约性能。&lt;/p&gt;
&lt;h2 id=&quot;第四部分&quot;&gt;&lt;a href=&quot;#第四部分&quot; class=&quot;headerlink&quot; title=&quot;第四部分&quot;&gt;&lt;/a&gt;第四部分&lt;/h2&gt;&lt;p&gt;1.层CALayer和UIView的区别是什么？&lt;/p&gt;
&lt;p&gt;两者最大的区别是，图层不会直接渲染到屏幕上。UIView是iOS系统中界面元素的基础，所有的界面元素都是继承自它，它本身是由CoreAnimation来实现的，它真正绘图的部分是由一个CALayer类来管理的。UIView本身更像是一个CALayer的管理器。一个UIView上可以有多个CALayer，每个CALayer显示一种东西，增强UIView的展现能力。&lt;/p&gt;
&lt;p&gt;2.什么是GCD？&lt;/p&gt;
&lt;p&gt;GCD是Apple开发的一个多核编程的较新的解决方法。在Mac OS X 10.6雪豹中首次推出，并引入到iOS4.0。GCD是一个替代诸如NSThread等技术的很高效和强大的技术。GCD完全可以处理诸如数据锁定和资源泄漏等复杂的异步编程问题。&lt;/p&gt;
&lt;p&gt;3.TCP/UDP的区别和联系？&lt;/p&gt;
&lt;p&gt;1）TCP的全称为传输控制协议，这种协议可以提供面向连接的、可靠的、点到点的通信。&lt;/p&gt;
&lt;p&gt;2）UDP的全称为用户数据报协议，它可以提供非连接的不可靠的点到多点的通信。&lt;/p&gt;
&lt;p&gt;3）用TCP还是UDP，需要看程序注重哪一个方面，需要可靠还是快速。&lt;/p&gt;
&lt;p&gt;4.Socket连接和Http连接的区别？&lt;/p&gt;
&lt;p&gt;Http连接：Http连接就是所谓的短链接，即客户端向服务器发送一次请求，服务器响应后连接即会断掉。&lt;/p&gt;
&lt;p&gt;Socket连接：Socket连接就是所谓的长连接，理论上客户端和服务器端一旦建立起连接将不会主动断掉。&lt;/p&gt;
&lt;p&gt;5.什么是TCP连接的三次握手？&lt;/p&gt;
&lt;p&gt;第一次握手：客户端发送SYN包（SYN=j）到服务器，并进入SYN_SEND状态，等待服务器确认。&lt;/p&gt;
&lt;p&gt;第二次握手：服务器收到SYN包，必须确认客户的SYN（ACK=j+1），同时自己也发送一个SYN包（SYN=k），即SYN+ACK包，此时服务器进入SYN_RECV状态。&lt;/p&gt;
&lt;p&gt;第三次握手：客户端接收到服务器的SYN+ACK包，向服务器发送确认包ACK（ACK=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。&lt;/p&gt;
&lt;p&gt;6.frame和bounds的区别？&lt;/p&gt;
&lt;p&gt;frame指的是：该view在父view坐标系统中的位置大小（参照点是父视图的坐标系统）。&lt;/p&gt;
&lt;p&gt;bounds指的是：该view在本身坐标系统中的位置和大小（参照点是本身的坐标系统）。&lt;/p&gt;
&lt;p&gt;7.如何理解MVC设计模式？&lt;/p&gt;
&lt;p&gt;MVC是一种架构设计，M表示数据模型，V表示视图，C表示控制器。&lt;/p&gt;
&lt;p&gt;数据模型：负责存储、定义、操作数据。&lt;/p&gt;
&lt;p&gt;视图：用来展示数据给用户，和用户进行操作交互。&lt;/p&gt;
&lt;p&gt;控制器：它是M与V的协调者，控制器获取数据，将数据交给视图去展示。&lt;/p&gt;
&lt;p&gt;8.控制器的xib是怎么加载的？&lt;/p&gt;
&lt;p&gt;当UIViewController的loadView被调用时，在此方法中，通过NSBundle加载xib，先通过控制器的类名作为xib的文件名加载此xib文件。如果找到此xib文件，则加载为view对象作为控制器的根视图，如果没有xib文件，则通过alloc创建一个view对象作为根视图。&lt;/p&gt;
&lt;p&gt;9.控制器如何处理系统内存不足警告？&lt;/p&gt;
&lt;p&gt;内存不足时，系统会调用控制器didReceiveMemoryWaring方法通知控制器内存不足。iOS6.0与6.0之前的处理方式不一样。&lt;/p&gt;
&lt;p&gt;1）iOS6.0之前：调用didReceiveMemoryWaring后，将self.view设置为nil，并且再调用viewDidUnload方法，在此方法中我们应该释放子视图。&lt;/p&gt;
&lt;p&gt;2）iOS6.0之后：调用didReceiveMemoryWaring后，不再调用viewDidUnload方法，则应该在didReceiveMemoryWaring方法中手动将self.view=nil，并且释放子视图。&lt;/p&gt;
&lt;p&gt;10.iOS中对象间有哪些通信方式？&lt;/p&gt;
&lt;p&gt;代理delegate、block、通知和KVO。&lt;/p&gt;
&lt;p&gt;11.block在内存管理上的特点？需要注意循环引用，如何解决循环引用？&lt;/p&gt;
&lt;p&gt;1）block中使用了局部对象，则会将此对象retain，引用了当前对象的属性或者方法，则会将当前对象retain。&lt;/p&gt;
&lt;p&gt;2）解决循环引用：将当前对象赋值给一个局部变量，并且使用__block关键字修饰该局部变量，使用该变量访问当前对象的属性和方法。&lt;/p&gt;
&lt;p&gt;12.Objective-C中有线程池（线程队列）吗？NSOperationQueue是如何管理线程的？&lt;/p&gt;
&lt;p&gt;NSOperationQueue是Objective-C的线程池，线程池中可以存放多个线程。&lt;/p&gt;
&lt;p&gt;NSOperationQueue可以管理线程的并发数，还可以管理线程间的优先级。&lt;/p&gt;
&lt;p&gt;13.timer的间隔周期准吗？为什么？怎样实现一个精准的timer？&lt;/p&gt;
&lt;p&gt;定时器timer一般都是准确的，但是当主线程有些时候难免会出现堵塞情况，这样就有可能导致定时器timer会延迟从而不准确。我们可以开发一个多线程，在此多线程上运行定时器，这样多线程只运行定时器，不会因堵塞而导致误差。&lt;/p&gt;
&lt;p&gt;14.Http协议的特点？GET与POST的区别？什么是Https协议？&lt;/p&gt;
&lt;p&gt;1）Http协议是短链接，都是客户端主动发送请求，服务器做出响应，服务器响应之后，连接则断开。&lt;/p&gt;
&lt;p&gt;2）GET请求没有请求体，POST含有请求体，请求参数可以放入请求体中，所以，POST可以提交大量的数据给服务器，更加安全。&lt;/p&gt;
&lt;p&gt;3）HTTPS（Secure Hypertext Transfer Protocol）安全超文本传输协议，它是一个安全通信通道，它基于HTTP开发，用于在客户计算机和服务器之间交换信息。它使用安全套接字层（SSL）进行信息交换，简单来说它是HTTP的安全版。&lt;/p&gt;
&lt;p&gt;15.XML数据的解析方式各有什么不同？JSON解析有哪些框架？&lt;/p&gt;
&lt;p&gt;XML数据解析有两种方式：DOM解析和SAX解析。&lt;/p&gt;
&lt;p&gt;DOM解析：必须完成DOM树的构造，在处理规模较大的XML文档时就很耗费内存，占用资源较多。&lt;/p&gt;
&lt;p&gt;SAX解析：与DOM不同的是，SAX是用事件驱动模型，解析XML文档时每遇到一个开始或者结束标签、属性或一条指令时，程序就产生一个事件来进行相应的处理。因此，SAX相对于DOM来说更适合操作大的XML文档。&lt;/p&gt;
&lt;p&gt;JSON解析：现在性能比较好的主要是第三方的JSONKit和iOS自带的JSON解析类，自带的JSON解析性能是最高的，但是只能是iOS5之后才可以使用。&lt;/p&gt;
&lt;h2 id=&quot;第五部分&quot;&gt;&lt;a href=&quot;#第五部分&quot; class=&quot;headerlink&quot; title=&quot;第五部分&quot;&gt;&lt;/a&gt;第五部分&lt;/h2&gt;&lt;p&gt;1.tableView是如何复用的？&lt;/p&gt;
&lt;p&gt;如果屏幕上能显示10个单元格，则tableView只会创建11个单元格，也就是n+1，当滑到第12个单元格时就会复用第1个单元格对象。tableView中有个单元格池的概念，tableView调用协议方法获取单元格时，先从池子中查找是否有可复用的单元格，如果有则复用，如果没有则创建一个单元格对象。&lt;/p&gt;
&lt;p&gt;2.如何优化tableView的滑动速度？&lt;/p&gt;
&lt;p&gt;1）复用单元格。&lt;/p&gt;
&lt;p&gt;2）使用不透明的视图，单元格中尽量少使用动画。&lt;/p&gt;
&lt;p&gt;3）图片加载使用异步加载，并且设置图片加载的并发数。&lt;/p&gt;
&lt;p&gt;4）滑动时不加载图片，停止滑动开始加载。&lt;/p&gt;
&lt;p&gt;5）文字、图片可直接drawInRect绘制。&lt;/p&gt;
&lt;p&gt;6）如非必要，减少reloadData全部cell，只reloadRowsAtIndexPaths。&lt;/p&gt;
&lt;p&gt;7）如果cell是动态行高度，计算出高度后缓存。&lt;/p&gt;
&lt;p&gt;8）cell高度固定的话直接用cell.rowHeight设置高度。&lt;/p&gt;
&lt;p&gt;3.谈谈对Runloop的理解？&lt;/p&gt;
&lt;p&gt;Run loops是线程相关的基础框架的一部分。一个run loop就是一个事件处理的循环，用来不停的调度工作以及处理输入事件。使用run loop的目的是让你的线程在有工作的时候忙于工作，而没有工作的时候处于休眠状态。&lt;/p&gt;
&lt;p&gt;4.如何调用drawRect方法与layoutSubView方法？这两个方法的作用？&lt;/p&gt;
&lt;p&gt;通过setNeedsLayout方法异步调用layoutSubView方法。&lt;/p&gt;
&lt;p&gt;通过setNeedsDisplay方法异步调用drawRect方法。&lt;br&gt;drawRect方法用于绘图，layoutSubView方法用于布局子视图。&lt;/p&gt;
&lt;p&gt;5.UIView与UIViewController的关系？&lt;/p&gt;
&lt;p&gt;每个控制器都有一个根视图，控制器UIViewController用来管理此视图的加载和显示。&lt;/p&gt;
&lt;p&gt;6.iOS中有哪些手势？&lt;/p&gt;
&lt;p&gt;轻击、捏合、平移、轻扫、旋转和长按。&lt;/p&gt;
&lt;p&gt;7.Http和Socket的区别？&lt;/p&gt;
&lt;p&gt;Http是客户端用Http协议进行请求，发送请求时需要封装http请求头，并绑定请求的数据，服务器一般有Web服务器配合（当然也非绝对）。Http请求方式为客户端主动发起请求，服务器才能给响应，一次请求完毕后则断开连接，以节省资源。服务器不能主动给客户端响应（除非采用http长连接技术）。iPhone主要使用的类是NSURLConnection。&lt;/p&gt;
&lt;p&gt;Socket是客户端跟服务器直接使用Socket套接字进行连接，并没有规定连接后断开，所以客户端和服务器可以保持连接通道，双方都可以主动发送数据。一般在游戏开发或股票开发，这种要求即时性很强并且保持发送数据量比较大的场合使用。主要使用的类是CFSocketRef。&lt;/p&gt;
&lt;p&gt;8.storyboard有什么特点？&lt;/p&gt;
&lt;p&gt;storyboard是iOS5新增的特性，是对xib的升级版本，引入了一个容器用于管理多个xib文件，和它们之间的跳转交互。&lt;/p&gt;
&lt;p&gt;优点：不用再为每个控制器创建xib文件；可以使用静态cell，当cell固定且不多时，使用起来比较方便。&lt;/p&gt;
&lt;p&gt;缺点：storyboard单个文件，不利于团队协作开发。&lt;/p&gt;
&lt;p&gt;9.如何打包静态库？&lt;/p&gt;
&lt;p&gt;新建一个Framework&amp;amp;Library的项目，编译的时候会将项目中的代码文件打包成一个.a静态库文件。&lt;/p&gt;
&lt;p&gt;10.APP发布的上架流程？&lt;/p&gt;
&lt;p&gt;1）在苹果官网的开发者中心，新建一个APP，填写此APP相关的一些描述信息。&lt;/p&gt;
&lt;p&gt;2）下载安装发布证书。&lt;/p&gt;
&lt;p&gt;3）选择发布证书，使用Archive编译发布包。&lt;/p&gt;
&lt;p&gt;4）使用Xcode提交发布包。&lt;/p&gt;
&lt;p&gt;11.iOS5有哪些新特性？&lt;/p&gt;
&lt;p&gt;iCloud、定制UI、storyboard、ARC、CoreImage滤镜、新增JSON解析类。&lt;/p&gt;
&lt;p&gt;12.iOS6有哪些新特性？&lt;/p&gt;
&lt;p&gt;UIRefreshControl水滴效果下拉刷新、UICollectionView控件的使用、SLComposeViewController新浪微博控件、PassKit中Passbook、AutoLayout自动布局。&lt;/p&gt;
&lt;p&gt;13、iOS7有哪些新特性？&lt;/p&gt;
&lt;p&gt;系统：全新的UI设计与交互；Control Center控制中心；全新的多任务Multitasking；AirDrop共享文件；全新的Safari浏览器交互式体验。&lt;/p&gt;
&lt;p&gt;SDK：动态UIKit，新增了UIDynamicItem委托，用来为UIView制定动态行为；新增游戏引擎Sprite Kit Framework框架，类似于Cocos2D。&lt;/p&gt;
&lt;p&gt;14.ARC有什么特点？&lt;/p&gt;
&lt;p&gt;ARC是编译器特性，iOS5.0新添加的特性，使用ARC开发者不需要再retain、release、autorelease，因为编译器会在合适的地方自动插入retain、release。&lt;/p&gt;
&lt;p&gt;ARC不会因少release而导致内存泄漏，过度使用release导致程序崩溃，&lt;/p&gt;
&lt;p&gt;ARC可以产生更简洁的代码和更健壮的应用。&lt;/p&gt;
&lt;p&gt;15.SVN、Git协作开发，怎么防止代码文件冲突？&lt;/p&gt;
&lt;p&gt;防止代码冲突：不要多人同时修改同一个文件。例如，A、B都修改同一个文件，先让A修改，然后提交到服务器，然后B更新下来，再进行修改。&lt;br&gt;服务器上的项目文件xcodeproj，仅让一个人管理提交，其他人只更新。防止此文件产生冲突。&lt;/p&gt;
&lt;h2 id=&quot;第六部分&quot;&gt;&lt;a href=&quot;#第六部分&quot; class=&quot;headerlink&quot; title=&quot;第六部分&quot;&gt;&lt;/a&gt;第六部分&lt;/h2&gt;&lt;p&gt;1.什么是ARC？&lt;/p&gt;
&lt;p&gt;ARC是automatic reference counting自动引用计数，在程序编译时自动加入retain/release。在对象被创建时retain count+1，在对象被release时count-1，当count=0时，销毁对象。程序中加入autoreleasepool对象会由系统自动加上autorelease方法，如果该对象引用计数为0，则销毁。那么ARC是为了解决MRC手动管理内存存在的一些而诞生的。&lt;/p&gt;
&lt;p&gt;MRC下内存管理的缺点：&lt;/p&gt;
&lt;p&gt;1）释放一个堆内存时，首先要确定指向这个堆空间的指针都被release了。(避免提前释放)&lt;/p&gt;
&lt;p&gt;2）释放指针指向的堆空间，首先要确定哪些指向同一个堆，这些指针只能释放一次。(避免释放多次，造成内存泄露)&lt;/p&gt;
&lt;p&gt;3）模块化操作时，对象可能被多个模块创建和使用，不能确定最后由谁释放。&lt;/p&gt;
&lt;p&gt;4）多线程操作时，不确定哪个线程最后使用完毕。&lt;br&gt;虽然ARC给我们编程带来的很多好多，但也可能出现内存泄露。如下面两种情况：&lt;/p&gt;
&lt;p&gt;1）循环参照：A有个属性参照B，B有个属性参照A，如果都是strong参照的话，两个对象都无法释放。&lt;/p&gt;
&lt;p&gt;2）死循环：如果有个ViewController中有无限循环，也会导致即使ViewController对应的view消失了，ViewController也不能释放。&lt;/p&gt;
&lt;p&gt;2.block一般用哪个关键字修饰，为什么？&lt;/p&gt;
&lt;p&gt;block一般使用copy关键之进行修饰，block使用copy是从MRC遗留下来的“传统”，在MRC中，方法内容的block是在栈区的，使用copy可以把它放到堆区。但在ARC中写不写都行：编译器自动对block进行了copy操作。&lt;/p&gt;
&lt;p&gt;3.用@property声明的NSString（或NSArray，NSDictionary）经常&lt;/p&gt;
&lt;p&gt;使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？&lt;br&gt;用@property声明 NSString、NSArray、NSDictionary 经常使用copy关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，他们之间可能进行赋值操作，为确保对象中的字符串值不会无意间变动，应该在设置新属性值时拷贝一份。&lt;/p&gt;
&lt;p&gt;如果我们使用是strong,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性。&lt;/p&gt;
&lt;p&gt;copy此特质所表达的所属关系与strong类似。然而设置方法并不保留新值，而是将其“拷贝” (copy)。 当属性类型为NSString时，经常用此特质来保护其封装性，因为传递给设置方法的新值有可能指向一个NSMutableString类的实例。这个类是NSString的子类，表示一种可修改其值的字符串，此时若是不拷贝字符串，那么设置完属性之后，字符串的值就可能会在对象不知情的情况下遭人更改。所以，这时就要拷贝一份“不可变” (immutable)的字符串，确保对象中的字符串值不会无意间变动。只要实现属性所用的对象是“可变的” (mutable)，就应该在设置新属性值时拷贝一份。&lt;/p&gt;
&lt;p&gt;4.runloop、autorelease pool以及线程之间的关系？&lt;/p&gt;
&lt;p&gt;每个线程(包含主线程)都有一个Runloop。对于每一个Runloop，系统会隐式创建一个Autorelease pool，这样所有的release pool会构成一个像callstack一样的一个栈式结构，在每一个Runloop结束时，当前栈顶的Autorelease pool会被销毁，这样这个pool里的每个Object会被release。&lt;/p&gt;
&lt;p&gt;5.@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的？&lt;/p&gt;
&lt;p&gt;“属性”(property)有两大概念：ivar(实例变量)、存取方法(access method=getter)，即@property = ivar + getter + setter。&lt;br&gt;例如下面的这个类：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface WBTextView :UITextView  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic,copy)NSString *placehold;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic,copy)UIColor *placeholdColor;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;类完成属性的定以后，编译器会自动编写访问这些属性的方法(自动合成autosynthesis)，上述代码写出来的类等效与下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface WBTextView :UITextView  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSString *)placehold;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)setPlacehold:(NSString *)placehold;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(UIColor *)placeholdColor;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)setPlaceholdColor:(UIColor *)placeholdColor;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;详细介绍见：&lt;a href=&quot;http://blog.csdn.net/jasonjwl/article/details/49427377&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/jasonjwl/article/details/49427377&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6.分别写一个setter方法用于完成&lt;code&gt;@property (nonatomic,retain)NSString *name&lt;/code&gt;和&lt;code&gt;@property (nonatomic,copy) NSString *name&lt;/code&gt;？&lt;/p&gt;
&lt;p&gt;retain属性的setter方法是保留新值并释放旧值，然后更新实例变量，令其指向新值。顺序很重要。假如还未保留新值就先把旧值释放了，而且两个值又指向同一个对象，先执行的release操作就可能导致系统将此对象永久回收。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-(void)setName:(NSString *)name&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [name retain];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_name release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)setName:(NSString *)name&amp;#123;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_name release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _name = [name copy];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;7.说说assign和weak，_block和 _weak的区别？&lt;/p&gt;
&lt;p&gt;assign适用于基本数据类型，weak是适用于NSObject对象，并且是一个弱引用。&lt;/p&gt;
&lt;p&gt;assign其实也可以用来修饰对象，那么为什么不用它呢？因为被assign修饰的对象在释放之后，指针的地址还是存在的，也就是说指针并没有被置为nil。如果在后续内存分配中，刚巧分到了这块地址，程序就会崩溃掉。而weak修饰的对象在释放之后，指针地址会被置为nil。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_block&lt;/code&gt;是用来修饰一个变量，这个变量就可以在block中被修改。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_block&lt;/code&gt;:使用_block修饰的变量在block代码块中会被retain(ARC下，MRC下不会retain)。&lt;/p&gt;
&lt;p&gt;_weak:使用_weak修饰的变量不会在block代码块中被retain。&lt;/p&gt;
&lt;p&gt;8.请说出下面代码是否有问题，如果有问题请修改？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@autoreleasepool &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (int i=0; i&amp;lt;largeNumber; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Person *per = [[Person alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [per autorelease];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;内存管理的原则：如果对一个对象使用了alloc、copy、retain，那么你必须使用相应的release或者autorelease。咋一看，这道题目有alloc，也有autorelease，两者对应起来，应该没问题。但autorelease虽然会使引用计数减一，但是它并不是立即减一，它的本质功能只是把对象放到离他最近的自动释放池里。当自动释放池销毁了，才会向自动释放池中的每一个对象发送release消息。这道题的问题就在autorelease。因为largeNumber是一个很大的数，autorelease又不能使引用计数立即减一，所以在循环结束前会造成内存溢出的问题。&lt;/p&gt;
&lt;p&gt;解决方案如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@autoreleasepool &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (int i=0; i&amp;lt;100000; i++) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @autoreleasepool &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Person *per = [[Person alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [per autorelease];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在循环内部再加一个自动释放池，这样就能保证每创建一个对象就能及时释放。&lt;/p&gt;
&lt;p&gt;9.请问下面代码是否有问题，如有问题请修改？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@autoreleasepool &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSString *str = [[NSString alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [str retain];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [str retain];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        str = @&amp;quot;jxl&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [str release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [str release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [str release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这道题跟第8题一样存在内存泄露问题，&lt;/p&gt;
&lt;p&gt;1）内存泄露 ；&lt;/p&gt;
&lt;p&gt;2）指向常量区的对象不能release。&lt;/p&gt;
&lt;p&gt;指针变量str原本指向一块开辟的堆区空间，但是经过重新给str赋值，str的指向发生了变化，由原来指向堆区空间，到指向常量区。常量区的变量根本不需要释放，这就导致了原来开辟的堆区空间没有释放，造成内存泄露。&lt;/p&gt;
&lt;p&gt;10.什么情况下使用weak关键字，相比assign有什么不同？什么情况使用weak关键字？&lt;/p&gt;
&lt;p&gt;1）在ARC中，在有可能出现循环引用的时候，往往要通过让其中一端使用weak来解决。比如delegate代理。&lt;/p&gt;
&lt;p&gt;2）自身已经对它进行一次强引用，没有必要再强引用一次，此时也会使用weak，自定义控件属性一般也使用weak。&lt;/p&gt;
&lt;p&gt;不同点：&lt;/p&gt;
&lt;p&gt;1）weak此特性表明该属性定义了一种“非拥有关系”。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特性与assign一样，然而在属性所指的对象遭到销毁时，属性值也会清空。而assign的“设置方法”只会执行针对“纯量类型” (scalar type，例如 CGFloat 或 NSlnteger 等)的简单赋值操作。&lt;/p&gt;
&lt;p&gt;2）assign可以用非OC对象，而weak必须用于OC对象。&lt;/p&gt;
&lt;p&gt;11.内存管理语义(assign、strong、weak等的区别)?&lt;/p&gt;
&lt;p&gt;1）assign “设置方法” 只会执行针对“纯量”的简单赋值操作。&lt;/p&gt;
&lt;p&gt;2）strong  此特性表明该属性定义了一种“拥有关系”。为这种属性设置新值时，设置方法会先保留新值，并释放旧值，然后再将新值设置上去。&lt;/p&gt;
&lt;p&gt;3）weak 此特性表明该属性定义了一种“非拥有关系”。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特性同assign类似，然而在属性所指的对象遭到销毁时，属性值也会清空。&lt;/p&gt;
&lt;p&gt;4）unsafe_unretained  此特性的语义和assign相同，但是它适用于“对象类型”，该特性表达一种“非拥有关系”，当目标对象遭到销毁时，属性值不会自动清空，这一点与weak有区别。&lt;/p&gt;
&lt;p&gt;5）copy 此特性所表达的所属关系与strong类似。然而设置方法并不保留新值，而是将其“拷贝”。当属性类型为NSString*时，经常用此特性来保护其封装性，因为传递给设置方法的新值有可能指向一个NSMutableString类的实例。这个类是NSString的子类，表示一种可以修改其值的字符串，此时若是不拷贝字符串，那么设置完属性之后，字符串的值就可能会在对象不知情的情况下遭人更改。所以，这时就要拷贝一份“不可变”的字符串，确保对象中的字符串值不会无意间变动。只要实现属性所用的对象是“可变的”，就应该在设置新属性值时拷贝一份。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;笔试面试是程序员应聘绕不过的坎，想进大厂就一定要有知识储备量，而这个却是最佳的考察方式。笔者分享一些收集的iOS面试题，答案仅供参考，如有错误，还请指正。&lt;/p&gt;
    
    </summary>
    
      <category term="talk" scheme="http://charsdavy.github.io/categories/talk/"/>
    
    
      <category term="ios" scheme="http://charsdavy.github.io/tags/ios/"/>
    
      <category term="碎碎念" scheme="http://charsdavy.github.io/tags/text/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C中的NSPredicate</title>
    <link href="http://charsdavy.github.io/2017/03/28/objective-c-NSPredicate/"/>
    <id>http://charsdavy.github.io/2017/03/28/objective-c-NSPredicate/</id>
    <published>2017-03-27T23:51:52.000Z</published>
    <updated>2017-03-31T13:37:53.000Z</updated>
    
    <content type="html">&lt;p&gt;编写软件时，经常需要获取一个对象集合，并通过某些已经条件计算该集合的值。你需要保留符合某个条件的对象，删除那些不满足条件的对象，从而提供一些有意义的对象。&lt;/p&gt;
&lt;p&gt;在使用软件iPhoto的过程中，经常会看到这种现象，如果通知iPhoto仅显示等级为三星级或三星级以上的图片，则指定的条件为“照片的等级必须为三星级或三星级以上”。这样，所有照片都需要经过该过滤器过滤。满足条件的对象通过了过滤器，而其他对象被筛除了。最后，iPhoto将显示出所有高质量的图片。&lt;/p&gt;
&lt;p&gt;Cocoa提供了一个名为NSPredicate的类，它用于指定过滤器的条件。可以创建NSPredicate对象，通过该对象准确地描述所需的条件，对每个对象通过谓词进行筛选，判断它们是否与条件相匹配。这里的“谓词”通常用在数学和计算机科学概念中，表示计算真值或假值的函数。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Cocoa用NSPredicate描述查询的方式，原理类似于在数据库中进行查询。可以在数据库风格的API中使用NSPredicate类，例如Core Data和Spotlight。可以将NSPredicate看成另一种间接操作方式。例如，如果需要查询满足条件的机器人，可以使用谓词对象进行检查，而不必使用代码进行显示查询。通过交换谓词对象，可以使用通用代码对数据进行过滤，而不必对相关条件进行硬编码。&lt;/p&gt;
&lt;h2 id=&quot;创建&quot;&gt;&lt;a href=&quot;#创建&quot; class=&quot;headerlink&quot; title=&quot;创建&quot;&gt;&lt;/a&gt;创建&lt;/h2&gt;&lt;p&gt;1）方式一&lt;/p&gt;
&lt;p&gt;创建许多对象，并将它们组合起来。如果正在构建通用用户接口来指定查询，采用这种方式比较简单。&lt;/p&gt;
&lt;p&gt;2）方式二&lt;/p&gt;
&lt;p&gt;查询代码中的字符串。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Car *car;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Car = makeCar(@&amp;quot;Herbie&amp;quot;, @&amp;quot;Honda&amp;quot;, @&amp;quot;CRX&amp;quot;,  1984, 2, 110000, 58);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[garage addCar:car];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*构建的汽车：品牌为Herbie，型号为双门1984Honda CRX，马力引擎为58，已经行驶距离为110000英里*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*创建谓词*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSPredicate *predicate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;predicate = [NSPredicate predicateWithFormat:@&amp;quot;name == &amp;apos;Herbie&amp;apos;&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;计算谓词&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BOOL match = [predicate evaluateWithObject:car];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;%s&amp;quot;,(match) ? &amp;quot;YES&amp;quot;:&amp;quot;NO&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外一个谓词：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSPredicate *predicate = [NSPredicate predicateWithFormat:@&amp;quot;engine.horsepower &amp;gt;150&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*查看车库中哪些车的功率最大，可以循环测试每个汽车的谓词*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSArray *cars = [garage cars];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for(Car *car in cars)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if([predicate evaluateWithObject:car])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&amp;quot;%@&amp;quot;, car.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;过滤器&quot;&gt;&lt;a href=&quot;#过滤器&quot; class=&quot;headerlink&quot; title=&quot;过滤器&quot;&gt;&lt;/a&gt;过滤器&lt;/h2&gt;&lt;p&gt;如果我们不必像上文那样编写for循环和if语句，这有什么不好？实际上，某些类别将谓词过滤方法添加到了Cocoa集合类中。&lt;code&gt;-filteredArrayUsingPredicate:&lt;/code&gt;是NSArray数组中的一种类别方法，它将循环过滤数组内容，根据谓词计算每个对象的值，并将值为YES的对象累积到将被返回的新数组中：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSArray *results;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;results = [cars filteredArrayUsingPredicate:predicate];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;%@&amp;quot;,results);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假如有一个可变数组，你需要剔除不属于该数组的所有项目：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray *carsCopy = [cars mutableCopy];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[carsCopyfilterUsingPredicate:predicate];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;格式说明符&quot;&gt;&lt;a href=&quot;#格式说明符&quot; class=&quot;headerlink&quot; title=&quot;格式说明符&quot;&gt;&lt;/a&gt;格式说明符&lt;/h2&gt;&lt;p&gt;资深编程人员都知道，硬编码并非好方法，因此，我们可以通过格式符构建谓词：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSPredicate  *predicate = [NSPredicate predicateWithFormat:@&amp;quot;engine.horsepower &amp;gt; %d&amp;quot;, 50];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h2&gt;&lt;p&gt;NSPredicate的格式字符串包含大量不同的运算符。&lt;/p&gt;
&lt;p&gt;1）比较和逻辑运算符&lt;/p&gt;
&lt;p&gt;谓词字符串语法支持C语言中一些常用的运算符，例如等号运算符==和=。&lt;br&gt;不等号运算符具有各种形式：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;：大于&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;=和=&amp;gt;：大于或等于&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;：小于&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;=和=&amp;lt;：小于或等于&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!=和&amp;lt;&amp;gt;：不等于&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此外，谓词字符串语法还支持括号表达式和AND、OR、NOT逻辑运算符或者C样式的等效表达式&amp;amp;&amp;amp;、||和!。&lt;/p&gt;
&lt;p&gt;2）数组运算符&lt;/p&gt;
&lt;p&gt;谓词字符串“(engine.horsepower&amp;gt; 50) OR (engine.horsepower &amp;lt; 200)”是一种十分常见的模式。等效于：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;predicate= [NSPredicate predicateWithFormat:@&amp;quot;engine.horespower BETWEEN &amp;#123;50,200&amp;#125;&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;花括号表示数组，BETWEEN将数组中第一个元素看成是数组的下界，第二个元素看成是数组的上界。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSArray *betweens = [NSArray arrayWithObjects:[NSNumber numberWithInt:50],[NSNumber   numberWithInt:200], nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;predicate = [NSPredicate predicateWithFormat:@&amp;quot;engine.horsepower BETWEEN %@&amp;quot;,betweens];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数组不仅仅用来指定某个区间的端点值。你可以使用IN运算符查找数组中是否含有某个特定值。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;predicate = [NSPredicate predicateWithFormat:@&amp;quot;name IN &amp;#123;&amp;apos;Herbie&amp;apos;, &amp;apos;Snugs&amp;apos;, &amp;apos;Badger&amp;apos;,&amp;apos;Flap&amp;apos;&amp;#125;&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;编写软件时，经常需要获取一个对象集合，并通过某些已经条件计算该集合的值。你需要保留符合某个条件的对象，删除那些不满足条件的对象，从而提供一些有意义的对象。&lt;/p&gt;
&lt;p&gt;在使用软件iPhoto的过程中，经常会看到这种现象，如果通知iPhoto仅显示等级为三星级或三星级以上的图片，则指定的条件为“照片的等级必须为三星级或三星级以上”。这样，所有照片都需要经过该过滤器过滤。满足条件的对象通过了过滤器，而其他对象被筛除了。最后，iPhoto将显示出所有高质量的图片。&lt;/p&gt;
&lt;p&gt;Cocoa提供了一个名为NSPredicate的类，它用于指定过滤器的条件。可以创建NSPredicate对象，通过该对象准确地描述所需的条件，对每个对象通过谓词进行筛选，判断它们是否与条件相匹配。这里的“谓词”通常用在数学和计算机科学概念中，表示计算真值或假值的函数。&lt;/p&gt;
    
    </summary>
    
      <category term="pieces" scheme="http://charsdavy.github.io/categories/pieces/"/>
    
    
      <category term="ios" scheme="http://charsdavy.github.io/tags/ios/"/>
    
      <category term="objc" scheme="http://charsdavy.github.io/tags/objc/"/>
    
  </entry>
  
  <entry>
    <title>日语-助词</title>
    <link href="http://charsdavy.github.io/2017/03/26/japanese-auxiliary-word/"/>
    <id>http://charsdavy.github.io/2017/03/26/japanese-auxiliary-word/</id>
    <published>2017-03-26T13:34:16.000Z</published>
    <updated>2017-04-12T14:18:01.000Z</updated>
    
    <content type="html">&lt;p&gt;助词，又称为语助词。文法术语，指的是一种词类，属于虚词，附着在其他词汇、词组，或是句子上，作为辅助之用。通常用于句子前、中、后，表示各种语气；或是用于语句中间，表示结构上的关系。&lt;/p&gt;
&lt;p&gt;日语中的助词极为丰富，而每一个助词的使用场景也非常多，不得不承认这是一大难点，也是重点。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;に用法&quot;&gt;&lt;a href=&quot;#に用法&quot; class=&quot;headerlink&quot; title=&quot;に用法&quot;&gt;&lt;/a&gt;に用法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）表地点，场所名词+に+名词，具体位置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;部屋に机があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2）表时间点（包含数字的时间）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;学校は８時半に始まります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3）表附着点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;温泉に入ります。&lt;/p&gt;
&lt;p&gt;船に乗ります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4）表目的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;日本へ花見に行きます。&lt;/p&gt;
&lt;p&gt;土曜日か日曜日に買い物に行きます。（第一个に表示时间点，第二个に表示目的）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5）表对象，人物对象，抽象事物&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;友達に会います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;6）表频率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;李さんは１週間に２回プールへ行きます。&lt;/p&gt;
&lt;p&gt;李さんは週に２回プールへ行きます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;7）表目的地&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;日本に行きます。&lt;/p&gt;
&lt;p&gt;家に帰ります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;8）表选择&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;赤いほうがいいです。じゃあ、これにします。&lt;/p&gt;
&lt;h2 id=&quot;で用法&quot;&gt;&lt;a href=&quot;#で用法&quot; class=&quot;headerlink&quot; title=&quot;で用法&quot;&gt;&lt;/a&gt;で用法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）表交通手段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上海まで飛行機で行きます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2）表地点范围，名词+で+动词&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;図書館で勉強します。&lt;/p&gt;
&lt;p&gt;お昼は食堂（しよくどう）で食べます。&lt;/p&gt;
&lt;p&gt;妹は部屋で音樂を聞きます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3）表方式，手段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;速達で送ります。&lt;/p&gt;
&lt;p&gt;メールで両親と連絡します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4）表原材料（で表示能看出原材料，から表示不能看出原材料）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こむぎこでパンを作ります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5）表花费（时间，金钱）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このケーキは３個で１５０円です。&lt;/p&gt;
&lt;h3 id=&quot;で和に的区别&quot;&gt;&lt;a href=&quot;#で和に的区别&quot; class=&quot;headerlink&quot; title=&quot;で和に的区别&quot;&gt;&lt;/a&gt;で和に的区别&lt;/h3&gt;&lt;p&gt;１）で强调后接动态动词。に强调后接静态动词。&lt;/p&gt;
&lt;h2 id=&quot;が用法&quot;&gt;&lt;a href=&quot;#が用法&quot; class=&quot;headerlink&quot; title=&quot;が用法&quot;&gt;&lt;/a&gt;が用法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）表情感词前&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ネズミがこれい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2）表能力词前&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;日本語が分かる。&lt;/p&gt;
&lt;p&gt;日本語ができる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3）自动词前&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;足が疲れる。&lt;/p&gt;
&lt;p&gt;足が痛い。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4）形容词前&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;箱根はホテルや旅館が多いですね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5）存在句（が表听话方不知道的，は表双方都知道的）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ホテルで友達の写真展があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;6）疑问词作主语&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この中でどの料理がいちばんおいしいですか。&lt;/p&gt;
&lt;h2 id=&quot;を用法&quot;&gt;&lt;a href=&quot;#を用法&quot; class=&quot;headerlink&quot; title=&quot;を用法&quot;&gt;&lt;/a&gt;を用法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）表对象，动宾结构，名词+を+动词&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;パンヤミルクなどを食べます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2）表范围，路线&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;駅前を通る（とおる）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3）表出发点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;家をでます。&lt;/p&gt;
&lt;h2 id=&quot;から用法&quot;&gt;&lt;a href=&quot;#から用法&quot; class=&quot;headerlink&quot; title=&quot;から用法&quot;&gt;&lt;/a&gt;から用法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）表时间起点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;來週、金曜日の夜７時から、ホテルでパーテイーがあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2）表空间起点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大阪（おおさか）から上海（シャンハイ）まで飛行機（ひこうき）で行きますか。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3）表因为&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私はドリアンを全然食べません。嫌いですから。&lt;/p&gt;
&lt;h2 id=&quot;へ用法&quot;&gt;&lt;a href=&quot;#へ用法&quot; class=&quot;headerlink&quot; title=&quot;へ用法&quot;&gt;&lt;/a&gt;へ用法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）表去向&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;吉田さんは中国へ行きます。&lt;/p&gt;
&lt;h2 id=&quot;か用法&quot;&gt;&lt;a href=&quot;#か用法&quot; class=&quot;headerlink&quot; title=&quot;か用法&quot;&gt;&lt;/a&gt;か用法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）表选择，二选一，名词+か+名词&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;毎月（まいつき）１回か２回映画（えいが）を見ます。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;助词，又称为语助词。文法术语，指的是一种词类，属于虚词，附着在其他词汇、词组，或是句子上，作为辅助之用。通常用于句子前、中、后，表示各种语气；或是用于语句中间，表示结构上的关系。&lt;/p&gt;
&lt;p&gt;日语中的助词极为丰富，而每一个助词的使用场景也非常多，不得不承认这是一大难点，也是重点。&lt;/p&gt;
    
    </summary>
    
      <category term="talk" scheme="http://charsdavy.github.io/categories/talk/"/>
    
    
      <category term="碎碎念" scheme="http://charsdavy.github.io/tags/text/"/>
    
      <category term="日语" scheme="http://charsdavy.github.io/tags/japan-language/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 密码修改</title>
    <link href="http://charsdavy.github.io/2017/03/22/mysql-modify-password/"/>
    <id>http://charsdavy.github.io/2017/03/22/mysql-modify-password/</id>
    <published>2017-03-22T15:04:47.000Z</published>
    <updated>2017-03-31T13:37:53.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.mysql.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MySQL&lt;/a&gt;是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，目前属于 Oracle 旗下产品。MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件。&lt;br&gt;MySQL是一种关系数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。&lt;br&gt;MySQL所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Mac 安装完 MySQL 之后，软件会生成一个默认密码给我们。但是，当我使用Navicat来建立连接是却提示密码失效，无奈，只能修改数据库默认密码。&lt;/p&gt;
&lt;p&gt;接下来，记录整个root密码修改过程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在开始下面的步骤之前必须先停止mysql服务！&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1, cd /usr/local/mysql/bin/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2, sudo su&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3, ./mysqld_safe --skip-grant-tables &amp;amp; //这一步的作用是跨过权限验证&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4, ./mysql -uroot //以root身份登录，因为第三步的原因不需要密码了。这之后的命令就不需要在前面加./mysql了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5, use mysql;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6, update user set authentication_string=&amp;apos;123456&amp;apos; where User=&amp;apos;root&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;网上流传的版本全部是set password ＝‘’ ，这样写一直报错说 ‘password’列不存在！&lt;br&gt;最终用sql命令查出来只有authentication_string字段，并没有password字段。&lt;/p&gt;
&lt;p&gt;上一步执行之后本来以为已经可以登录了，可是navicat连接测试时出现了：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ERROR 1862 (HY000): Your password has expired. To log in you must&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;change it using a client that supports expired passwords.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以还需要下面步骤&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1, cd /usr/local/mysql/bin/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2, sudo su&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3, ./mysql -uroot  -p123456&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4, set password = password(&amp;apos;123456&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用户名：root，密码：123456&lt;br&gt;修改成功&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt;是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，目前属于 Oracle 旗下产品。MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件。&lt;br&gt;MySQL是一种关系数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。&lt;br&gt;MySQL所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。&lt;/p&gt;
    
    </summary>
    
      <category term="pieces" scheme="http://charsdavy.github.io/categories/pieces/"/>
    
    
      <category term="数据库" scheme="http://charsdavy.github.io/tags/database/"/>
    
      <category term="web" scheme="http://charsdavy.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>FMDB 代码阅读</title>
    <link href="http://charsdavy.github.io/2017/03/21/fmdb-reading/"/>
    <id>http://charsdavy.github.io/2017/03/21/fmdb-reading/</id>
    <published>2017-03-21T14:51:12.000Z</published>
    <updated>2017-03-31T13:37:53.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/ccgus/fmdb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FMDB&lt;/a&gt; 是iOS平台的SQLite数据库框架，以ObjC的方式封装了SQLite的C语言的API。FMDB使用起來更加的面向对象，省去了很多麻烦、冗余的C语言代码。相比Apple自带的Core Data框架，更加的轻量和灵活。提供了多线程安全的数据库操作的方法，有效的防止数据混乱。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;项目文件&quot;&gt;&lt;a href=&quot;#项目文件&quot; class=&quot;headerlink&quot; title=&quot;项目文件&quot;&gt;&lt;/a&gt;项目文件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;FMDatabase : 一个SQLite数据库操作单例，通过它可以对数据库进行增删改查等操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FMResultSet : FMDatabase执行查询之后的结果集。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FMDatabaseAdditions : 拓展FMDatabase类，新增对查询结果只返回单个值的方法进行简化，对表、列是否存在，版本号，校验SQL等功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FMDatabaseQueue : 使用串行对列 ，操作多线程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FMDatabasePool : 使用任务池的形式，操作多线程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;FMDatabase&quot;&gt;&lt;a href=&quot;#FMDatabase&quot; class=&quot;headerlink&quot; title=&quot;FMDatabase&quot;&gt;&lt;/a&gt;FMDatabase&lt;/h2&gt;&lt;h3 id=&quot;打开数据库连接&quot;&gt;&lt;a href=&quot;#打开数据库连接&quot; class=&quot;headerlink&quot; title=&quot;打开数据库连接&quot;&gt;&lt;/a&gt;打开数据库连接&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-(BOOL)open;&lt;/code&gt; 其实是对sqlite3_open()函数的封装。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;- (void)setMaxBusyRetryTimeInterval:(NSTimeInterval)timeout;&lt;/code&gt; 设置重试时间。其实调用的是 &lt;code&gt;int sqlite3_busy_handler(sqlite3 *,int(*)(void *,int),void *);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该函数的第一个参数：需要告知哪一个数据库需要设置busy handler。&lt;/p&gt;
&lt;p&gt;第二个参数：需要回调的busy handler，当你调用该回调函数的时候，需要传给它一个void*的参数，也就是sqlite3_busy_handler的第三个参数。&lt;/p&gt;
&lt;p&gt;第三个参数：需要传给回调函数的int参数表示这次锁事件，该回调函数被调用的次数。如果回调函数返回0时，将不再尝试再次访问数据库，而返回SQLITE_BUSY或者SQLITE_IOERR_BLOCKED。如果回调函数返回非0，将会不断尝试操作数据库。程序运行过程中，如果有其他进程或者线程在读写数据库，那么sqlite3_busy_handler会不断用用该回调函数，直到其他线程或者进程释放锁。获得锁之后，不会再调用该回调函数，从而继续向下执行下去，进行数据库操作。该函数是在获取不到锁的时候，以执行回调函数的次数來进行延时，等待其他进程或者线程操作数据库结束，从而获得锁进行操作数据库。&lt;/p&gt;
&lt;h3 id=&quot;查询数据库&quot;&gt;&lt;a href=&quot;#查询数据库&quot; class=&quot;headerlink&quot; title=&quot;查询数据库&quot;&gt;&lt;/a&gt;查询数据库&lt;/h3&gt;&lt;p&gt;executeQuery 系列函数从根本上看，其实调用的都是&lt;/p&gt;
&lt;p&gt;&lt;code&gt;- (FMResultSet *)executeQuery:(NSString *)sql withArgumentsInArray:(NSArray *)arrayArgs orDictionary:(NSDictionary *)dictionaryArgs orVAList:(va_list)args&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;参数sql: 需要查詢的sql语句。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;参数arrayArgs: 数组类型的参数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FMResultSet *resultSet = [_db executeQuery:@&amp;quot;SELECT * FROM t_student WHERE age &amp;gt; ?&amp;quot; withArgumentsInArray:@[@20]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;参数dictionaryArgs: 字典类型的参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FMResultSet *resultSet = [_db executeQuery:@&amp;quot;SELECT * FROM t_student WHERE age &amp;gt; :age&amp;quot; withParameterDictionary:@&amp;#123;@&amp;quot;age&amp;quot;:@20&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;参数args: 可变参数类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FMResultSet *resultSet = [_db executeQuery:@&amp;quot;SELECT * FROM t_student WHERE age &amp;gt; ?&amp;quot;,@(20)];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;更新数据库操作&quot;&gt;&lt;a href=&quot;#更新数据库操作&quot; class=&quot;headerlink&quot; title=&quot;更新数据库操作&quot;&gt;&lt;/a&gt;更新数据库操作&lt;/h3&gt;&lt;p&gt;这并不只是单单更新数据，而是对数据库有更改的操作，增删改都算。FMDB调用的都是&lt;code&gt;executeupdate&lt;/code&gt;系列函数。这个函数基本上跟&lt;code&gt;executeQuery&lt;/code&gt;系列函数的实现基本相同。只是它生成statement对象后，直接调用&lt;code&gt;rc = sqlite3_step(pStmt);&lt;/code&gt;更新执行，而没有像&lt;code&gt;executeQuery&lt;/code&gt;延迟到FMResultSet中的next函数中执行。&lt;/p&gt;
&lt;h3 id=&quot;一次性执行多条sql语句。&quot;&gt;&lt;a href=&quot;#一次性执行多条sql语句。&quot; class=&quot;headerlink&quot; title=&quot;一次性执行多条sql语句。&quot;&gt;&lt;/a&gt;一次性执行多条sql语句。&lt;/h3&gt;&lt;p&gt;使用&lt;code&gt;executeStatements&lt;/code&gt;函数可以一次性执行多条sql语句。其实现方式就是对&lt;code&gt;sqlite3_exec&lt;/code&gt;函数的封装。&lt;/p&gt;
&lt;h3 id=&quot;FMDB的加解密&quot;&gt;&lt;a href=&quot;#FMDB的加解密&quot; class=&quot;headerlink&quot; title=&quot;FMDB的加解密&quot;&gt;&lt;/a&gt;FMDB的加解密&lt;/h3&gt;&lt;p&gt;FMDataase中使用&lt;code&gt;- (BOOL)setKey:(NSString*)key;&lt;/code&gt;和&lt;code&gt;- (BOOL)setKeyWithData:(NSData *)keyData;&lt;/code&gt;输入数据库密码以求验证用户身份，使用&lt;code&gt;- (BOOL)rekey:(NSString*)key;&lt;/code&gt;和&lt;code&gt;- (BOOL)rekeyWithData:(NSData *)keyData;&lt;/code&gt;来给数据库设置密码或者清除密码。这两类函数分別对&lt;code&gt;sqlite3_key&lt;/code&gt;和&lt;code&gt;sqlite3_rekey&lt;/code&gt;函数进行了封装。&lt;/p&gt;
&lt;h2 id=&quot;FMDatabaseAdditions&quot;&gt;&lt;a href=&quot;#FMDatabaseAdditions&quot; class=&quot;headerlink&quot; title=&quot;FMDatabaseAdditions&quot;&gt;&lt;/a&gt;FMDatabaseAdditions&lt;/h2&gt;&lt;h3 id=&quot;XXXForQuery系列函数&quot;&gt;&lt;a href=&quot;#XXXForQuery系列函数&quot; class=&quot;headerlink&quot; title=&quot;XXXForQuery系列函数&quot;&gt;&lt;/a&gt;XXXForQuery系列函数&lt;/h3&gt;&lt;p&gt;对查询结果只有一个值的情况进行优化，有多个值也只取第一个值。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  使用FMDatabaseAdditions中的intForQuery函数查找数据,如果返回结果有多个数据只取第一条数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)queryForIntForQuery&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int idx = [_db intForQuery:@&amp;quot;SELECT id FROM t_student WHERE age = ?&amp;quot;,@(26)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;数据库的一些概要信息&quot;&gt;&lt;a href=&quot;#数据库的一些概要信息&quot; class=&quot;headerlink&quot; title=&quot;数据库的一些概要信息&quot;&gt;&lt;/a&gt;数据库的一些概要信息&lt;/h3&gt;&lt;p&gt;&lt;code&gt;-(BOOL)tableExists:(NSString*)tableName;&lt;/code&gt;数据库表是否存在。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-(BOOL)columnExists:(NSString*)columnName inTableWithName:(NSString*)tableName;&lt;/code&gt;在tableName表中columnName是否存在。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-(FMResultSet*)getSchema;&lt;/code&gt;数据库的一些概要信息。&lt;/p&gt;
&lt;h3 id=&quot;校验sql语句是否合法&quot;&gt;&lt;a href=&quot;#校验sql语句是否合法&quot; class=&quot;headerlink&quot; title=&quot;校验sql语句是否合法&quot;&gt;&lt;/a&gt;校验sql语句是否合法&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-(BOOL)validateSQL:(NSString *)sql error:(NSError **)error;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;FMResultSet&quot;&gt;&lt;a href=&quot;#FMResultSet&quot; class=&quot;headerlink&quot; title=&quot;FMResultSet&quot;&gt;&lt;/a&gt;FMResultSet&lt;/h2&gt;&lt;h3 id=&quot;初始化对象&quot;&gt;&lt;a href=&quot;#初始化对象&quot; class=&quot;headerlink&quot; title=&quot;初始化对象&quot;&gt;&lt;/a&gt;初始化对象&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;参数1：(FMStatement *)statement&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该对象主要是对sqlite3_stmt的封装，sqlite3_stmt * 所表示的内容可以看成是预处理过的sql语句，已经不是我们熟知的sql语句。它是一个已经把sql语句解析了，用sqlite自己表示记录的内部数据结构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数2：(FMDatabase *)aDB&lt;br&gt;该结果集所属于的FMDatabase数据库操作对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)resultSetWithStatement:(FMStatement *)statement usingParentDatabase:(FMDatabase*)aDB;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;遍历取得所有的结果集合&quot;&gt;&lt;a href=&quot;#遍历取得所有的结果集合&quot; class=&quot;headerlink&quot; title=&quot;遍历取得所有的结果集合&quot;&gt;&lt;/a&gt;遍历取得所有的结果集合&lt;/h3&gt;&lt;p&gt;&lt;code&gt;-(BOOL)next;&lt;/code&gt; 其实是对 &lt;code&gt;-(BOOL)nextWithError:(NSError **)outErr;&lt;/code&gt; 函数的封装。主要作用是通过sqlite3_step函数对FMStatement中的sqlite3_stmt对象进行逐行取值。&lt;/p&gt;
&lt;h3 id=&quot;列名与该列的列数的一一对应关系&quot;&gt;&lt;a href=&quot;#列名与该列的列数的一一对应关系&quot; class=&quot;headerlink&quot; title=&quot;列名与该列的列数的一一对应关系&quot;&gt;&lt;/a&gt;列名与该列的列数的一一对应关系&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@property (readonly) NSMutableDictionary  *columnNameToIndexMap;&lt;/code&gt; 对象中保存了列名与索引一一对应的关系的对照表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-(int)columnIndexForName:(NSString *)columnName;&lt;/code&gt; 根据列名获取该列所在第几列（列的索引）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-(NSString *)columnNameForIndex:(int)columnIdx;&lt;/code&gt; 根据列的索引获取该列的名称。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;获得每一行中每一个列字段的值。&quot;&gt;&lt;a href=&quot;#获得每一行中每一个列字段的值。&quot; class=&quot;headerlink&quot; title=&quot;获得每一行中每一个列字段的值。&quot;&gt;&lt;/a&gt;获得每一行中每一个列字段的值。&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-XXXForColumnIndex:(int)columnIdx;&lt;/code&gt; 根据列的索引获取该列的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-XXXForColumn:(NSString*)columnName;&lt;/code&gt; 根据列的名称获取该列的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-XXXForColumnIndex:(int)columnIdx;&lt;/code&gt; 其实是对sqlite3&lt;em&gt;column&lt;/em&gt;*函数的封装。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (int)intForColumnIndex:(int)columnIdx &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return sqlite3_column_int([_statement statement], columnIdx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;获取每一行中所有的结果集合&quot;&gt;&lt;a href=&quot;#获取每一行中所有的结果集合&quot; class=&quot;headerlink&quot; title=&quot;获取每一行中所有的结果集合&quot;&gt;&lt;/a&gt;获取每一行中所有的结果集合&lt;/h3&gt;&lt;p&gt;&lt;code&gt;- (NSDictionary*)resultDictionary;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;FMDatabaseQueue&quot;&gt;&lt;a href=&quot;#FMDatabaseQueue&quot; class=&quot;headerlink&quot; title=&quot;FMDatabaseQueue&quot;&gt;&lt;/a&gt;FMDatabaseQueue&lt;/h2&gt;&lt;p&gt;使用实例:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FMDatabaseQueue *queue = [FMDatabaseQueue databaseQueueWithPath:aPath];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[queue inDatabase:^(FMDatabase *db) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [db executeUpdate:@&amp;quot;INSERT INTO myTable VALUES (?)&amp;quot;, [NSNumber numberWithInt:1]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [db executeUpdate:@&amp;quot;INSERT INTO myTable VALUES (?)&amp;quot;, [NSNumber numberWithInt:2]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [db executeUpdate:@&amp;quot;INSERT INTO myTable VALUES (?)&amp;quot;, [NSNumber numberWithInt:3]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FMResultSet *rs = [db executeQuery:@&amp;quot;select * from foo&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    while ([rs next]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[queue inTransaction:^(FMDatabase *db, BOOL *rollback) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [db executeUpdate:@&amp;quot;INSERT INTO myTable VALUES (?)&amp;quot;, [NSNumber numberWithInt:1]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [db executeUpdate:@&amp;quot;INSERT INTO myTable VALUES (?)&amp;quot;, [NSNumber numberWithInt:2]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [db executeUpdate:@&amp;quot;INSERT INTO myTable VALUES (?)&amp;quot;, [NSNumber numberWithInt:3]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (whoopsSomethingWrongHappened) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        *rollback = YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // etc…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [db executeUpdate:@&amp;quot;INSERT INTO myTable VALUES (?)&amp;quot;, [NSNumber numberWithInt:4]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;事务的实现&quot;&gt;&lt;a href=&quot;#事务的实现&quot; class=&quot;headerlink&quot; title=&quot;事务的实现&quot;&gt;&lt;/a&gt;事务的实现&lt;/h3&gt;&lt;p&gt;数据库中的事务也是保证数据库安全的一种手段。一段sql语句，要么全部成功，要么全部不成功。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关于延时性事务和独占性事务的区别&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在SQLite 3.0.8或更高版本中，事务可以是延迟的，即时的或者独占的。“延迟的”即是说在数据库第一次被访问之前不获得锁。这样就会延迟事务，BEGIN语句本身不做任何事情。直到初次读取或访问数据库时才获取锁。对数据库的初次读取创建一个SHARED锁，初次写入创建一个RESERVED锁。由于锁的获取被延迟到第一次需要时，别的线程或进程可以在当前线程执行BEGIN语句之后创建另外的事务写入数据库。若事务是即时的，则执行BEGIN命令后立即获取RESERVED锁，而不等数据库被使用。在执行BEGIN IMMEDIATE之后， 你可以确保其它的线程或进程不能写入数据库或执行BEGIN IMMEDIATE或BEGIN EXCLUSIVE. 但其它进程可以获取数据库。 独占事务在所有的数据库获取EXCLUSIVE锁，在执行BEGIN EXCLUSIVE之后，你可以确保在当前事务结束前没有任何其它线程或进程能够读写数据库。&lt;/p&gt;
&lt;h2 id=&quot;FMDatabasePool&quot;&gt;&lt;a href=&quot;#FMDatabasePool&quot; class=&quot;headerlink&quot; title=&quot;FMDatabasePool&quot;&gt;&lt;/a&gt;FMDatabasePool&lt;/h2&gt;&lt;p&gt;FMDatabasePool : 使用任务池的形式，对多线程的操作提供支持。&lt;/p&gt;
&lt;p&gt;不过官方对这种方式并不推荐使用（ONLY_USE_THE_POOL_IF_YOU_ARE_DOING_READS_OTHERWISE_YOULL_DEADLOCK_USE_FMDATABASEQUEUE_INSTEAD），优先选择FMDatabaseQueue的方式。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/ccgus/fmdb&quot;&gt;FMDB&lt;/a&gt; 是iOS平台的SQLite数据库框架，以ObjC的方式封装了SQLite的C语言的API。FMDB使用起來更加的面向对象，省去了很多麻烦、冗余的C语言代码。相比Apple自带的Core Data框架，更加的轻量和灵活。提供了多线程安全的数据库操作的方法，有效的防止数据混乱。&lt;/p&gt;
    
    </summary>
    
      <category term="code" scheme="http://charsdavy.github.io/categories/code/"/>
    
    
      <category term="ios" scheme="http://charsdavy.github.io/tags/ios/"/>
    
      <category term="objc" scheme="http://charsdavy.github.io/tags/objc/"/>
    
      <category term="开源框架" scheme="http://charsdavy.github.io/tags/framework/"/>
    
      <category term="数据库" scheme="http://charsdavy.github.io/tags/database/"/>
    
      <category term="存储" scheme="http://charsdavy.github.io/tags/persistence/"/>
    
  </entry>
  
  <entry>
    <title>日语-动词</title>
    <link href="http://charsdavy.github.io/2017/02/26/japanese-verb/"/>
    <id>http://charsdavy.github.io/2017/02/26/japanese-verb/</id>
    <published>2017-02-26T13:33:06.000Z</published>
    <updated>2017-04-02T10:35:40.000Z</updated>
    
    <content type="html">&lt;p&gt;动词（Verb），简称v 。 一般就是用来表示动作或状态的词汇。基本上每个完整的句子都有一个动词，要表示第二个动作时可使用不定词、动名词、对等连接词、从属连接词或增加子句等方法连结。&lt;br&gt;&amp;lt;比如&amp;gt; 突跃,突击,突袭等描述动作过程均属动词。&lt;br&gt;中文语法中表示人或事物的动作或一种动态变化。一般出现在名词主语或主句后面。&lt;/p&gt;
&lt;p&gt;日语中动词主要分为3大类，称为一类动词，二类动词和三类动词（简称，动1，动2和动3），而三类动词中又可以分为2类，即カ变和サ变动词。&lt;/p&gt;
&lt;p&gt;另外，还有一种经常用到的动词，即授受动词。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;授受动词&quot;&gt;&lt;a href=&quot;#授受动词&quot; class=&quot;headerlink&quot; title=&quot;授受动词&quot;&gt;&lt;/a&gt;授受动词&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;あげます：我或我方给别人，常用于上对下&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私は小野さんにパンカチをあげます。&lt;/p&gt;
&lt;p&gt;彼氏は李さんにバラをあげます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;若分不清我方和别人时，一律用这种句型。&lt;/p&gt;
&lt;p&gt;父は母に本をあげます。&lt;/p&gt;
&lt;p&gt;私は先生に本をあげます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;变疑问句&lt;/p&gt;
&lt;p&gt;[我方]は誰（だれ）に何をあげますか。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;もらいます：我或我方从别人那里得到，礼貌用法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私は先生から&lt;strong&gt;に&lt;/strong&gt;辞書をもらいます。&lt;/p&gt;
&lt;p&gt;私は会社&lt;strong&gt;から&lt;/strong&gt;パソコンをもらいます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;别人为个人时，后面用に；别人为团体时，后面用から。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;くれます：别人给我或我方，平级间使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先生は私に辞書をくれます。&lt;/p&gt;
&lt;p&gt;社長は弟におもちゃをくれます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; 还有一些动词也属于授受类，例如，借东西，还东西。&lt;/p&gt;
&lt;p&gt;教えます、貸します：我或我方教别人学习东西或借东西给别人。&lt;/p&gt;
&lt;p&gt;習います、借ります：我或我方跟别人学习东西或从别人那里借东西。&lt;/p&gt;
&lt;h2 id=&quot;动词分类&quot;&gt;&lt;a href=&quot;#动词分类&quot; class=&quot;headerlink&quot; title=&quot;动词分类&quot;&gt;&lt;/a&gt;动词分类&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;规则&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;一类动词（动1）&lt;/td&gt;
&lt;td&gt;以う段假名结尾的词　&lt;/td&gt;
&lt;td&gt;　行く、読む、帰る（かえる）、滑る（すべる）　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二类动词（动2）&lt;/td&gt;
&lt;td&gt;以る结尾，且る前为い段假名或え段假名的词　&lt;/td&gt;
&lt;td&gt;　寝る、見る、食べる （&lt;strong&gt;注意&lt;/strong&gt;一个汉字一个音）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;三类动词（サ变）&lt;/td&gt;
&lt;td&gt;する（万能动词）&lt;/td&gt;
&lt;td&gt;　勉強する、電話する　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;三类动词（カ变）&lt;/td&gt;
&lt;td&gt;　来（く）る　&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;动词变形&quot;&gt;&lt;a href=&quot;#动词变形&quot; class=&quot;headerlink&quot; title=&quot;动词变形&quot;&gt;&lt;/a&gt;动词变形&lt;/h2&gt;&lt;h3 id=&quot;原形变ます形&quot;&gt;&lt;a href=&quot;#原形变ます形&quot; class=&quot;headerlink&quot; title=&quot;原形变ます形&quot;&gt;&lt;/a&gt;原形变ます形&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;规则&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;一类动词&lt;/td&gt;
&lt;td&gt;う段-&amp;gt;い段＋ます　&lt;/td&gt;
&lt;td&gt;　行く-&amp;gt;行きます　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二类动词&lt;/td&gt;
&lt;td&gt;去る-&amp;gt;＋ます　&lt;/td&gt;
&lt;td&gt;　見る-&amp;gt;見ます　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;三类动词（サ变）&lt;/td&gt;
&lt;td&gt;　する-&amp;gt;します　&lt;/td&gt;
&lt;td&gt;　勉強する-&amp;gt;勉強します　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;三类动词（カ变）&lt;/td&gt;
&lt;td&gt;　くる-&amp;gt;きます　&lt;/td&gt;
&lt;td&gt;　来る-&amp;gt;来ます　&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;ます形变原形&quot;&gt;&lt;a href=&quot;#ます形变原形&quot; class=&quot;headerlink&quot; title=&quot;ます形变原形&quot;&gt;&lt;/a&gt;ます形变原形&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;规则&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;一类动词&lt;/td&gt;
&lt;td&gt;去掉ます，将ます前一个假名按行后移一个　&lt;/td&gt;
&lt;td&gt;　あります-&amp;gt;ある　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二类动词&lt;/td&gt;
&lt;td&gt;将ます去掉，直接换成る　&lt;/td&gt;
&lt;td&gt;　見ます-&amp;gt;見る　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;三类动词（サ变）&lt;/td&gt;
&lt;td&gt;　します-&amp;gt;する　&lt;/td&gt;
&lt;td&gt;　勉強します-&amp;gt;勉強する　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;三类动词（カ变）&lt;/td&gt;
&lt;td&gt;　きます-&amp;gt;くる　&lt;/td&gt;
&lt;td&gt;　来ます-&amp;gt;来る　&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;原形变て形&quot;&gt;&lt;a href=&quot;#原形变て形&quot; class=&quot;headerlink&quot; title=&quot;原形变て形&quot;&gt;&lt;/a&gt;原形变て形&lt;/h3&gt;&lt;p&gt;て形作用：两个动词间使用，表中顿，表相继；语法接续。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一类动词变て形&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1）う、つ、る结尾，促音变。即去掉结尾假名变成って&lt;/p&gt;
&lt;p&gt;示例：買う-&amp;gt;買って、待つ-&amp;gt;待って、売る（うる）-&amp;gt;売って&lt;/p&gt;
&lt;p&gt;2）ぬ、ぶ、む结尾，拨音变。即去掉结尾假名变成んで&lt;/p&gt;
&lt;p&gt;示例：死ぬ-&amp;gt;死んで、飛ぶ-&amp;gt;飛んで、飲む-&amp;gt;飲んで&lt;/p&gt;
&lt;p&gt;3）く、ぐ结尾，い音变。即去掉结尾假名分别变成いて、いで&lt;/p&gt;
&lt;p&gt;示例：歩く-&amp;gt;歩いて、急ぐ-&amp;gt;急いで&lt;/p&gt;
&lt;p&gt;4）す变成して&lt;/p&gt;
&lt;p&gt;示例：話す-&amp;gt;話して&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;行く-&amp;gt;行って&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二类动词变て形&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;去る+て&lt;/p&gt;
&lt;p&gt;示例：見る-&amp;gt;見て、食べる-&amp;gt;食べて&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三类动词变て形&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1）する-&amp;gt;して&lt;/p&gt;
&lt;p&gt;示例：勉強する-&amp;gt;勉強して&lt;/p&gt;
&lt;p&gt;2）来る（くる）-&amp;gt;来て（きて）&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;动词（Verb），简称v 。 一般就是用来表示动作或状态的词汇。基本上每个完整的句子都有一个动词，要表示第二个动作时可使用不定词、动名词、对等连接词、从属连接词或增加子句等方法连结。&lt;br&gt;&amp;lt;比如&amp;gt; 突跃,突击,突袭等描述动作过程均属动词。&lt;br&gt;中文语法中表示人或事物的动作或一种动态变化。一般出现在名词主语或主句后面。&lt;/p&gt;
&lt;p&gt;日语中动词主要分为3大类，称为一类动词，二类动词和三类动词（简称，动1，动2和动3），而三类动词中又可以分为2类，即カ变和サ变动词。&lt;/p&gt;
&lt;p&gt;另外，还有一种经常用到的动词，即授受动词。&lt;/p&gt;
    
    </summary>
    
      <category term="talk" scheme="http://charsdavy.github.io/categories/talk/"/>
    
    
      <category term="碎碎念" scheme="http://charsdavy.github.io/tags/text/"/>
    
      <category term="日语" scheme="http://charsdavy.github.io/tags/japan-language/"/>
    
  </entry>
  
  <entry>
    <title>Mac 安装和配置 Tomcat</title>
    <link href="http://charsdavy.github.io/2017/01/02/mac-install-apache-tomcat/"/>
    <id>http://charsdavy.github.io/2017/01/02/mac-install-apache-tomcat/</id>
    <published>2017-01-01T16:31:23.000Z</published>
    <updated>2017-03-31T13:37:53.000Z</updated>
    
    <content type="html">&lt;p&gt;Tomcat是由Apache软件基金会下属的Jakarta项目开发的一个Servlet容器，按照Sun Microsystems提供的技术规范，实现了对Servlet和JavaServer Page（JSP）的支持，并提供了作为Web服务器的一些特有功能，如Tomcat管理和控制平台、安全域管理和Tomcat阀等。由于Tomcat本身也内含了一个HTTP服务器，它也可以被视作一个单独的Web服务器。但是，不能将Tomcat和Apache Web服务器混淆，Apache Web Server是一个用C语言实现的HTTP web server；这两个HTTP web server不是捆绑在一起的。Apache Tomcat包含了一个配置管理工具，也可以通过编辑XML格式的配置文件来进行配置。&lt;/p&gt;
&lt;p&gt;这篇文章主要介绍Mac环境下，使用Eclipse + Tomcat搭建Java EE开发环境。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;下载资源&quot;&gt;&lt;a href=&quot;#下载资源&quot; class=&quot;headerlink&quot; title=&quot;下载资源&quot;&gt;&lt;/a&gt;下载资源&lt;/h2&gt;&lt;p&gt;前去&lt;a href=&quot;http://tomcat.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;下载安装包，&lt;code&gt;zip&lt;/code&gt;和&lt;code&gt;tar.gz&lt;/code&gt;均可。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;解压下载的压缩包文件，将文件放置&lt;code&gt;/Library/Tomcat&lt;/code&gt;路径。&lt;/p&gt;
&lt;p&gt;设置权限：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo chmod 755  /Library/Tomcat/bin/*.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;启动Tomacat&quot;&gt;&lt;a href=&quot;#启动Tomacat&quot; class=&quot;headerlink&quot; title=&quot;启动Tomacat&quot;&gt;&lt;/a&gt;启动Tomacat&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo sh /Library/Tomcat/bin/startup.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;成功的话会出现：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Tomcat started.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;打开浏览器输入：&lt;code&gt;localhost:8080&lt;/code&gt; 。就可以看见Tomcat:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-install-apache-tomcat.png?imageView/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;关闭Tomcat&quot;&gt;&lt;a href=&quot;#关闭Tomcat&quot; class=&quot;headerlink&quot; title=&quot;关闭Tomcat&quot;&gt;&lt;/a&gt;关闭Tomcat&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo sh /Library/Tomcat/bin/shutdown.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;创建快捷命令&quot;&gt;&lt;a href=&quot;#创建快捷命令&quot; class=&quot;headerlink&quot; title=&quot;创建快捷命令&quot;&gt;&lt;/a&gt;创建快捷命令&lt;/h2&gt;&lt;p&gt;每次按照上述的开启，关闭命令来操作，太麻烦，我们可以使用下列方法创建简洁快捷的命令。&lt;/p&gt;
&lt;h4 id=&quot;创建shell文件&quot;&gt;&lt;a href=&quot;#创建shell文件&quot; class=&quot;headerlink&quot; title=&quot;创建shell文件&quot;&gt;&lt;/a&gt;创建shell文件&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd /usr/local/bin &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo touch tomcat&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;设置权限&quot;&gt;&lt;a href=&quot;#设置权限&quot; class=&quot;headerlink&quot; title=&quot;设置权限&quot;&gt;&lt;/a&gt;设置权限&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;chmod 777 /usr/local/bin/tomcat&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;添加shell代码&quot;&gt;&lt;a href=&quot;#添加shell代码&quot; class=&quot;headerlink&quot; title=&quot;添加shell代码&quot;&gt;&lt;/a&gt;添加shell代码&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case $1 in&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo sh /Library/Tomcat/bin/startup.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stop)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo sh /Library/Tomcat/bin/shutdown.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;restart)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo sh /Library/Tomcat/bin/shutdown.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo sh /Library/Tomcat/bin/startup.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;Usage: start|stop|restart&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;esac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exit 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tomcat start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tomcat stop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tomcat restart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;p&gt;为了便于配置Tomcat，我们需要安装Eclipse &lt;a href=&quot;https://sourceforge.net/projects/tomcatplugin/?source=typ_redirect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tomcat插件&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;打开Eclipse，选择菜单中的Preferences，选择Tomcat的版本，安装路径等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-install-apache-tomcat-02.png?imageView/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;第一个Web程序&quot;&gt;&lt;a href=&quot;#第一个Web程序&quot; class=&quot;headerlink&quot; title=&quot;第一个Web程序&quot;&gt;&lt;/a&gt;第一个Web程序&lt;/h2&gt;&lt;h4 id=&quot;创建&quot;&gt;&lt;a href=&quot;#创建&quot; class=&quot;headerlink&quot; title=&quot;创建&quot;&gt;&lt;/a&gt;创建&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;File&lt;/code&gt;-&amp;gt;&lt;code&gt;New&lt;/code&gt;-&amp;gt;&lt;code&gt;Dynamic Web Project&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;File&lt;/code&gt;-&amp;gt;&lt;code&gt;New&lt;/code&gt;-&amp;gt;&lt;code&gt;JSP File&lt;/code&gt;&lt;br&gt; 新建JSP文件&lt;code&gt;index.jsp&lt;/code&gt;，保存在&lt;code&gt;WebContent&lt;/code&gt;根目录下。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加代码至&lt;code&gt;index.jsp&lt;/code&gt;文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%@ page language=&amp;quot;java&amp;quot; contentType=&amp;quot;text/html; charset=UTF-8&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pageEncoding=&amp;quot;UTF-8&amp;quot;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD HTML 4.01 Transitional//EN&amp;quot; &amp;quot;http://www.w3.org/TR/html4/loose.dtd&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=UTF-8&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;title&amp;gt;Insert title here&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;% java.util.Date d = new java.util.Date(); %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Today&amp;apos;s date is &amp;lt;%= d.toString() %&amp;gt; and this jsp page worked!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;运行&quot;&gt;&lt;a href=&quot;#运行&quot; class=&quot;headerlink&quot; title=&quot;运行&quot;&gt;&lt;/a&gt;运行&lt;/h4&gt;&lt;p&gt;选中项目，&lt;code&gt;Run As&lt;/code&gt;-&amp;gt;&lt;code&gt;Run on Server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-install-apache-tomcat-03.png?imageView/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-install-apache-tomcat-04.png?imageView/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Tomcat是由Apache软件基金会下属的Jakarta项目开发的一个Servlet容器，按照Sun Microsystems提供的技术规范，实现了对Servlet和JavaServer Page（JSP）的支持，并提供了作为Web服务器的一些特有功能，如Tomcat管理和控制平台、安全域管理和Tomcat阀等。由于Tomcat本身也内含了一个HTTP服务器，它也可以被视作一个单独的Web服务器。但是，不能将Tomcat和Apache Web服务器混淆，Apache Web Server是一个用C语言实现的HTTP web server；这两个HTTP web server不是捆绑在一起的。Apache Tomcat包含了一个配置管理工具，也可以通过编辑XML格式的配置文件来进行配置。&lt;/p&gt;
&lt;p&gt;这篇文章主要介绍Mac环境下，使用Eclipse + Tomcat搭建Java EE开发环境。&lt;/p&gt;
    
    </summary>
    
      <category term="pieces" scheme="http://charsdavy.github.io/categories/pieces/"/>
    
    
      <category term="工具" scheme="http://charsdavy.github.io/tags/tool/"/>
    
      <category term="web" scheme="http://charsdavy.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>日语-形容词</title>
    <link href="http://charsdavy.github.io/2016/12/26/japanese-adjective/"/>
    <id>http://charsdavy.github.io/2016/12/26/japanese-adjective/</id>
    <published>2016-12-26T13:33:38.000Z</published>
    <updated>2017-04-12T14:18:01.000Z</updated>
    
    <content type="html">&lt;p&gt;形容词（Adjective），很多语言中均有的主要词类中的一种。形容词主要用来描写或修饰名词或代词，表示人或事物的性质、 状态、特征&lt;br&gt;或属性，常用作定语，也可作表语、补语或状语。&lt;/p&gt;
&lt;p&gt;日语中的形容词分为两大类，称为一类形容词和二类形容词（简称，形1和形2）。形容词所表示的事物的属性，一般具有静止的、固定的、永恒的特点。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;形容词分类&quot;&gt;&lt;a href=&quot;#形容词分类&quot; class=&quot;headerlink&quot; title=&quot;形容词分类&quot;&gt;&lt;/a&gt;形容词分类&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;规则&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;一类形容词（形1）&lt;/td&gt;
&lt;td&gt;以い结尾的词&lt;/td&gt;
&lt;td&gt;美味しい（おいしい）、暑い（あっい）　&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二类形容词（形2）&lt;/td&gt;
&lt;td&gt;不以い结尾的词&lt;/td&gt;
&lt;td&gt;　元気（げんき）、暇（ひま）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注意特例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;綺麗い（きれい）、嫌い（きらい）、いっぱい&lt;/code&gt; 是形2。&lt;/p&gt;
&lt;h2 id=&quot;形容词变形&quot;&gt;&lt;a href=&quot;#形容词变形&quot; class=&quot;headerlink&quot; title=&quot;形容词变形&quot;&gt;&lt;/a&gt;形容词变形&lt;/h2&gt;&lt;h3 id=&quot;形容词变否定&quot;&gt;&lt;a href=&quot;#形容词变否定&quot; class=&quot;headerlink&quot; title=&quot;形容词变否定&quot;&gt;&lt;/a&gt;形容词变否定&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;规则&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;一类形容词（形1）&lt;/td&gt;
&lt;td&gt;去い变成くない或者くありません&lt;/td&gt;
&lt;td&gt;　１）この料理は美味しくないです。２）この料理は美味しくありません。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二类形容词（形2）&lt;/td&gt;
&lt;td&gt;　形2＋ではありません&lt;/td&gt;
&lt;td&gt;　この通りはにぎやかではありません。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注意特例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;いいです&lt;/code&gt;的否定形式是&lt;code&gt;よくないです&lt;/code&gt;或&lt;code&gt;よくありません&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;形容词变过去时&quot;&gt;&lt;a href=&quot;#形容词变过去时&quot; class=&quot;headerlink&quot; title=&quot;形容词变过去时&quot;&gt;&lt;/a&gt;形容词变过去时&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;规则&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;一类形容词（形1）&lt;/td&gt;
&lt;td&gt;　去い变成かった　&lt;/td&gt;
&lt;td&gt;　よい-&amp;gt;よかった&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二类形容词（形2）&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　有名です-&amp;gt;有名でした&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;形容词变过去否定时&quot;&gt;&lt;a href=&quot;#形容词变过去否定时&quot; class=&quot;headerlink&quot; title=&quot;形容词变过去否定时&quot;&gt;&lt;/a&gt;形容词变过去否定时&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;规则&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;一类形容词（形1）&lt;/td&gt;
&lt;td&gt;　去い变成くなかった　&lt;/td&gt;
&lt;td&gt;　よい-&amp;gt;よくなかった&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二类形容词（形2）&lt;/td&gt;
&lt;td&gt;　&lt;/td&gt;
&lt;td&gt;　有名です-&amp;gt;有名ではありませんでした　&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;时态&lt;/th&gt;
&lt;th&gt;一类形容词&lt;/th&gt;
&lt;th&gt;变形&lt;/th&gt;
&lt;th&gt;二类形容词&lt;/th&gt;
&lt;th&gt;变形&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;否定&lt;/td&gt;
&lt;td&gt;よい&lt;/td&gt;
&lt;td&gt;よくない&lt;/td&gt;
&lt;td&gt;有名です&lt;/td&gt;
&lt;td&gt;有名ではありません&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;过去时&lt;/td&gt;
&lt;td&gt;よい&lt;/td&gt;
&lt;td&gt;よかった&lt;/td&gt;
&lt;td&gt;有名です&lt;/td&gt;
&lt;td&gt;有名でした&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;过去否定时&lt;/td&gt;
&lt;td&gt;よい&lt;/td&gt;
&lt;td&gt;よくなかった&lt;/td&gt;
&lt;td&gt;有名です&lt;/td&gt;
&lt;td&gt;有名ではありませんでした&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;形容词变副词&quot;&gt;&lt;a href=&quot;#形容词变副词&quot; class=&quot;headerlink&quot; title=&quot;形容词变副词&quot;&gt;&lt;/a&gt;形容词变副词&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;规则&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;一类形容词（形1）&lt;/td&gt;
&lt;td&gt;　去い变成く　&lt;/td&gt;
&lt;td&gt;　多い（おおい）-&amp;gt;多く&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二类形容词（形2）&lt;/td&gt;
&lt;td&gt;　直接加に　&lt;/td&gt;
&lt;td&gt;　きれい-&amp;gt;きれいに&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;名词变副词规则与形2一致。&lt;/p&gt;
&lt;h3 id=&quot;形容词变て形&quot;&gt;&lt;a href=&quot;#形容词变て形&quot; class=&quot;headerlink&quot; title=&quot;形容词变て形&quot;&gt;&lt;/a&gt;形容词变て形&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;规则&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;一类形容词（形1）&lt;/td&gt;
&lt;td&gt;　去い变成くて　&lt;/td&gt;
&lt;td&gt;　広い（ひろい）-&amp;gt;広くて&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二类形容词（形2）&lt;/td&gt;
&lt;td&gt;　直接加で　&lt;/td&gt;
&lt;td&gt;　簡単（かんたん）-&amp;gt;簡単で&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;br&gt;いい不能用来变形，要用其对应的よい进行变形。&lt;/p&gt;
&lt;p&gt;名词变て形规则与形2一致。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;形容词（Adjective），很多语言中均有的主要词类中的一种。形容词主要用来描写或修饰名词或代词，表示人或事物的性质、 状态、特征&lt;br&gt;或属性，常用作定语，也可作表语、补语或状语。&lt;/p&gt;
&lt;p&gt;日语中的形容词分为两大类，称为一类形容词和二类形容词（简称，形1和形2）。形容词所表示的事物的属性，一般具有静止的、固定的、永恒的特点。&lt;/p&gt;
    
    </summary>
    
      <category term="talk" scheme="http://charsdavy.github.io/categories/talk/"/>
    
    
      <category term="碎碎念" scheme="http://charsdavy.github.io/tags/text/"/>
    
      <category term="日语" scheme="http://charsdavy.github.io/tags/japan-language/"/>
    
  </entry>
  
  <entry>
    <title>iOS App 上架（Analysis 工具使用）</title>
    <link href="http://charsdavy.github.io/2016/11/15/apple-app-release-analysis/"/>
    <id>http://charsdavy.github.io/2016/11/15/apple-app-release-analysis/</id>
    <published>2016-11-15T10:26:02.000Z</published>
    <updated>2017-03-31T13:37:53.000Z</updated>
    
    <content type="html">&lt;p&gt;随着iOS开发的流行，针对iOS开发涉及的方方面面，早有一些公司提供了专门的解决方案或工具。这些解决方案或工具包括：用户行为统计工具（友盟，Flurry，Google Analytics等), App Store销售分析工具（例如App annie)， App crash收集工具（例如Crashlytics)，App测试发布工具（Test Flight）, App Push服务等。&lt;/p&gt;
&lt;p&gt;这些解决方案或工具节省了iOS开发者大量的开发时间，但是由于相关介绍文章的缺乏，许多开发者都在重复着自己一次又一次重新造轮子。所以将自己使用的相关的第三方服务使用经验，整理成一系列文章，以便广大开发者能够省去大量的重复性工作。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;用户习惯数据收集&quot;&gt;&lt;a href=&quot;#用户习惯数据收集&quot; class=&quot;headerlink&quot; title=&quot;用户习惯数据收集&quot;&gt;&lt;/a&gt;用户习惯数据收集&lt;/h1&gt;&lt;p&gt;了解用户的使用习惯以及相关数据信息，可以更好的帮助开发者调整产品的方向和重点。首先是数据的收集，受工作的影响，选择 &lt;a href=&quot;https://mtj.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度移动统计&lt;/a&gt; 。不得不说，这是一款很符合国人使用习惯的工具。&lt;/p&gt;
&lt;p&gt;使用方法很简单，接入过程直接根据官方文档。自定义统计事件需要自己在web端逐个添加。而页面访问统计则不需要，只需要在App上将名字传入调用接口即可。&lt;/p&gt;
&lt;p&gt;百度移动统计不仅仅是做应用统计，也可以做crash分析，游戏统计分析，DSP统计，还有广告营销分析。&lt;/p&gt;
&lt;p&gt;页面数据的分析，可以帮助开发者很明了的知道用户群体的习惯与流失，有助于产品成长。&lt;/p&gt;
&lt;h1 id=&quot;Crash-数据收集&quot;&gt;&lt;a href=&quot;#Crash-数据收集&quot; class=&quot;headerlink&quot; title=&quot;Crash 数据收集&quot;&gt;&lt;/a&gt;Crash 数据收集&lt;/h1&gt;&lt;p&gt;作为上线App，最担心的就是crash数据的收集。&lt;a href=&quot;http://try.crashlytics.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Crashlytics&lt;/a&gt; 是专门为移动应用开者发提供的保存和分析应用崩溃信息的工具。&lt;/p&gt;
&lt;h2 id=&quot;使用Crashlytics的好处&quot;&gt;&lt;a href=&quot;#使用Crashlytics的好处&quot; class=&quot;headerlink&quot; title=&quot;使用Crashlytics的好处&quot;&gt;&lt;/a&gt;使用Crashlytics的好处&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Crashlytics不会漏掉任何应用崩溃信息。在iTunes Connect的后台查看不到任何崩溃信息。但是用户通过微博或者客服电话反馈应用崩溃的情况，在Crashlytics中都可以统计到。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Crashlytics可以像Bug管理工具那样，管理这些崩溃日志。例如：Crashlytics会根据每种类型的Crash的出现频率以及影响的用户量来自动设置优先级。对于每种类型的Crash，Crashlytics除了会像一般的工具提供Call Stack外，还会显示更多相关的有助于诊断的信息，例如：设备是否越狱，当时的内存量，当时的iOS版本等。对于修复掉的Crash日志，可以在Crashlytics的后台将其关掉。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Crashlytics可以每天和每周将崩溃信息汇总发到你的邮箱，所有信息一目了然。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;注册&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用邮箱在&lt;a href=&quot;http://try.crashlytics.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Crashlytic官网&lt;/a&gt;注册。稍后会收到官方验证邮件，根据邮件内容及稍后提示一步步操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接入工程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据官方接入引导&lt;a href=&quot;https://www.fabric.io/kits&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;教程&lt;/a&gt;，分为使用pod方式和手动下载sdk接入方式。具体的可以根据官方文档来操作。这里主要分享一下自己遇到的问题。&lt;/p&gt;
&lt;p&gt;1) 忘记添加 Run Script ，这个步骤会导致App无法build成功。&lt;/p&gt;
&lt;p&gt;2) 重新配置 Crashlytics 之后，需要删除 &lt;code&gt;~/Library/Caches/com.crashlytics.data/&lt;/code&gt; 和 &lt;code&gt;~/Library/Caches/com.crashlytics.mac/&lt;/code&gt; 文件夹下的所有文件，重新build。&lt;/p&gt;
&lt;p&gt;3) 注意配置 &lt;code&gt;Build Settings&lt;/code&gt; 中 &lt;code&gt;Debug Information Format&lt;/code&gt; 选项将debug和release全部设置成&lt;code&gt;DWARF with dSYM File&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;4) 如果提示 &lt;code&gt;missing dSYMs&lt;/code&gt; ，就需要自行上载文件，具体&lt;a href=&quot;https://docs.fabric.io/apple/crashlytics/missing-dsyms.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;方法教程&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;希望对大家有所帮助。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;随着iOS开发的流行，针对iOS开发涉及的方方面面，早有一些公司提供了专门的解决方案或工具。这些解决方案或工具包括：用户行为统计工具（友盟，Flurry，Google Analytics等), App Store销售分析工具（例如App annie)， App crash收集工具（例如Crashlytics)，App测试发布工具（Test Flight）, App Push服务等。&lt;/p&gt;
&lt;p&gt;这些解决方案或工具节省了iOS开发者大量的开发时间，但是由于相关介绍文章的缺乏，许多开发者都在重复着自己一次又一次重新造轮子。所以将自己使用的相关的第三方服务使用经验，整理成一系列文章，以便广大开发者能够省去大量的重复性工作。&lt;/p&gt;
    
    </summary>
    
      <category term="pieces" scheme="http://charsdavy.github.io/categories/pieces/"/>
    
    
      <category term="ios" scheme="http://charsdavy.github.io/tags/ios/"/>
    
      <category term="application" scheme="http://charsdavy.github.io/tags/application/"/>
    
  </entry>
  
  <entry>
    <title>Effective Objective-C 2.0 读书笔记 -- 熟悉Objective-C语言</title>
    <link href="http://charsdavy.github.io/2016/09/05/effective-objc-2-introduction-objc/"/>
    <id>http://charsdavy.github.io/2016/09/05/effective-objc-2-introduction-objc/</id>
    <published>2016-09-05T07:27:15.000Z</published>
    <updated>2017-03-31T13:37:53.000Z</updated>
    
    <content type="html">&lt;p&gt;看到Effective这个词，大家一定会想到《Effective C++》、《Effective Java》等业界名著，那些书里汇聚了多项实用技巧，又系统而深入的讲解了各种编程知识。那么，《Effective Objective-C 2.0》也是如此。&lt;/p&gt;
&lt;p&gt;作为Mac OS X与iOS应用程序的开发语言，Objective-C作为首选。那么，它有哪些需要注意的呢？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;起源&quot;&gt;&lt;a href=&quot;#起源&quot; class=&quot;headerlink&quot; title=&quot;起源&quot;&gt;&lt;/a&gt;起源&lt;/h2&gt;&lt;p&gt;Objective-C与C++、Java一样，是面向对象的语言，是由Smalltalk演化而来。Smalltalk是消息型语言的鼻祖。消息与函数调用之间的区别看上去就像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//Messaging (Objective-C)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Object *obj = [Object new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[obj performWith:parameter1 and:parameter2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//Function calling (C++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Object *obj = new Object;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj-&amp;gt;perform(parameter1, parameter2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关键区别在于：使用消息结构的语言，其运行时所应执行的代码由运行环境来决定；而使用函数调用的语言，则由编译器决定。&lt;/p&gt;
&lt;p&gt;Objective-C是C的“超集”(superset)，所以C语言中的所有功能在编写Objective-C代码时依然适用。理解C语言的内存模型(memory model)，有助于理解Objective-C的内存模型及其“引用计数”(reference counting)机制的工作原理。Objective-C语言中的指针是用来指示对象的。&lt;/p&gt;
&lt;h2 id=&quot;关于使用头文件&quot;&gt;&lt;a href=&quot;#关于使用头文件&quot; class=&quot;headerlink&quot; title=&quot;关于使用头文件&quot;&gt;&lt;/a&gt;关于使用头文件&lt;/h2&gt;&lt;p&gt;主要使用 &lt;code&gt;import&lt;/code&gt; 关键字。然而，我们在 &lt;code&gt;.h&lt;/code&gt; 文件中一般首选使用 &lt;code&gt;@class&lt;/code&gt; 关键字，它能“向前声明”一个类。对于不需要知道类细节的情况下我们使用它。否则不会轻易使用 &lt;code&gt;import&lt;/code&gt; 来引入整个头文件。&lt;/p&gt;
&lt;p&gt;过多的引入头文件，会增加编译时间。这就是我们多使用 &lt;code&gt;@class&lt;/code&gt; 关键字的直接原因。&lt;/p&gt;
&lt;p&gt;除非确有必要，否则不要引入头文件。一般来说，应在某个类的头文件中使用“向前声明”来提及别的类，并在实现文件中引入那些类的头文件。这样做可以尽量降低类之间的耦合(coupling)。&lt;/p&gt;
&lt;p&gt;有时无法使用“向前声明”，比如要声明某个类遵循一项协议。这种情况下，尽量把“该类遵循某协议”的这条声明移至“class-continuation分类”中。如果不行的话，就把协议单独放在一个头文件中，然后将其引入。&lt;/p&gt;
&lt;h2 id=&quot;字面量语法&quot;&gt;&lt;a href=&quot;#字面量语法&quot; class=&quot;headerlink&quot; title=&quot;字面量语法&quot;&gt;&lt;/a&gt;字面量语法&lt;/h2&gt;&lt;p&gt;在编写Objective-C程序时，总会用到某几个类，它们属于Foundation框架。虽然从技术上来说，不用Foundation框架也能写出Objective-C代码，但是实际上却经常要用到此框架。这几个类是NSString、NUNumber、NSArray、NSDictionary。从类名上即可看出各自所表示的数据结构。&lt;/p&gt;
&lt;p&gt;Objective-C以语法繁杂而著称。不过从Objective-C 1.0起，有一种简单的方式能创建NSString 对象。这就是“字符串字面量”(string literal)，其语法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *string = &lt;span class=&quot;string&quot;&gt;@&quot;Effective Objective-C 2.0&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;字面数值&quot;&gt;&lt;a href=&quot;#字面数值&quot; class=&quot;headerlink&quot; title=&quot;字面数值&quot;&gt;&lt;/a&gt;字面数值&lt;/h3&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *number = [&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; numberWithInt:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//等价于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *number = @&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更多表示：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSNumber *intNumber = @11;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber *floatNumber = @2.5f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber *doubleNumber = @3.1415926;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber *boolNumber = @YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber *charNumber = @&#39;ABC&#39;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;字面量语法也适用于下述表达式&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int x =5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;float y = 6.5f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber *expressionNumber = @(x * y);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;字面量数组&quot;&gt;&lt;a href=&quot;#字面量数组&quot; class=&quot;headerlink&quot; title=&quot;字面量数组&quot;&gt;&lt;/a&gt;字面量数组&lt;/h3&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSarray&lt;/span&gt; *animals = [&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; arrayWithObjects:&lt;span class=&quot;string&quot;&gt;@&quot;cat&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;dog&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;mouse&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;badger&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等价于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSarray&lt;/span&gt; *animals = @[&lt;span class=&quot;string&quot;&gt;@&quot;cat&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;dog&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;mouse&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;badger&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用数组&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *dog = [animals objectAtIndex:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等价于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *dog = animals[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;字面量字典&quot;&gt;&lt;a href=&quot;#字面量字典&quot; class=&quot;headerlink&quot; title=&quot;字面量字典&quot;&gt;&lt;/a&gt;字面量字典&lt;/h3&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *personData = [&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; dictionaryWithObjectsAnsKeys:&lt;span class=&quot;string&quot;&gt;@&quot;Matt&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;firstName&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;Galloway&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;lastName&quot;&lt;/span&gt;, [&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; numberWithInt:&lt;span class=&quot;number&quot;&gt;28&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;@&quot;age&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等价于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *personData = @&amp;#123;&lt;span class=&quot;string&quot;&gt;@&quot;firstName&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;@&quot;Matt&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;lastName&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;@&quot;Galloway&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;age&quot;&lt;/span&gt;:[&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; numberWithInt:&lt;span class=&quot;number&quot;&gt;28&lt;/span&gt;]&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用字典&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *lastName = [personData objectForKey:&lt;span class=&quot;string&quot;&gt;@&quot;lastName&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等价于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *lastName = personData[&lt;span class=&quot;string&quot;&gt;@&quot;lastName&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;可变数组和字典&quot;&gt;&lt;a href=&quot;#可变数组和字典&quot; class=&quot;headerlink&quot; title=&quot;可变数组和字典&quot;&gt;&lt;/a&gt;可变数组和字典&lt;/h3&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[mutableArray replaceObjectAtIndex:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; withObject:&lt;span class=&quot;string&quot;&gt;@&quot;dog&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[mutableDictionary setObject:&lt;span class=&quot;string&quot;&gt;@&quot;Galloway&quot;&lt;/span&gt; forKey:&lt;span class=&quot;string&quot;&gt;@&quot;lastName&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等价于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mutableArray[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;@&quot;dog&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mutableDictionary[&lt;span class=&quot;string&quot;&gt;@&quot;lastName&quot;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;@&quot;Galloway&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;局限性&quot;&gt;&lt;a href=&quot;#局限性&quot; class=&quot;headerlink&quot; title=&quot;局限性&quot;&gt;&lt;/a&gt;局限性&lt;/h3&gt;&lt;p&gt;字面量语法有个小小的限制，就是除了字符串以外，所创建出来的对象必须属于Foundation框架才行。如果自定义了这些类的子类，则无法用字面量语法创建其对象。要想创建自定义子类的实例，必须采用“非字面量语法”(nonliteral syntax)。&lt;/p&gt;
&lt;p&gt;使用字面量语法创建出来的字符串、数组、字典对象都是不可变的(immutable)。若想要可变版本的对象，则需要复制一份：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;mutable&lt;/span&gt; = [@[@&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, @&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, @&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, @&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] mutableCopy];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这么做会多调用一个方法，而且还要再创建一个对象，不过使用字面量语法所带来的好处还是多于上述缺点的。&lt;/p&gt;
&lt;p&gt;用字面量语法创建数组或字典时，若值中有nil，则会抛出异常。因此，务必确保值里不含nil。&lt;/p&gt;
&lt;h2 id=&quot;多用类型常量-少用-define预处理指令&quot;&gt;&lt;a href=&quot;#多用类型常量-少用-define预处理指令&quot; class=&quot;headerlink&quot; title=&quot;多用类型常量 少用#define预处理指令&quot;&gt;&lt;/a&gt;多用类型常量 少用#define预处理指令&lt;/h2&gt;&lt;p&gt;编写代码时经常要定义常量。掌握了Objective-C与其C语言的基础的人，也许会用这种方法来做：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#define ANIMATION_DURATION 0.3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述预处理指令会把源代码中的ANIMATION_DURATION字符串替换为0.3.预处理过程会把碰到的所有ANIMATION_DURATION一律替换成0.3，这样的话，假设此指令声明在某个头文件中，那么所有引入了这个头文件的代码，其ANIMATION_DURATION都会被替换。&lt;/p&gt;
&lt;p&gt;要解决此问题，应该设法利用编译器的某些特性才对。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSTimeInterval&lt;/span&gt; kAnimationDuration = &lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用此方式定义的常量包含类型信息，其好处的清楚地描述了常量的含义。&lt;/p&gt;
&lt;p&gt;常用的命名法是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若常量局限于某”编译单元”(translation unit，也就是“实现文件”，implementation file)之内，则在前面加字母k；&lt;/li&gt;
&lt;li&gt;若常量在类之外可见，则通常以类名为前缀。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定义常量的位置很重要。在头文件里声明预处理指令，这样会增加常量名称互相冲突的可能性。&lt;/p&gt;
&lt;p&gt;在头文件中使用extern来声明全局常量，并在相关实现文件中定义其值。这种常量要出现在全局符号表中，所以其名称应加以区隔，通常用与之相关的类名做前缀。&lt;/p&gt;
&lt;h2 id=&quot;枚举使用&quot;&gt;&lt;a href=&quot;#枚举使用&quot; class=&quot;headerlink&quot; title=&quot;枚举使用&quot;&gt;&lt;/a&gt;枚举使用&lt;/h2&gt;&lt;p&gt;枚举只是一种常量命名方式。某个对象所经历的各种状态就可以定义为一个简单的枚举集(enumeration set)。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; IHConnectionState &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	IHConnectionStateDisconnected,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	IHConnectionStateConnecting,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	IHConnectionStateConnected&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认情况下，枚举起始值为0，以后依次递增，1,2,3…&lt;/p&gt;
&lt;p&gt;其实还可以我们自己指定枚举值：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; IHConnectionState &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	IHConnectionStateDisconnected = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	IHConnectionStateConnecting,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	IHConnectionStateConnected&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以定义为位移值：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UIViewAutoresizing&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UIViewAutoresizing&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UIViewAutoresizingFlexibleLeftMargin&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UIViewAutoresizingFlexibleWidth&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UIViewAutoresizingFlexibleRightMargin&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UIViewAutoresizingFlexibleTopMargin&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UIViewAutoresizingFlexibleHeight&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UIViewAutoresizingFlexibleBottomMargin&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于枚举，Foundation框架中定义了一些辅助的宏，用这些来定义枚举类型时，也可以指定用于保存枚举值的底层数据类型。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NS_ENUM&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt;, IHConnectionState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	IHConnectionStateDisconnected = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	IHConnectionStateConnecting,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	IHConnectionStateConnected&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NS_OPTIONS&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt;, IHPermittedDirection) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	IHPermittedDirectionUp = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	IHPermittedDirectionDown = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	IHPermittedDirectionLeft = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	IHPermittedDirectionRight = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这些宏的定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt;(__cplusplus &amp;amp;&amp;amp; __cplusplus &amp;gt;= 201103L &amp;amp;&amp;amp; (__has_extension(cxx_strong_enums) || __has_feature(objc_fixed_enum))) || (!__cplusplus &amp;amp;&amp;amp; __has_feature(objc_fixed_enum))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NS_ENUM(_type, _name)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; _name:_type _name; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; _name:_type&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; (__cplusplus)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NS_OPTIONS(_type, _name)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			type _name; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt;:_type&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NS_OPTIONS(_type, _name)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; _name:_type _name; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; _name:_type&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NS_ENUM(_type, _name) _type _name; enum&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NS_OPTIONS(_type, _name) _type _name; enum&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个#if用于判断编译器是否支持新式枚举。如果不支持，那么就用老式语法来定义枚举。&lt;/p&gt;
&lt;p&gt;在处理枚举类型的switch语句中不要实现default分支。这样的话，加入新枚举之后，编译器就会提示开发者：switch语句并未处理所有枚举。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;看到Effective这个词，大家一定会想到《Effective C++》、《Effective Java》等业界名著，那些书里汇聚了多项实用技巧，又系统而深入的讲解了各种编程知识。那么，《Effective Objective-C 2.0》也是如此。&lt;/p&gt;
&lt;p&gt;作为Mac OS X与iOS应用程序的开发语言，Objective-C作为首选。那么，它有哪些需要注意的呢？&lt;/p&gt;
    
    </summary>
    
      <category term="pieces" scheme="http://charsdavy.github.io/categories/pieces/"/>
    
    
      <category term="ios" scheme="http://charsdavy.github.io/tags/ios/"/>
    
      <category term="objc" scheme="http://charsdavy.github.io/tags/objc/"/>
    
  </entry>
  
  <entry>
    <title>Mac 如何升级 Ruby 版本</title>
    <link href="http://charsdavy.github.io/2016/09/03/mac-ruby-update/"/>
    <id>http://charsdavy.github.io/2016/09/03/mac-ruby-update/</id>
    <published>2016-09-03T08:47:54.000Z</published>
    <updated>2017-03-31T13:37:53.000Z</updated>
    
    <content type="html">&lt;p&gt;Ruby 是一种面向对象、命令式、函数式、动态的通用编程语言。 在20世纪90年代中期由日本人松本行弘（Matz）设计并开发。 遵守BSD许可证和Ruby License。 它的灵感与特性来自于Perl、Smalltalk、Eiffel、Ada以及Lisp语言。&lt;/p&gt;
&lt;p&gt;Ruby 可运行于多种平台，如 Windows、MAC OS 和 UNIX 的各种版本。&lt;/p&gt;
&lt;p&gt;Ruby用于最明显，且和Apple系列的程序员最直接关联的就是Mac的开发环境，直接关联于Cocoapods工具。但是，cocoapods工具与Ruby的版本有一定的关联性，难免不涉及到升级。&lt;/p&gt;
&lt;p&gt;那么，如何升级最方便快捷呢？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这就是rvm大展身手的时候啦。rvm是什么？rvm是ruby版本管理器。为什么要安装rvm呢？因为rvm可以让你拥有多个版本的Ruby，并且可以在多个版本之间自由切换。&lt;/p&gt;
&lt;h3 id=&quot;第一步：安装rvm&quot;&gt;&lt;a href=&quot;#第一步：安装rvm&quot; class=&quot;headerlink&quot; title=&quot;第一步：安装rvm&quot;&gt;&lt;/a&gt;第一步：安装rvm&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl -L get.rvm.io | bash -s stable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ source ~/.profile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;等待终端加载完毕，后输入：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ rvm -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果能显示版本号,则安装成功。&lt;/p&gt;
&lt;h3 id=&quot;第二步：安装ruby&quot;&gt;&lt;a href=&quot;#第二步：安装ruby&quot; class=&quot;headerlink&quot; title=&quot;第二步：安装ruby&quot;&gt;&lt;/a&gt;第二步：安装ruby&lt;/h3&gt;&lt;p&gt;列出ruby可安装的版本信息&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ rvm list known&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装一个ruby版本&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ rvm install 2.3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果想设置为默认版本，可以用这条命令来完成&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ rvm use 2.1.4 --default&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看已安装的ruby&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ rvm list&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;卸载一个已安装ruby版本&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ rvm remove 2.3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;第三步：更换源&quot;&gt;&lt;a href=&quot;#第三步：更换源&quot; class=&quot;headerlink&quot; title=&quot;第三步：更换源&quot;&gt;&lt;/a&gt;第三步：更换源&lt;/h3&gt;&lt;p&gt;查看已有的源&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gem source -l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;显示如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CURRENT SOURCES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http://rubygems.org/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们需要修改更换源（由于国内被墙），所以要把源切换至淘宝镜像服务器，在终端执行以下命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gem update --system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gem uninstall rubygems-update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gem sources -r http://rubygems.org/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gem sources -a https://ruby.taobao.org&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Ruby 是一种面向对象、命令式、函数式、动态的通用编程语言。 在20世纪90年代中期由日本人松本行弘（Matz）设计并开发。 遵守BSD许可证和Ruby License。 它的灵感与特性来自于Perl、Smalltalk、Eiffel、Ada以及Lisp语言。&lt;/p&gt;
&lt;p&gt;Ruby 可运行于多种平台，如 Windows、MAC OS 和 UNIX 的各种版本。&lt;/p&gt;
&lt;p&gt;Ruby用于最明显，且和Apple系列的程序员最直接关联的就是Mac的开发环境，直接关联于Cocoapods工具。但是，cocoapods工具与Ruby的版本有一定的关联性，难免不涉及到升级。&lt;/p&gt;
&lt;p&gt;那么，如何升级最方便快捷呢？&lt;/p&gt;
    
    </summary>
    
      <category term="talk" scheme="http://charsdavy.github.io/categories/talk/"/>
    
    
      <category term="mac" scheme="http://charsdavy.github.io/tags/mac-os/"/>
    
      <category term="工具" scheme="http://charsdavy.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS 开发 － 聊聊如何打包dmg文件</title>
    <link href="http://charsdavy.github.io/2016/09/03/mac-os-archive-app/"/>
    <id>http://charsdavy.github.io/2016/09/03/mac-os-archive-app/</id>
    <published>2016-09-03T01:43:24.000Z</published>
    <updated>2017-03-31T13:37:53.000Z</updated>
    
    <content type="html">&lt;p&gt;最近因为博主自己的需求，而App Store上的App不能满足需求，或者是说，想借此机会涉猎一下Mac OS的开发。之前一直臆想iOS开发和Mac OS差不多，实则不然。&lt;/p&gt;
&lt;p&gt;BTW 推荐一款非Apple官方的App Store，&lt;code&gt;HackStore&lt;/code&gt;是一款来自俄罗斯的Mac应用商店，我们可以将自己开发完的App免费发布上去，也是具有审核机制的，博主目前推广自己的&lt;code&gt;ImageHosting&lt;/code&gt;，一款图床软件，目前支持七牛云存储。有需求欢迎大家使用，吐槽。 &lt;a href=&quot;https://github.com/charsdavy/ImageHosting/releases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ImageHosting for Mac&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在，分享一下，当我们完成Mac开发，release一个&lt;code&gt;.app&lt;/code&gt;文件之后，我们应该如何打包成一个dmg文件的方法。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;言归正传，说到dmg，这个我们熟悉的格式，那么它是怎么生成的呢，跟着接下来的步骤吧。博主将它们分为&lt;code&gt;系统默认&lt;/code&gt;和&lt;code&gt;自定义&lt;/code&gt;，不过，两者都离不开一个工具 －－ &lt;code&gt;磁盘工具（Disk Utility）&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;系统默认&quot;&gt;&lt;a href=&quot;#系统默认&quot; class=&quot;headerlink&quot; title=&quot;系统默认&quot;&gt;&lt;/a&gt;系统默认&lt;/h3&gt;&lt;p&gt;打开 &lt;code&gt;磁盘工具&lt;/code&gt; －&amp;gt; &lt;code&gt;文件&lt;/code&gt; －&amp;gt; &lt;code&gt;新建映像&lt;/code&gt; －&amp;gt; &lt;code&gt;来自文件夹的映像&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-os-archive-app-default-build.png?imageView2/2/w/460&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;资源文件夹内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-os-archive-app-default-folder.png?imageView2/2/w/460&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;配置 选择包括 &lt;code&gt;.app&lt;/code&gt; 和 &lt;code&gt;Applications 替身&lt;/code&gt; 文件夹的路径，也就是上图说的 资源文件夹 路径&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-os-archive-app-default-build-config.png?imageView2/2/w/460&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击 &lt;code&gt;打开&lt;/code&gt; ，配置相关信息 点击 &lt;code&gt;存储&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h3 id=&quot;自定义&quot;&gt;&lt;a href=&quot;#自定义&quot; class=&quot;headerlink&quot; title=&quot;自定义&quot;&gt;&lt;/a&gt;自定义&lt;/h3&gt;&lt;p&gt;1 准备资源，包括：背景图片，&lt;code&gt;.app&lt;/code&gt; 和 &lt;code&gt;Applications 替身&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;2 创建一个空的映像文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-os-archive-app-build-blank-dmg.png?imageView2/2/w/460&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;配置信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-os-archive-app-config-blank-dmg.png?imageView2/2/w/460&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3 配置资源 －－ 配置背景图&lt;/p&gt;
&lt;p&gt;1）打开显示选项&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-os-archive-app-blank-fill-src.png?imageView2/2/w/460&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2）配置背景图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-os-archive-app-show-view-option.png?imageView2/2/w/360&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3）隐藏背景图片文件&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;mv&lt;/code&gt;命令进行重命名&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mv background.tif .background.tif&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-os-archive-app-hidden-bg.png?imageView2/2/w/460&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;4 配置资源 －－ 拖拽&lt;code&gt;.app&lt;/code&gt; 和 &lt;code&gt;Applications 替身&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;5 转换&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-os-archive-app-convert.png?imageView2/2/w/480&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;配置转换信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-os-archive-app-convert-config.png?imageView2/2/w/480&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;6 效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-os-archive-app-build-result.png?imageView2/2/w/460&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;附言&quot;&gt;&lt;a href=&quot;#附言&quot; class=&quot;headerlink&quot; title=&quot;附言&quot;&gt;&lt;/a&gt;附言&lt;/h3&gt;&lt;p&gt;每次自定义类型打包dmg，都需要从零开始，不能使用上一次的未转换时的文件直接替换&lt;code&gt;.app&lt;/code&gt;文件。否则，呈现的样式将不是CD样式。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近因为博主自己的需求，而App Store上的App不能满足需求，或者是说，想借此机会涉猎一下Mac OS的开发。之前一直臆想iOS开发和Mac OS差不多，实则不然。&lt;/p&gt;
&lt;p&gt;BTW 推荐一款非Apple官方的App Store，&lt;code&gt;HackStore&lt;/code&gt;是一款来自俄罗斯的Mac应用商店，我们可以将自己开发完的App免费发布上去，也是具有审核机制的，博主目前推广自己的&lt;code&gt;ImageHosting&lt;/code&gt;，一款图床软件，目前支持七牛云存储。有需求欢迎大家使用，吐槽。 &lt;a href=&quot;https://github.com/charsdavy/ImageHosting/releases&quot;&gt;ImageHosting for Mac&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在，分享一下，当我们完成Mac开发，release一个&lt;code&gt;.app&lt;/code&gt;文件之后，我们应该如何打包成一个dmg文件的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="pieces" scheme="http://charsdavy.github.io/categories/pieces/"/>
    
    
      <category term="mac" scheme="http://charsdavy.github.io/tags/mac-os/"/>
    
      <category term="工具" scheme="http://charsdavy.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>ImageHosting 开源软件的使用说明</title>
    <link href="http://charsdavy.github.io/2016/08/22/ImageHosting-use-introduction/"/>
    <id>http://charsdavy.github.io/2016/08/22/ImageHosting-use-introduction/</id>
    <published>2016-08-22T10:58:24.000Z</published>
    <updated>2017-04-02T10:48:23.000Z</updated>
    
    <content type="html">&lt;p&gt;博主在转战iOS开发以来，一直坚持撰写自己的技术博客。使用Github Pages + Hexo 搭建了属于自己的空间。具体搭建方法可以参考&lt;a href=&quot;http://charsdavy.github.io/2016/05/31/build-blog-by-hexo/&quot;&gt;《手把手教 GitHub + Hexo 搭建博客》&lt;/a&gt; 。 然而，博客中有很多时候需要使用图片说明，俗话说“一图胜千言”，博主使用 七牛云 做图床，然每次编写博客时需要打开Web版上传图片，甚是繁琐。故此，博主自己编写了一个自己的图片上传软件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ImageHosting-use-introduction-launchpad.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;软件下载地址：&lt;a href=&quot;https://github.com/charsdavy/ImageHosting/releases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ImageHosting for Mac&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/charsdavy/ImageHosting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源代码地址&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;遇到提示“不能安装未知来源程序”时，处理方法为，将权限改为“任何来源”即可。&lt;/p&gt;
&lt;h2 id=&quot;软件菜单栏&quot;&gt;&lt;a href=&quot;#软件菜单栏&quot; class=&quot;headerlink&quot; title=&quot;软件菜单栏&quot;&gt;&lt;/a&gt;软件菜单栏&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ImageHosting-use-introduction-stateMenu.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;打开软件配置，添加账户信息&quot;&gt;&lt;a href=&quot;#打开软件配置，添加账户信息&quot; class=&quot;headerlink&quot; title=&quot;打开软件配置，添加账户信息&quot;&gt;&lt;/a&gt;打开软件配置，添加账户信息&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ImageHosting-use-introduction-account.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;打开文件选择页，选择文件&quot;&gt;&lt;a href=&quot;#打开文件选择页，选择文件&quot; class=&quot;headerlink&quot; title=&quot;打开文件选择页，选择文件&quot;&gt;&lt;/a&gt;打开文件选择页，选择文件&lt;/h2&gt;&lt;h2 id=&quot;上传文件&quot;&gt;&lt;a href=&quot;#上传文件&quot; class=&quot;headerlink&quot; title=&quot;上传文件&quot;&gt;&lt;/a&gt;上传文件&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ImageHosting-use-introduction-upload-main.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;上传进度提示&quot;&gt;&lt;a href=&quot;#上传进度提示&quot; class=&quot;headerlink&quot; title=&quot;上传进度提示&quot;&gt;&lt;/a&gt;上传进度提示&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ImageHosting-use-introduction-upload_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ImageHosting-use-introduction-upload_2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ImageHosting-use-introduction-upload_3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;上传完成&quot;&gt;&lt;a href=&quot;#上传完成&quot; class=&quot;headerlink&quot; title=&quot;上传完成&quot;&gt;&lt;/a&gt;上传完成&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ImageHosting-use-introduction-upload-success-main.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;操作提示&quot;&gt;&lt;a href=&quot;#操作提示&quot; class=&quot;headerlink&quot; title=&quot;操作提示&quot;&gt;&lt;/a&gt;操作提示&lt;/h2&gt;&lt;h3 id=&quot;未添加账户信息提示&quot;&gt;&lt;a href=&quot;#未添加账户信息提示&quot; class=&quot;headerlink&quot; title=&quot;未添加账户信息提示&quot;&gt;&lt;/a&gt;未添加账户信息提示&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ImageHosting-use-introduction-no-account.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;未选择上传文件提示&quot;&gt;&lt;a href=&quot;#未选择上传文件提示&quot; class=&quot;headerlink&quot; title=&quot;未选择上传文件提示&quot;&gt;&lt;/a&gt;未选择上传文件提示&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ImageHosting-use-introduction-no-select.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;上传文件成功提示&quot;&gt;&lt;a href=&quot;#上传文件成功提示&quot; class=&quot;headerlink&quot; title=&quot;上传文件成功提示&quot;&gt;&lt;/a&gt;上传文件成功提示&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ImageHosting-use-introduction-upload-success.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;博主在转战iOS开发以来，一直坚持撰写自己的技术博客。使用Github Pages + Hexo 搭建了属于自己的空间。具体搭建方法可以参考&lt;a href=&quot;http://charsdavy.github.io/2016/05/31/build-blog-by-hexo/&quot;&gt;《手把手教 GitHub + Hexo 搭建博客》&lt;/a&gt; 。 然而，博客中有很多时候需要使用图片说明，俗话说“一图胜千言”，博主使用 七牛云 做图床，然每次编写博客时需要打开Web版上传图片，甚是繁琐。故此，博主自己编写了一个自己的图片上传软件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/ImageHosting-use-introduction-launchpad.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;软件下载地址：&lt;a href=&quot;https://github.com/charsdavy/ImageHosting/releases&quot;&gt;ImageHosting for Mac&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/charsdavy/ImageHosting&quot;&gt;源代码地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="project" scheme="http://charsdavy.github.io/categories/project/"/>
    
    
      <category term="mac" scheme="http://charsdavy.github.io/tags/mac-os/"/>
    
      <category term="工具" scheme="http://charsdavy.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>简单聊聊大小端问题</title>
    <link href="http://charsdavy.github.io/2016/08/13/memory-big-little-endian/"/>
    <id>http://charsdavy.github.io/2016/08/13/memory-big-little-endian/</id>
    <published>2016-08-13T13:34:48.000Z</published>
    <updated>2017-03-31T13:37:53.000Z</updated>
    
    <content type="html">&lt;p&gt;在计算机系统中，我们是以字节为单位的，每个地址单元都对应着一个字节，一个字节为 8bit。但是在C语言中除了8bit的char之外，还有16bit的short型，32bit的long型（要看具体的编译器）。另外，对于位数大于8位的处理器，例如16位或者32位的处理器，由于寄存器宽度大于一个字节，那么必然存在着一个如何将多个字节安排的问题。因此就导致了大端存储模式和小端存储模式。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;先来看一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; bits32;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; bytes[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isLittleEndian&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value.bytes[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value.bytes[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value.bytes[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value.bytes[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value.bits32 == &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( isLittleEndian())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;is little endian! &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;is big endian! &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所谓的&lt;strong&gt;大端模式&lt;/strong&gt;，是指数据的低位（就是权值较小的后面那几位）保存在内存的高地址中，而数据的高位，保存在内存的低地址中。这样的存储模式有点儿类似于把数据当作字符串顺序处理：地址由小向大增加，而数据从高位往低位放；&lt;/p&gt;
&lt;p&gt;所谓的&lt;strong&gt;小端模式&lt;/strong&gt;，是指数据的低位保存在内存的低地址中，而数据的高位保存在内存的高地址中。这种存储模式将地址的高低和数据位权有效地结合起来，高地址部分权值高，低地址部分权值低，和我们的逻辑方法一致。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么会有大小端模式之分呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是因为在计算机系统中，我们是以字节为单位的，每个地址单元都对应着一个字节，一个字节为 8bit。但是在C语言中除了8bit的char之外，还有16bit的short型，32bit的long型（要看具体的编译器）。另外，对于位数大于8位的处理器，例如16位或者32位的处理器，由于寄存器宽度大于一个字节，那么必然存在着一个如何将多个字节安排的问题。因此就导致了大端存储模式和小端存储模式。&lt;/p&gt;
&lt;p&gt;例如一个16bit的short型x，在内存中的地址为0x0010，x的值为0x1122，那么0x11为高字节，0x22为低字节。对于大端模式，就将0x11放在低地址中，即0x0010中，0x22放在高地址中，即0x0011中。小端模式，刚好相反。我们常用的X86结构是小端模式，而KEIL C51则为大端模式。很多的ARM，DSP都为小端模式。有些ARM处理器还可以由硬件来选择是大端模式还是小端模式。&lt;br&gt;下面这段代码可以用来测试一下你的编译器是大端模式还是小端模式：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; x0, x1; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x = &lt;span class=&quot;number&quot;&gt;0x1122&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x0 = ((&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;*)&amp;amp;x)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//低地址单元 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x1 = ((&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;*)&amp;amp;x)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//高地址单元&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;若x0=0x11,则是大端; 若x0=0x22,则是小端。&lt;/p&gt;
&lt;p&gt;上面的程序还可以看出，数据寻址时，用的是低位字节的地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是字节对齐，为什么要对齐?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现代计算机中内存空间都是按照byte划分的，从理论上讲似乎对任何类型的变量的访问可以从任何地址开始，但实际情况是在访问特定类型变量的时候经常在特定的内存地址访问，这就需要各种类型数据按照一定的规则在空间上排列，而不是顺序的一个接一个的排放，这就是对齐。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对齐的作用和原因&lt;/strong&gt;：各个硬件平台对存储空间的处理上有很大的不同。一些平台对某些特定类型的数据只能从某些特定地址开始存取。比如有些架构的CPU在访问一个没有进行对齐的变量的时候会发生错误，那么在这种架构下编程必须保证字节对齐。其他平台可能没有这种情况，但是最常见的是如果不按照适合其平台要求对数据存放进行对齐，会在存取效率上带来损失。比如有些平台每次读都是从偶地址开始，如果一个int型（假设为32位系统）如果存放在偶地址开始的地方，那么一个读周期就可以读出这32bit，而如果存放在奇地址开始的地方，就需要2个读周期，并对两次读出的结果的高低字节进行拼凑才能得到该32bit数据。显然在读取效率上下降很多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字节对齐对程序的影响？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先让我们看几个例子(32bit，x86环境，gcc编译器)：&lt;br&gt;设结构体如下定义：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在已知32位机器上各种数据类型的长度如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;char:1(有符号无符号同) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;short:2(有符号无符号同) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int:4(有符号无符号同) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long:4(有符号无符号同) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;float:4    double:8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么上面两个结构大小如何呢?&lt;/p&gt;
&lt;p&gt;结果是：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sizeof(strcut A)值为8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sizeof(struct B)的值却是12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结构体A中包含了4字节长度的int一个，1字节长度的char一个和2字节长度的short型数据一个,B也一样；按理说A，B大小应该都是7字节。之所以出现上面的结果是因为编译器要对数据成员在空间上进行对齐。上面是按照编译器的默认设置进行对齐的结果，那么我们是不是可以改变编译器的这种默认对齐设置呢，当然可以。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#pragma pack (2) /*指定按2字节对齐*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    short c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma pack () /*取消指定对齐，恢复缺省对齐*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sizeof(struct C)值是8。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;修改对齐值为1：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma pack (1) /*指定按1字节对齐*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct D&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    short c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma pack () /*取消指定对齐，恢复缺省对齐*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sizeof(struct D)值为7。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;编译器是按照什么样的原则进行对齐的?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先让我们看四个重要的基本概念：&lt;/p&gt;
&lt;p&gt;1.数据类型自身的对齐值：&lt;/p&gt;
&lt;p&gt;对于char型数据，其自身对齐值为1，对于short型为2，对于int,float,double类型，其自身对齐值为4，单位字节。&lt;/p&gt;
&lt;p&gt;2.结构体或者类的自身对齐值：其成员中自身对齐值最大的那个值。&lt;/p&gt;
&lt;p&gt;3.指定对齐值：#pragma pack (value)时的指定对齐值value。&lt;/p&gt;
&lt;p&gt;4.数据成员、结构体和类的有效对齐值：自身对齐值和指定对齐值中小的那个值。&lt;/p&gt;
&lt;p&gt;有了这些值，我们就可以很方便的来讨论具体数据结构的成员和其自身的对齐方式。有效对齐值N是最终用来决定数据存放地址方式的值，最重要。有效对齐N，就是表示“对齐在N上”，也就是说该数据的“存放起始地址%N=0”。而数据结构中的数据变量都是按定义的先后顺序来排放的。第一个数据变量的起始地址就是数据结构的起始地址。结构体的成员变量要对齐排放，结构体本身也要根据自身的有效对齐值圆整(就是结构体成员变量占用总长度需要是对结构体有效对齐值的整数倍，结合下面例子理解)。这样就不难理解上面的几个例子的值了。&lt;/p&gt;
&lt;p&gt;例子分析：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假设B从地址空间0x0000开始排放。该例子中没有定义指定对齐值，在笔者环境下，该值默认为4。第一个成员变量b的自身对齐值是1，比指定或者默认指定对齐值4小，所以其有效对齐值为1，所以其存放地址0x0000符合0x0000%1=0。第二个成员变量a，其自身对齐值为4，所以有效对齐值也为4，所以只能存放在起始地址为0x0004到0x0007这四个连续的字节空间中，复核0x0004%4=0,且紧靠第一个变量。第三个变量c，自身对齐值为2，所以有效对齐值也是2，可以存放在0x0008到0x0009这两个字节空间中，符合0x0008%2=0。所以从0x0000到0x0009存放的都是B内容。再看数据结构B的自身对齐值为其变量中最大对齐值(这里是b）所以就是4，所以结构体的有效对齐值也是4。根据结构体圆整的要求，0x0009到0x0000=10字节，（10＋2）％4＝0。所以0x000A到0x000B也为结构体B所占用。故B从0x0000到0x000B共有12个字节，sizeof(struct B)=12;其实如果就这一个就来说它已经满足字节对齐了，因为它的起始地址是0，因此肯定是对齐的。之所以在后面补充2个字节，是因为编译器为了实现结构数组的存取效率，试想如果我们定义了一个结构B的数组，那么第一个结构起始地址是0没有问题，但是第二个结构呢?按照数组的定义，数组中所有元素都是紧挨着的，如果我们不把结构的大小补充为4的整数倍，那么下一个结构的起始地址将是0x000A，这显然不能满足结构的地址对齐了，因此我们要把结构补充成有效对齐大小的整数倍。其实诸如：对于char型数据，其自身对齐值为1，对于short型为2，对于int,float,double类型，其自身对齐值为4，这些已有类型的自身对齐值也是基于数组考虑的，只是因为这些类型的长度已知了，所以他们的自身对齐值也就已知了。&lt;/p&gt;
&lt;p&gt;同理，分析下面例子：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#pragma pack (2) /*指定按2字节对齐*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    short c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma pack () /*取消指定对齐，恢复缺省对齐*/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个变量b的自身对齐值为1，指定对齐值为2，所以，其有效对齐值为1，假设C从0x0000开始，那么b存放在0x0000，符合0x0000%1=0；第二个变量，自身对齐值为4，指定对齐值为2，所以有效对齐值为2，所以顺序存放在0x0002、0x0003、0x0004、0x0005四个连续字节中，符合0x0002%2=0。第三个变量c的自身对齐值为2，所以有效对齐值为2，顺序存放在0x0006、0x0007中，符合0x0006%2=0。所以从0x0000到0x00007共八字节存放的是C的变量。又C的自身对齐值为4，所以C的有效对齐值为2。又8%2=0，C只占用0x0000到0x0007的八个字节。所以sizeof(struct C)=8。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何修改编译器的默认对齐值?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.在VC IDE中，可以这样修改：[Project]|[Settings],c/c++选项卡Category的Code Generation选项的Struct Member Alignment中修改，默认是8字节。&lt;/p&gt;
&lt;p&gt;2.在编码时，可以这样动态修改：#pragma pack。注意：是pragma而不是progma。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;针对字节对齐，我们在编程中如何考虑?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果在编程的时候要考虑节约空间的话,那么我们只需要假定结构的首地址是0，然后各个变量按照上面的原则进行排列即可，基本的原则就是把结构中的变量按照类型大小从小到大声明，尽量减少中间的填补空间。还有一种就是为了以空间换取时间的效率，我们显示的进行填补空间进行对齐，比如：有一种使用空间换时间做法是显式的插入reserved成员：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; A&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; reserved[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;//使用空间换时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;reserved成员对我们的程序没有什么意义，它只是起到填补空间以达到字节对齐的目的。当然即使不加这个成员，通常编译器也会给我们自动填补对齐，我们自己加上它只是起到显式的提醒作用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字节对齐可能带来的隐患？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代码中关于对齐的隐患，很多是隐式的。比如在强制类型转换的时候。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0x12345678&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *p=&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; *p1=&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p=&amp;amp;i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*p=&lt;span class=&quot;number&quot;&gt;0x00&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p1=(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; *)(p+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*p1=&lt;span class=&quot;number&quot;&gt;0x0000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后两句代码，从奇数边界去访问unsigned short型变量，显然不符合对齐的规定。在x86上，类似的操作只会影响效率，但是在MIPS或者sparc上，可能就是一个error，因为它们要求必须字节对齐。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何查找与字节对齐方面的问题？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果出现对齐或者赋值问题首先查看:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编译器的big little端设置；&lt;/li&gt;
&lt;li&gt;看这种体系本身是否支持非对齐访问；&lt;/li&gt;
&lt;li&gt;如果支持，看设置了对齐与否；如果没有，则看访问时需要加某些特殊的修饰来标志其特殊访问操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;ARM下的对齐处理？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对齐的使用：&lt;/p&gt;
&lt;p&gt;1.__align(num)&lt;/p&gt;
&lt;p&gt;这个用于修改最高级别对象的字节边界。在汇编中使用LDRD或者STRD时，就要用到此命令&lt;strong&gt;align(8)进行修饰限制来保证数据对象是相应对齐。这个修饰对象的命令最大是8个字节限制，可以让2字节的对象进行4字节对齐，但是不能让4字节的对象2字节对齐。&lt;/strong&gt;align是存储类修改，它只修饰最高级类型对象，不能用于结构或者函数对象。&lt;/p&gt;
&lt;p&gt;2.__packed &lt;/p&gt;
&lt;p&gt;__packed是进行一字节对齐&lt;/p&gt;
&lt;p&gt;1）不能对packed的对象进行对齐；&lt;/p&gt;
&lt;p&gt;2）所有对象的读写访问都进行非对齐访问；&lt;/p&gt;
&lt;p&gt;3）float及包含float的结构联合及未用__packed的对象将不能字节对齐；&lt;/p&gt;
&lt;p&gt;4）__packed对局部整型变量无影响；&lt;/p&gt;
&lt;p&gt;5）强制由unpacked对象向packed对象转化是未定义，整型指针可以合法定义为packed。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__packed int* p;  //__packed int 则没有意义&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;6）对齐或非对齐读写访问带来问题&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__packed struct STRUCT_TEST&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   char a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   int b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   char c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;    //定义如下结构此时b的起始地址一定是不对齐的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //在栈中访问b可能有问题,因为栈上数据肯定是对齐访问[from CL]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//将下面变量定义成全局静态不在栈上 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static char* p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static struct STRUCT_TEST a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void Main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__packed int* q;  //此时定义成__packed来修饰当前q指向为非对齐的数据地址下面的访问则可以&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = (char*)&amp;amp;a;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;q = (int*)(p+1);      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*q = 0x87654321; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;得到赋值的汇编指令很清楚&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldr      r5,0x20001590 ; = #0x12345678&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0xe1a00005]   mov      r0,r5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0xeb0000b0]   bl       __rt_uwrite4  //在此处调用一个写4byte的操作函数 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0xe5c10000]   strb     r0,[r1,#0]   //函数进行4次strb操作然后返回保证了数据正确的访问&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0xe1a02420]   mov      r2,r0,lsr #8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0xe5c12001]   strb     r2,[r1,#1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0xe1a02820]   mov      r2,r0,lsr #16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0xe5c12002]   strb     r2,[r1,#2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0xe1a02c20]   mov      r2,r0,lsr #24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0xe5c12003]   strb     r2,[r1,#3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0xe1a0f00e]   mov      pc,r14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果q没有加__packed修饰则汇编出来指令是这样直接会导致奇地址处访问失败&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0xe59f2018]   ldr      r2,0x20001594 ; = #0x87654321&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0xe5812000]   str      r2,[r1,#0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//这样可以很清楚的看到非对齐访问是如何产生错误的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//以及如何消除非对齐访问带来问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//也可以看到非对齐访问和对齐访问的指令差异导致效率问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有关于内存对齐的问题，可以看看&lt;a href=&quot;http://charsdavy.github.io/2016/02/10/memory-alignment/&quot;&gt;《内存对齐详解》&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在计算机系统中，我们是以字节为单位的，每个地址单元都对应着一个字节，一个字节为 8bit。但是在C语言中除了8bit的char之外，还有16bit的short型，32bit的long型（要看具体的编译器）。另外，对于位数大于8位的处理器，例如16位或者32位的处理器，由于寄存器宽度大于一个字节，那么必然存在着一个如何将多个字节安排的问题。因此就导致了大端存储模式和小端存储模式。&lt;/p&gt;
    
    </summary>
    
      <category term="pieces" scheme="http://charsdavy.github.io/categories/pieces/"/>
    
    
      <category term="c" scheme="http://charsdavy.github.io/tags/c-language/"/>
    
      <category term="内存" scheme="http://charsdavy.github.io/tags/storage/"/>
    
      <category term="windows" scheme="http://charsdavy.github.io/tags/windows-os/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS 开发 (一) 准备工作</title>
    <link href="http://charsdavy.github.io/2016/08/12/mac-os-develop-prepare/"/>
    <id>http://charsdavy.github.io/2016/08/12/mac-os-develop-prepare/</id>
    <published>2016-08-12T00:00:05.000Z</published>
    <updated>2017-03-31T13:37:53.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;程序猿，一个另类的物种。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实很多时候，懒懒的程序猿因为自己的需要，或者是因为使用别人的工具并不满意，而催发出自己解决问题的想法。这个 Mac OS 开发系列，就是因为博主自己写博客是需要上传图片，而目前的 App 并不满意的情况下，决心自己学习，自己开发出喜欢的 App 而诞生的。&lt;/p&gt;
&lt;p&gt;本文章为该系列开篇，循序渐进，从基础开始。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Mac&quot;&gt;&lt;a href=&quot;#Mac&quot; class=&quot;headerlink&quot; title=&quot;Mac&quot;&gt;&lt;/a&gt;Mac&lt;/h1&gt;&lt;p&gt;这是开发的基础，至于是 Mac Book Pro，还是iMac，或者Mac mini 就随个人喜欢和实际状况。总之，不建议使用黑苹果。&lt;/p&gt;
&lt;h1 id=&quot;Xcode&quot;&gt;&lt;a href=&quot;#Xcode&quot; class=&quot;headerlink&quot; title=&quot;Xcode&quot;&gt;&lt;/a&gt;Xcode&lt;/h1&gt;&lt;p&gt;这是毫无置疑的开发工具，具体如何使用，Google 一大把，这里就不再详说，以后若是博主自己写了相关内容，会后续放上链接跳转。&lt;/p&gt;
&lt;h1 id=&quot;创建&quot;&gt;&lt;a href=&quot;#创建&quot; class=&quot;headerlink&quot; title=&quot;创建&quot;&gt;&lt;/a&gt;创建&lt;/h1&gt;&lt;p&gt;启动Xcode，选择Create a new Xcode project，(非首次运行Xcode，从菜单File-New-&amp;gt;Project) 进入工程模版选择界面，选择OSX-&amp;gt;Application-&amp;gt;Cocoa Application&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-os-develop-prepare-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h1&gt;&lt;h2 id=&quot;info-plist&quot;&gt;&lt;a href=&quot;#info-plist&quot; class=&quot;headerlink&quot; title=&quot;info.plist&quot;&gt;&lt;/a&gt;info.plist&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-os-develop-prepare-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Application is agent(UIElement)&lt;/code&gt; 字段可以控制App的MainMenu是否显示，Logo在Dock是否显示。&lt;/p&gt;
&lt;h2 id=&quot;Capabilities&quot;&gt;&lt;a href=&quot;#Capabilities&quot; class=&quot;headerlink&quot; title=&quot;Capabilities&quot;&gt;&lt;/a&gt;Capabilities&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-os-develop-prepare-3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里我们重点关注下App Sandbox，Apple现在要求上架Mac AppStore的应用必须使用沙盒，所以发布到Mac商店的应用你必须选择打开。&lt;/p&gt;
&lt;p&gt;如果你的应用要访问服务器的API接口，必须打开Outgoing Connections。&lt;/p&gt;
&lt;p&gt;Hardware里面必须选择打开Printing，否则审核不通过。&lt;/p&gt;
&lt;p&gt;File Accedd:如果你需要让用户选择访问本地的文件，User Selected File 中选择读/写权限。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/mac-os-develop-prepare-4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;程序猿，一个另类的物种。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实很多时候，懒懒的程序猿因为自己的需要，或者是因为使用别人的工具并不满意，而催发出自己解决问题的想法。这个 Mac OS 开发系列，就是因为博主自己写博客是需要上传图片，而目前的 App 并不满意的情况下，决心自己学习，自己开发出喜欢的 App 而诞生的。&lt;/p&gt;
&lt;p&gt;本文章为该系列开篇，循序渐进，从基础开始。&lt;/p&gt;
    
    </summary>
    
      <category term="code" scheme="http://charsdavy.github.io/categories/code/"/>
    
    
      <category term="mac" scheme="http://charsdavy.github.io/tags/mac-os/"/>
    
      <category term="碎碎念" scheme="http://charsdavy.github.io/tags/text/"/>
    
  </entry>
  
  <entry>
    <title>配色和排版（基础篇）</title>
    <link href="http://charsdavy.github.io/2016/08/05/design-harmonize-colours/"/>
    <id>http://charsdavy.github.io/2016/08/05/design-harmonize-colours/</id>
    <published>2016-08-05T14:49:43.000Z</published>
    <updated>2017-03-31T13:37:53.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;在什么样的团队就能成为什么样的人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来到公司已经有一段时间了，在这段时间里，自我感觉是快速成长的。今天，终于决定扯来公司这张虎皮来给自己镀镀金，这里主要分享一下公司设计团队的设计技巧，希望对大家有帮助。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;基本颜色&quot;&gt;&lt;a href=&quot;#基本颜色&quot; class=&quot;headerlink&quot; title=&quot;基本颜色&quot;&gt;&lt;/a&gt;基本颜色&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;暖色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/design-harmonize-colours-1.png?imageView/2/w/600&quot; alt=&quot;暖色&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冷色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/design-harmonize-colours-2.png?imageView/2/w/600&quot; alt=&quot;冷色&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中性色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/design-harmonize-colours-3.png?imageView/2/w/600&quot; alt=&quot;中性色&quot;&gt;&lt;/p&gt;
&lt;p&gt;以上色块示例只是日常使用中的基础颜色，各种颜色可以延伸出较多的相近色。这个需要根据内容主题来搭配颜色。&lt;br&gt;&lt;strong&gt;所有的颜色搭配都是为了突出和强调主题。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;颜色搭配基础&quot;&gt;&lt;a href=&quot;#颜色搭配基础&quot; class=&quot;headerlink&quot; title=&quot;颜色搭配基础&quot;&gt;&lt;/a&gt;颜色搭配基础&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;暖色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;暖色系的搭配包括深色+浅色，也可以使用少量冷色衬托。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/design-harmonize-colours-4.png?imageView/2/w/600&quot; alt=&quot;暖色搭配&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冷色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;冷色系的搭配包括深色+浅色，也可以使用少量暖色衬托。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/design-harmonize-colours-5.png?imageView/2/w/600&quot; alt=&quot;冷色搭配&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对比色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对比色是深色和浅色，暖色和冷色的搭配。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/design-harmonize-colours-6.png?imageView/2/w/600&quot; alt=&quot;对比色搭配&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中性色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中性色可以搭配冷色、暖色。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/design-harmonize-colours-7.png?imageView/2/w/600&quot; alt=&quot;中性色搭配&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;图文排版基础&quot;&gt;&lt;a href=&quot;#图文排版基础&quot; class=&quot;headerlink&quot; title=&quot;图文排版基础&quot;&gt;&lt;/a&gt;图文排版基础&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;左对齐&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;左对齐分两种：&lt;/p&gt;
&lt;p&gt;1）文字位于整张图片左侧，图片内容居右。&lt;/p&gt;
&lt;p&gt;2）文字位于整张图片中间，但文字还是左对齐。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/design-harmonize-colours-8.png?imageView/2/w/600&quot; alt=&quot;左对齐&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;居中对齐&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;居中对齐是文字位于整张图片中间，背景加入素材作为衬托。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/design-harmonize-colours-9.png?imageView/2/w/600&quot; alt=&quot;居中对齐&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;右对齐&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文字位于整张图片右侧，图片内容居左。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/design-harmonize-colours-10.png?imageView/2/w/600&quot; alt=&quot;右对齐&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;配色是否协调需要长期观摩。排版需要注意适当的留白。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o88e8any8.bkt.clouddn.com/design-harmonize-colours-11.png?imageView/2/w/200&quot; alt=&quot;ZAKER&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在什么样的团队就能成为什么样的人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来到公司已经有一段时间了，在这段时间里，自我感觉是快速成长的。今天，终于决定扯来公司这张虎皮来给自己镀镀金，这里主要分享一下公司设计团队的设计技巧，希望对大家有帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="pieces" scheme="http://charsdavy.github.io/categories/pieces/"/>
    
    
      <category term="碎碎念" scheme="http://charsdavy.github.io/tags/text/"/>
    
      <category term="design" scheme="http://charsdavy.github.io/tags/design/"/>
    
  </entry>
  
</feed>
